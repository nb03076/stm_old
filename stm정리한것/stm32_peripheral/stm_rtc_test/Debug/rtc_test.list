
rtc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d0  080048d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010870  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fb  00000000  00000000  00030910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de8  00000000  00000000  00033af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240e4  00000000  00000000  000348e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a2a  00000000  00000000  000589c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e077a  00000000  00000000  0006a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ab68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004214  00000000  00000000  0014abb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004798 	.word	0x08004798

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004798 	.word	0x08004798

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <DWT_Delay_Init>:

#include "DWT_Delay.h"


uint32_t DWT_Delay_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <DWT_Delay_Init+0x58>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <DWT_Delay_Init+0x58>)
 80005ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <DWT_Delay_Init+0x58>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <DWT_Delay_Init+0x58>)
 80005ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005be:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005c6:	f023 0301 	bic.w	r3, r3, #1
 80005ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80005de:	bf00      	nop
    __ASM volatile ("NOP");
 80005e0:	bf00      	nop
    __ASM volatile ("NOP");
 80005e2:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <DWT_Delay_Init+0x5c>)
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80005ec:	2300      	movs	r3, #0
 80005ee:	e000      	b.n	80005f2 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80005f0:	2301      	movs	r3, #1
    }
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000edf0 	.word	0xe000edf0
 8000600:	e0001000 	.word	0xe0001000

08000604 <DWT_Delay_us>:
uint32_t DWT_Delay_Init(void);


// This Function Provides Delay In Microseconds Using DWT
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <DWT_Delay_us+0x48>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000612:	f001 fe7f 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <DWT_Delay_us+0x4c>)
 800061a:	fba2 2303 	umull	r2, r3, r2, r3
 800061e:	0c9b      	lsrs	r3, r3, #18
 8000620:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	68ba      	ldr	r2, [r7, #8]
 8000626:	fb02 f303 	mul.w	r3, r2, r3
 800062a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800062c:	bf00      	nop
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <DWT_Delay_us+0x48>)
 8000630:	685a      	ldr	r2, [r3, #4]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	1ad2      	subs	r2, r2, r3
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	1acb      	subs	r3, r1, r3
 800063c:	429a      	cmp	r2, r3
 800063e:	d3f6      	bcc.n	800062e <DWT_Delay_us+0x2a>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	e0001000 	.word	0xe0001000
 8000650:	431bde83 	.word	0x431bde83

08000654 <DWT_Delay_ms>:

// This Function Provides Delay In Milliseconds Using DWT
__STATIC_INLINE void DWT_Delay_ms(volatile uint32_t au32_milliseconds)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <DWT_Delay_ms+0x44>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000);
 8000662:	f001 fe57 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8000666:	4603      	mov	r3, r0
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <DWT_Delay_ms+0x48>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	099b      	lsrs	r3, r3, #6
 8000670:	60bb      	str	r3, [r7, #8]
  au32_milliseconds *= au32_ticks;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	fb02 f303 	mul.w	r3, r2, r3
 800067a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_milliseconds);
 800067c:	bf00      	nop
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <DWT_Delay_ms+0x44>)
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3f8      	bcc.n	800067e <DWT_Delay_ms+0x2a>
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	e0001000 	.word	0xe0001000
 800069c:	10624dd3 	.word	0x10624dd3

080006a0 <LCD_DATA>:


//-----[ Alphanumeric LCD 16x2 Routines ]-----

void LCD_DATA(unsigned char Data)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <LCD_DATA+0x26>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 1);
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <LCD_DATA+0xc4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a2a      	ldr	r2, [pc, #168]	; (8000764 <LCD_DATA+0xc4>)
 80006ba:	8891      	ldrh	r1, [r2, #4]
 80006bc:	2201      	movs	r2, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f9d2 	bl	8001a68 <HAL_GPIO_WritePin>
 80006c4:	e007      	b.n	80006d6 <LCD_DATA+0x36>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, 0);
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <LCD_DATA+0xc4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a26      	ldr	r2, [pc, #152]	; (8000764 <LCD_DATA+0xc4>)
 80006cc:	8891      	ldrh	r1, [r2, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 f9c9 	bl	8001a68 <HAL_GPIO_WritePin>
    if(Data & 2)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d008      	beq.n	80006f2 <LCD_DATA+0x52>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 1);
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <LCD_DATA+0xc4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <LCD_DATA+0xc4>)
 80006e6:	88d1      	ldrh	r1, [r2, #6]
 80006e8:	2201      	movs	r2, #1
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9bc 	bl	8001a68 <HAL_GPIO_WritePin>
 80006f0:	e007      	b.n	8000702 <LCD_DATA+0x62>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, 0);
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <LCD_DATA+0xc4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <LCD_DATA+0xc4>)
 80006f8:	88d1      	ldrh	r1, [r2, #6]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f9b3 	bl	8001a68 <HAL_GPIO_WritePin>
    if(Data & 4)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	2b00      	cmp	r3, #0
 800070a:	d008      	beq.n	800071e <LCD_DATA+0x7e>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 1);
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <LCD_DATA+0xc4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <LCD_DATA+0xc4>)
 8000712:	8911      	ldrh	r1, [r2, #8]
 8000714:	2201      	movs	r2, #1
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f9a6 	bl	8001a68 <HAL_GPIO_WritePin>
 800071c:	e007      	b.n	800072e <LCD_DATA+0x8e>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, 0);
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <LCD_DATA+0xc4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <LCD_DATA+0xc4>)
 8000724:	8911      	ldrh	r1, [r2, #8]
 8000726:	2200      	movs	r2, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f99d 	bl	8001a68 <HAL_GPIO_WritePin>
    if(Data & 8)
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	2b00      	cmp	r3, #0
 8000736:	d008      	beq.n	800074a <LCD_DATA+0xaa>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 1);
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <LCD_DATA+0xc4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <LCD_DATA+0xc4>)
 800073e:	8951      	ldrh	r1, [r2, #10]
 8000740:	2201      	movs	r2, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f001 f990 	bl	8001a68 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
}
 8000748:	e007      	b.n	800075a <LCD_DATA+0xba>
    	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, 0);
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LCD_DATA+0xc4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a05      	ldr	r2, [pc, #20]	; (8000764 <LCD_DATA+0xc4>)
 8000750:	8951      	ldrh	r1, [r2, #10]
 8000752:	2200      	movs	r2, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f001 f987 	bl	8001a68 <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	08004868 	.word	0x08004868

08000768 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 0);
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <LCD_CMD+0x60>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <LCD_CMD+0x60>)
 8000778:	89d1      	ldrh	r1, [r2, #14]
 800077a:	2200      	movs	r2, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f973 	bl	8001a68 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff ff8b 	bl	80006a0 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <LCD_CMD+0x60>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <LCD_CMD+0x60>)
 8000790:	8991      	ldrh	r1, [r2, #12]
 8000792:	2201      	movs	r2, #1
 8000794:	4618      	mov	r0, r3
 8000796:	f001 f967 	bl	8001a68 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <LCD_CMD+0x60>)
 800079c:	8a1b      	ldrh	r3, [r3, #16]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff30 	bl	8000604 <DWT_Delay_us>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <LCD_CMD+0x60>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <LCD_CMD+0x60>)
 80007aa:	8991      	ldrh	r1, [r2, #12]
 80007ac:	2200      	movs	r2, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f95a 	bl	8001a68 <HAL_GPIO_WritePin>
    DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <LCD_CMD+0x60>)
 80007b6:	8a1b      	ldrh	r3, [r3, #16]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff23 	bl	8000604 <DWT_Delay_us>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08004868 	.word	0x08004868

080007cc <LCD_Clear>:
void LCD_Clear()
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ffc9 	bl	8000768 <LCD_CMD>
    LCD_CMD(1);
 80007d6:	2001      	movs	r0, #1
 80007d8:	f7ff ffc6 	bl	8000768 <LCD_CMD>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <LCD_Set_Cursor>:
void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d111      	bne.n	800081a <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	337f      	adds	r3, #127	; 0x7f
 80007fa:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	091b      	lsrs	r3, r3, #4
 8000800:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffab 	bl	8000768 <LCD_CMD>
      LCD_CMD(Low4);
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffa7 	bl	8000768 <LCD_CMD>
    }
    if(r == 2)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d111      	bne.n	8000844 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	3b41      	subs	r3, #65	; 0x41
 8000824:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	091b      	lsrs	r3, r3, #4
 800082a:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff ff96 	bl	8000768 <LCD_CMD>
      LCD_CMD(Low4);
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff92 	bl	8000768 <LCD_CMD>
    }
    DWT_Delay_ms(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff ff05 	bl	8000654 <DWT_Delay_ms>
}
 800084a:	bf00      	nop
 800084c:	3710      	adds	r7, #16
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <LCD_Init>:
void LCD_Init()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
	// Initialize The DWT Delay Function Which Will Be Used Later On
	DWT_Delay_Init();
 800086a:	f7ff fe9b 	bl	80005a4 <DWT_Delay_Init>
    // IO Pin Configurations
	if(LCD16x2_CfgParam.LCD_GPIO == GPIOA)
 800086e:	4b74      	ldr	r3, [pc, #464]	; (8000a40 <LCD_Init+0x1ec>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a74      	ldr	r2, [pc, #464]	; (8000a44 <LCD_Init+0x1f0>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d10e      	bne.n	8000896 <LCD_Init+0x42>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	4b72      	ldr	r3, [pc, #456]	; (8000a48 <LCD_Init+0x1f4>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	4a71      	ldr	r2, [pc, #452]	; (8000a48 <LCD_Init+0x1f4>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	6313      	str	r3, [r2, #48]	; 0x30
 8000888:	4b6f      	ldr	r3, [pc, #444]	; (8000a48 <LCD_Init+0x1f4>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	e03a      	b.n	800090c <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOB)
 8000896:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <LCD_Init+0x1ec>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a6c      	ldr	r2, [pc, #432]	; (8000a4c <LCD_Init+0x1f8>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10e      	bne.n	80008be <LCD_Init+0x6a>
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	4b68      	ldr	r3, [pc, #416]	; (8000a48 <LCD_Init+0x1f4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a67      	ldr	r2, [pc, #412]	; (8000a48 <LCD_Init+0x1f4>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <LCD_Init+0x1f4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	e026      	b.n	800090c <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOC)
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <LCD_Init+0x1ec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a63      	ldr	r2, [pc, #396]	; (8000a50 <LCD_Init+0x1fc>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d10e      	bne.n	80008e6 <LCD_Init+0x92>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	4b5e      	ldr	r3, [pc, #376]	; (8000a48 <LCD_Init+0x1f4>)
 80008ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d0:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <LCD_Init+0x1f4>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30
 80008d8:	4b5b      	ldr	r3, [pc, #364]	; (8000a48 <LCD_Init+0x1f4>)
 80008da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	e012      	b.n	800090c <LCD_Init+0xb8>
	else if(LCD16x2_CfgParam.LCD_GPIO == GPIOD)
 80008e6:	4b56      	ldr	r3, [pc, #344]	; (8000a40 <LCD_Init+0x1ec>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a5a      	ldr	r2, [pc, #360]	; (8000a54 <LCD_Init+0x200>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d10d      	bne.n	800090c <LCD_Init+0xb8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b54      	ldr	r3, [pc, #336]	; (8000a48 <LCD_Init+0x1f4>)
 80008f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f8:	4a53      	ldr	r2, [pc, #332]	; (8000a48 <LCD_Init+0x1f4>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000900:	4b51      	ldr	r3, [pc, #324]	; (8000a48 <LCD_Init+0x1f4>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D4_PIN, GPIO_PIN_RESET);
 800090c:	4b4c      	ldr	r3, [pc, #304]	; (8000a40 <LCD_Init+0x1ec>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a4b      	ldr	r2, [pc, #300]	; (8000a40 <LCD_Init+0x1ec>)
 8000912:	8891      	ldrh	r1, [r2, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f8a6 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D5_PIN, GPIO_PIN_RESET);
 800091c:	4b48      	ldr	r3, [pc, #288]	; (8000a40 <LCD_Init+0x1ec>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a47      	ldr	r2, [pc, #284]	; (8000a40 <LCD_Init+0x1ec>)
 8000922:	88d1      	ldrh	r1, [r2, #6]
 8000924:	2200      	movs	r2, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f89e 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D6_PIN, GPIO_PIN_RESET);
 800092c:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <LCD_Init+0x1ec>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <LCD_Init+0x1ec>)
 8000932:	8911      	ldrh	r1, [r2, #8]
 8000934:	2200      	movs	r2, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f001 f896 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.D7_PIN, GPIO_PIN_RESET);
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <LCD_Init+0x1ec>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a3f      	ldr	r2, [pc, #252]	; (8000a40 <LCD_Init+0x1ec>)
 8000942:	8951      	ldrh	r1, [r2, #10]
 8000944:	2200      	movs	r2, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f88e 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 800094c:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <LCD_Init+0x1ec>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a3b      	ldr	r2, [pc, #236]	; (8000a40 <LCD_Init+0x1ec>)
 8000952:	89d1      	ldrh	r1, [r2, #14]
 8000954:	2200      	movs	r2, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f001 f886 	bl	8001a68 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 800095c:	4b38      	ldr	r3, [pc, #224]	; (8000a40 <LCD_Init+0x1ec>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a37      	ldr	r2, [pc, #220]	; (8000a40 <LCD_Init+0x1ec>)
 8000962:	8991      	ldrh	r1, [r2, #12]
 8000964:	2200      	movs	r2, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 f87e 	bl	8001a68 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 800096c:	4b34      	ldr	r3, [pc, #208]	; (8000a40 <LCD_Init+0x1ec>)
 800096e:	889a      	ldrh	r2, [r3, #4]
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <LCD_Init+0x1ec>)
 8000972:	88db      	ldrh	r3, [r3, #6]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000974:	4313      	orrs	r3, r2
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <LCD_Init+0x1ec>)
 800097a:	891b      	ldrh	r3, [r3, #8]
 800097c:	4313      	orrs	r3, r2
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <LCD_Init+0x1ec>)
 8000982:	895b      	ldrh	r3, [r3, #10]
 8000984:	4313      	orrs	r3, r2
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <LCD_Init+0x1ec>)
 800098a:	89db      	ldrh	r3, [r3, #14]
 800098c:	4313      	orrs	r3, r2
 800098e:	b29a      	uxth	r2, r3
			LCD16x2_CfgParam.EN_PIN;
 8000990:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <LCD_Init+0x1ec>)
 8000992:	899b      	ldrh	r3, [r3, #12]
			LCD16x2_CfgParam.D6_PIN |LCD16x2_CfgParam.D7_PIN | LCD16x2_CfgParam.RS_PIN |
 8000994:	4313      	orrs	r3, r2
 8000996:	b29b      	uxth	r3, r3
	GPIO_InitStruct.Pin = LCD16x2_CfgParam.D4_PIN | LCD16x2_CfgParam.D5_PIN |
 8000998:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LCD16x2_CfgParam.LCD_GPIO, &GPIO_InitStruct);
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <LCD_Init+0x1ec>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f107 0214 	add.w	r2, r7, #20
 80009ae:	4611      	mov	r1, r2
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 fead 	bl	8001710 <HAL_GPIO_Init>

	// The Init. Procedure As Described In The Datasheet
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, GPIO_PIN_RESET);
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <LCD_Init+0x1ec>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <LCD_Init+0x1ec>)
 80009bc:	89d1      	ldrh	r1, [r2, #14]
 80009be:	2200      	movs	r2, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f851 	bl	8001a68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, GPIO_PIN_RESET);
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <LCD_Init+0x1ec>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a1d      	ldr	r2, [pc, #116]	; (8000a40 <LCD_Init+0x1ec>)
 80009cc:	8991      	ldrh	r1, [r2, #12]
 80009ce:	2200      	movs	r2, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 f849 	bl	8001a68 <HAL_GPIO_WritePin>
    LCD_DATA(0x00);
 80009d6:	2000      	movs	r0, #0
 80009d8:	f7ff fe62 	bl	80006a0 <LCD_DATA>
    DWT_Delay_ms(150);
 80009dc:	2096      	movs	r0, #150	; 0x96
 80009de:	f7ff fe39 	bl	8000654 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009e2:	2003      	movs	r0, #3
 80009e4:	f7ff fec0 	bl	8000768 <LCD_CMD>
    DWT_Delay_ms(5);
 80009e8:	2005      	movs	r0, #5
 80009ea:	f7ff fe33 	bl	8000654 <DWT_Delay_ms>
    LCD_CMD(0x03);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f7ff feba 	bl	8000768 <LCD_CMD>
    DWT_Delay_us(150);
 80009f4:	2096      	movs	r0, #150	; 0x96
 80009f6:	f7ff fe05 	bl	8000604 <DWT_Delay_us>
    LCD_CMD(0x03);
 80009fa:	2003      	movs	r0, #3
 80009fc:	f7ff feb4 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x02);
 8000a00:	2002      	movs	r0, #2
 8000a02:	f7ff feb1 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x02);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f7ff feae 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x08);
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f7ff feab 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x00);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fea8 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x0C);
 8000a18:	200c      	movs	r0, #12
 8000a1a:	f7ff fea5 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x00);
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff fea2 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x06);
 8000a24:	2006      	movs	r0, #6
 8000a26:	f7ff fe9f 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x00);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fe9c 	bl	8000768 <LCD_CMD>
    LCD_CMD(0x01);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fe99 	bl	8000768 <LCD_CMD>
}
 8000a36:	bf00      	nop
 8000a38:	3728      	adds	r7, #40	; 0x28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08004868 	.word	0x08004868
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <LCD_Write_Char>:
void LCD_Write_Char(char Data)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 030f 	and.w	r3, r3, #15
 8000a68:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.RS_PIN, 1);
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a24      	ldr	r2, [pc, #144]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000a78:	89d1      	ldrh	r1, [r2, #14]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fff3 	bl	8001a68 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	091b      	lsrs	r3, r3, #4
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe09 	bl	80006a0 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000a94:	8991      	ldrh	r1, [r2, #12]
 8000a96:	2201      	movs	r2, #1
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f000 ffe5 	bl	8001a68 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000aa0:	8a1b      	ldrh	r3, [r3, #16]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fdae 	bl	8000604 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000aae:	8991      	ldrh	r1, [r2, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ffd8 	bl	8001a68 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000aba:	8a1b      	ldrh	r3, [r3, #16]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fda1 	bl	8000604 <DWT_Delay_us>

   LCD_DATA(Low4);
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fdeb 	bl	80006a0 <LCD_DATA>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 1);
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000ad0:	8991      	ldrh	r1, [r2, #12]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 ffc7 	bl	8001a68 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000adc:	8a1b      	ldrh	r3, [r3, #16]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd90 	bl	8000604 <DWT_Delay_us>
   HAL_GPIO_WritePin(LCD16x2_CfgParam.LCD_GPIO, LCD16x2_CfgParam.EN_PIN, 0);
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000aea:	8991      	ldrh	r1, [r2, #12]
 8000aec:	2200      	movs	r2, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 ffba 	bl	8001a68 <HAL_GPIO_WritePin>
   DWT_Delay_us(LCD16x2_CfgParam.LCD_EN_Delay);
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <LCD_Write_Char+0xb0>)
 8000af6:	8a1b      	ldrh	r3, [r3, #16]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fd83 	bl	8000604 <DWT_Delay_us>
}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08004868 	.word	0x08004868

08000b0c <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e009      	b.n	8000b2e <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff98 	bl	8000a58 <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1ef      	bne.n	8000b1a <LCD_Write_String+0xe>
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b48:	f000 fc5e 	bl	8001408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4c:	f000 f820 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b50:	f000 f98c 	bl	8000e6c <MX_GPIO_Init>
  MX_RTC_Init();
 8000b54:	f000 f87e 	bl	8000c54 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000b58:	f000 f95e 	bl	8000e18 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000b5c:	f000 f90e 	bl	8000d7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000b60:	f7ff fe78 	bl	8000854 <LCD_Init>
     LCD_Clear();
 8000b64:	f7ff fe32 	bl	80007cc <LCD_Clear>
     LCD_Set_Cursor(1, 1);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	f7ff fe38 	bl	80007e0 <LCD_Set_Cursor>
     LCD_Write_String("  DeepBlue  ");
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <main+0x44>)
 8000b72:	f7ff ffcb 	bl	8000b0c <LCD_Write_String>
     LCD_Set_Cursor(2, 1);
 8000b76:	2101      	movs	r1, #1
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fe31 	bl	80007e0 <LCD_Set_Cursor>
     LCD_Write_String("STM32 Course");
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <main+0x48>)
 8000b80:	f7ff ffc4 	bl	8000b0c <LCD_Write_String>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <main+0x40>
 8000b86:	bf00      	nop
 8000b88:	080047cc 	.word	0x080047cc
 8000b8c:	080047dc 	.word	0x080047dc

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2230      	movs	r2, #48	; 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f984 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <SystemClock_Config+0xbc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <SystemClock_Config+0xbc>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <SystemClock_Config+0xbc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <SystemClock_Config+0xc0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <SystemClock_Config+0xc0>)
 8000bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <SystemClock_Config+0xc0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf8:	2310      	movs	r3, #16
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0320 	add.w	r3, r7, #32
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 ff5f 	bl	8001acc <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c14:	f000 fa80 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f9c2 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 fa6b 	bl	8001118 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	; 0x40
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2228      	movs	r2, #40	; 0x28
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 f919 	bl	8003eac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000c7c:	4a3d      	ldr	r2, [pc, #244]	; (8000d74 <MX_RTC_Init+0x120>)
 8000c7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000c80:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c86:	4b3a      	ldr	r3, [pc, #232]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000c88:	227f      	movs	r2, #127	; 0x7f
 8000c8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000c8e:	22ff      	movs	r2, #255	; 0xff
 8000c90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c92:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c98:	4b35      	ldr	r3, [pc, #212]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ca4:	4832      	ldr	r0, [pc, #200]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000ca6:	f001 fd29 	bl	80026fc <HAL_RTC_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000cb0:	f000 fa32 	bl	8001118 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4824      	ldr	r0, [pc, #144]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000cde:	f001 fd83 	bl	80027e8 <HAL_RTC_SetTime>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000ce8:	f000 fa16 	bl	8001118 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000cec:	2301      	movs	r3, #1
 8000cee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000d0e:	f001 fe63 	bl	80029d8 <HAL_RTC_SetDate>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000d18:	f000 f9fe 	bl	8001118 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x3;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	70fb      	strb	r3, [r7, #3]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_RTC_Init+0x124>)
 8000d3a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000d44:	2301      	movs	r3, #1
 8000d46:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d50:	463b      	mov	r3, r7
 8000d52:	2201      	movs	r2, #1
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_RTC_Init+0x11c>)
 8000d58:	f001 ff12 	bl	8002b80 <HAL_RTC_SetAlarm_IT>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8000d62:	f000 f9d9 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3740      	adds	r7, #64	; 0x40
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000008c 	.word	0x2000008c
 8000d74:	40002800 	.word	0x40002800
 8000d78:	80800000 	.word	0x80800000

08000d7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <MX_TIM4_Init+0x98>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dbe:	4814      	ldr	r0, [pc, #80]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000dc0:	f002 f9bb 	bl	800313a <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000dca:	f000 f9a5 	bl	8001118 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000ddc:	f002 f9fc 	bl	80031d8 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000de6:	f000 f997 	bl	8001118 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_TIM4_Init+0x94>)
 8000df8:	f002 fbf0 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e02:	f000 f989 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000ac 	.word	0x200000ac
 8000e14:	40000800 	.word	0x40000800

08000e18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_USART1_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_USART1_UART_Init+0x4c>)
 8000e50:	f002 fc40 	bl	80036d4 <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f95d 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000f4 	.word	0x200000f4
 8000e68:	40011000 	.word	0x40011000

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a34      	ldr	r2, [pc, #208]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <MX_GPIO_Init+0xf0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f24f 0118 	movw	r1, #61464	; 0xf018
 8000edc:	4820      	ldr	r0, [pc, #128]	; (8000f60 <MX_GPIO_Init+0xf4>)
 8000ede:	f000 fdc3 	bl	8001a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee8:	481e      	ldr	r0, [pc, #120]	; (8000f64 <MX_GPIO_Init+0xf8>)
 8000eea:	f000 fdbd 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	4619      	mov	r1, r3
 8000f02:	4819      	ldr	r0, [pc, #100]	; (8000f68 <MX_GPIO_Init+0xfc>)
 8000f04:	f000 fc04 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000f08:	f24f 0318 	movw	r3, #61464	; 0xf018
 8000f0c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <MX_GPIO_Init+0xf4>)
 8000f22:	f000 fbf5 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4809      	ldr	r0, [pc, #36]	; (8000f64 <MX_GPIO_Init+0xf8>)
 8000f40:	f000 fbe6 	bl	8001710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2006      	movs	r0, #6
 8000f4a:	f000 fbaa 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f4e:	2006      	movs	r0, #6
 8000f50:	f000 fbc3 	bl	80016da <HAL_NVIC_EnableIRQ>

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40020000 	.word	0x40020000

08000f6c <getDayofweek>:

/* USER CODE BEGIN 4 */
char* getDayofweek(uint8_t num)
{
 8000f6c:	b4b0      	push	{r4, r5, r7}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	char *weekday[] = {"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <getDayofweek+0x38>)
 8000f78:	f107 040c 	add.w	r4, r7, #12
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f86:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[num-1];
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	3328      	adds	r3, #40	; 0x28
 8000f92:	443b      	add	r3, r7
 8000f94:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	372c      	adds	r7, #44	; 0x2c
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bcb0      	pop	{r4, r5, r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	080047ec 	.word	0x080047ec

08000fa8 <RTC_AlarmConfig>:

void RTC_AlarmConfig(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef AlarmA_Set;

	memset(&AlarmA_Set,0,sizeof(AlarmA_Set));
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2228      	movs	r2, #40	; 0x28
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 ff79 	bl	8003eac <memset>

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <RTC_AlarmConfig+0x48>)
 8000fc0:	f001 ff20 	bl	8002e04 <HAL_RTC_DeactivateAlarm>

	AlarmA_Set.Alarm = RTC_ALARM_A;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
	AlarmA_Set.AlarmTime.Minutes = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	707b      	strb	r3, [r7, #1]
	AlarmA_Set.AlarmTime.Seconds = 10;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	70bb      	strb	r3, [r7, #2]
	AlarmA_Set.AlarmMask = RTC_ALARMMASK_HOURS | RTC_ALARMMASK_DATEWEEKDAY |RTC_ALARMMASK_MINUTES;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <RTC_AlarmConfig+0x4c>)
 8000fd4:	617b      	str	r3, [r7, #20]
	AlarmA_Set.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000fd6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000fda:	61bb      	str	r3, [r7, #24]

	HAL_RTC_SetAlarm_IT(&hrtc, &AlarmA_Set, RTC_FORMAT_BIN);
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <RTC_AlarmConfig+0x48>)
 8000fe4:	f001 fdcc 	bl	8002b80 <HAL_RTC_SetAlarm_IT>
}
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	; 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	80808000 	.word	0x80808000

08000ff8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffa:	b09f      	sub	sp, #124	; 0x7c
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	4603      	mov	r3, r0
 8001000:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d152      	bne.n	80010ae <HAL_GPIO_EXTI_Callback+0xb6>
		RTC_TimeTypeDef RTC_TimeRead;
		RTC_DateTypeDef RTC_DateRead;

		char buf[80];

		HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 8001008:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4829      	ldr	r0, [pc, #164]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001012:	f001 fc83 	bl	800291c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 8001016:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001020:	f001 fd5e 	bl	8002ae0 <HAL_RTC_GetDate>

		sprintf(buf,"Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8001024:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8001028:	461a      	mov	r2, r3
				RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800102a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
		sprintf(buf,"Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800102e:	4619      	mov	r1, r3
				RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8001030:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
		sprintf(buf,"Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8001034:	f107 0008 	add.w	r0, r7, #8
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	460b      	mov	r3, r1
 800103c:	491f      	ldr	r1, [pc, #124]	; (80010bc <HAL_GPIO_EXTI_Callback+0xc4>)
 800103e:	f002 ff3d 	bl	8003ebc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f8d2 	bl	80001f0 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f107 0108 	add.w	r1, r7, #8
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	4819      	ldr	r0, [pc, #100]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xc8>)
 800105a:	f002 fb88 	bl	800376e <HAL_UART_Transmit>

		sprintf(buf,"Current Date is : %02d-%2d-%2d <%s>\r\n",RTC_DateRead.Month,\
 800105e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001062:	461d      	mov	r5, r3
				RTC_DateRead.Date,RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 8001064:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
		sprintf(buf,"Current Date is : %02d-%2d-%2d <%s>\r\n",RTC_DateRead.Month,\
 8001068:	461e      	mov	r6, r3
				RTC_DateRead.Date,RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 800106a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
		sprintf(buf,"Current Date is : %02d-%2d-%2d <%s>\r\n",RTC_DateRead.Month,\
 800106e:	461c      	mov	r4, r3
 8001070:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff79 	bl	8000f6c <getDayofweek>
 800107a:	4603      	mov	r3, r0
 800107c:	f107 0008 	add.w	r0, r7, #8
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	9400      	str	r4, [sp, #0]
 8001084:	4633      	mov	r3, r6
 8001086:	462a      	mov	r2, r5
 8001088:	490e      	ldr	r1, [pc, #56]	; (80010c4 <HAL_GPIO_EXTI_Callback+0xcc>)
 800108a:	f002 ff17 	bl	8003ebc <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f8ac 	bl	80001f0 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	f107 0108 	add.w	r1, r7, #8
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	4806      	ldr	r0, [pc, #24]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xc8>)
 80010a6:	f002 fb62 	bl	800376e <HAL_UART_Transmit>

		RTC_AlarmConfig();
 80010aa:	f7ff ff7d 	bl	8000fa8 <RTC_AlarmConfig>
	}
}
 80010ae:	bf00      	nop
 80010b0:	3774      	adds	r7, #116	; 0x74
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000008c 	.word	0x2000008c
 80010bc:	08004808 	.word	0x08004808
 80010c0:	200000f4 	.word	0x200000f4
 80010c4:	0800482c 	.word	0x0800482c

080010c8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	char buf[30];

	sprintf(buf,"AlarmA caught!\r\n\r\n");
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	490d      	ldr	r1, [pc, #52]	; (800110c <HAL_RTC_AlarmAEventCallback+0x44>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fef0 	bl	8003ebc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f885 	bl	80001f0 <strlen>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f107 0108 	add.w	r1, r7, #8
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <HAL_RTC_AlarmAEventCallback+0x48>)
 80010f4:	f002 fb3b 	bl	800376e <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <HAL_RTC_AlarmAEventCallback+0x4c>)
 8001100:	f000 fcb2 	bl	8001a68 <HAL_GPIO_WritePin>
}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	; 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	08004854 	.word	0x08004854
 8001110:	200000f4 	.word	0x200000f4
 8001114:	40021800 	.word	0x40021800

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_MspInit+0x4c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x4c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2230      	movs	r2, #48	; 0x30
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fe91 	bl	8003eac <memset>
  if(hrtc->Instance==RTC)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_RTC_MspInit+0x5c>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d119      	bne.n	80011c8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001194:	2320      	movs	r3, #32
 8001196:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f8ea 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011ae:	f7ff ffb3 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_RTC_MspInit+0x60>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2100      	movs	r1, #0
 80011bc:	2029      	movs	r0, #41	; 0x29
 80011be:	f000 fa70 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80011c2:	2029      	movs	r0, #41	; 0x29
 80011c4:	f000 fa89 	bl	80016da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3738      	adds	r7, #56	; 0x38
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40002800 	.word	0x40002800
 80011d4:	42470e3c 	.word	0x42470e3c

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_TIM_Base_MspInit+0x3c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d10d      	bne.n	8001206 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011f4:	f043 0304 	orr.w	r3, r3, #4
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_TIM_Base_MspInit+0x40>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 0304 	and.w	r3, r3, #4
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40000800 	.word	0x40000800
 8001218:	40023800 	.word	0x40023800

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a19      	ldr	r2, [pc, #100]	; (80012a0 <HAL_UART_MspInit+0x84>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12c      	bne.n	8001298 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_UART_MspInit+0x88>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a17      	ldr	r2, [pc, #92]	; (80012a4 <HAL_UART_MspInit+0x88>)
 8001248:	f043 0310 	orr.w	r3, r3, #16
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <HAL_UART_MspInit+0x88>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_UART_MspInit+0x88>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_UART_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001288:	2307      	movs	r3, #7
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_UART_MspInit+0x8c>)
 8001294:	f000 fa3c 	bl	8001710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f8:	f000 f8d8 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001304:	2001      	movs	r0, #1
 8001306:	f000 fbc9 	bl	8001a9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <RTC_Alarm_IRQHandler+0x10>)
 8001316:	f001 fe03 	bl	8002f20 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000008c 	.word	0x2000008c

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	; (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f002 fd80 	bl	8003e58 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20030000 	.word	0x20030000
 8001384:	00000400 	.word	0x00000400
 8001388:	20000138 	.word	0x20000138
 800138c:	20000150 	.word	0x20000150

08001390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80013b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013ba:	490e      	ldr	r1, [pc, #56]	; (80013f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d0:	4c0b      	ldr	r4, [pc, #44]	; (8001400 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013de:	f7ff ffd7 	bl	8001390 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e2:	f002 fd3f 	bl	8003e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e6:	f7ff fbad 	bl	8000b44 <main>
  bx  lr    
 80013ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80013f8:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 80013fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001400:	20000150 	.word	0x20000150

08001404 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001404:	e7fe      	b.n	8001404 <ADC_IRQHandler>
	...

08001408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <HAL_Init+0x40>)
 8001412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001416:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_Init+0x40>)
 800141e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001422:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_Init+0x40>)
 800142a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800142e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001430:	2003      	movs	r0, #3
 8001432:	f000 f92b 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001436:	200f      	movs	r0, #15
 8001438:	f000 f808 	bl	800144c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800143c:	f7ff fe72 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023c00 	.word	0x40023c00

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x54>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f943 	bl	80016f6 <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f000 f90b 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x5c>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20000004 	.word	0x20000004

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000013c 	.word	0x2000013c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000013c 	.word	0x2000013c

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	; (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	; (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	; 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e177      	b.n	8001a1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8166 	bne.w	8001a16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d005      	beq.n	8001762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	2b02      	cmp	r3, #2
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d017      	beq.n	8001800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80c0 	beq.w	8001a16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	4b66      	ldr	r3, [pc, #408]	; (8001a34 <HAL_GPIO_Init+0x324>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a65      	ldr	r2, [pc, #404]	; (8001a34 <HAL_GPIO_Init+0x324>)
 80018a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_GPIO_Init+0x324>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b2:	4a61      	ldr	r2, [pc, #388]	; (8001a38 <HAL_GPIO_Init+0x328>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a58      	ldr	r2, [pc, #352]	; (8001a3c <HAL_GPIO_Init+0x32c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d037      	beq.n	800194e <HAL_GPIO_Init+0x23e>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_GPIO_Init+0x330>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d031      	beq.n	800194a <HAL_GPIO_Init+0x23a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_GPIO_Init+0x334>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d02b      	beq.n	8001946 <HAL_GPIO_Init+0x236>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a55      	ldr	r2, [pc, #340]	; (8001a48 <HAL_GPIO_Init+0x338>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d025      	beq.n	8001942 <HAL_GPIO_Init+0x232>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_GPIO_Init+0x33c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01f      	beq.n	800193e <HAL_GPIO_Init+0x22e>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a53      	ldr	r2, [pc, #332]	; (8001a50 <HAL_GPIO_Init+0x340>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d019      	beq.n	800193a <HAL_GPIO_Init+0x22a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_GPIO_Init+0x344>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <HAL_GPIO_Init+0x226>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a51      	ldr	r2, [pc, #324]	; (8001a58 <HAL_GPIO_Init+0x348>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00d      	beq.n	8001932 <HAL_GPIO_Init+0x222>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <HAL_GPIO_Init+0x34c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x21e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x350>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d101      	bne.n	800192a <HAL_GPIO_Init+0x21a>
 8001926:	2309      	movs	r3, #9
 8001928:	e012      	b.n	8001950 <HAL_GPIO_Init+0x240>
 800192a:	230a      	movs	r3, #10
 800192c:	e010      	b.n	8001950 <HAL_GPIO_Init+0x240>
 800192e:	2308      	movs	r3, #8
 8001930:	e00e      	b.n	8001950 <HAL_GPIO_Init+0x240>
 8001932:	2307      	movs	r3, #7
 8001934:	e00c      	b.n	8001950 <HAL_GPIO_Init+0x240>
 8001936:	2306      	movs	r3, #6
 8001938:	e00a      	b.n	8001950 <HAL_GPIO_Init+0x240>
 800193a:	2305      	movs	r3, #5
 800193c:	e008      	b.n	8001950 <HAL_GPIO_Init+0x240>
 800193e:	2304      	movs	r3, #4
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x240>
 8001942:	2303      	movs	r3, #3
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x240>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x240>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x240>
 800194e:	2300      	movs	r3, #0
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001960:	4935      	ldr	r1, [pc, #212]	; (8001a38 <HAL_GPIO_Init+0x328>)
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_GPIO_Init+0x354>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001992:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <HAL_GPIO_Init+0x354>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <HAL_GPIO_Init+0x354>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019bc:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <HAL_GPIO_Init+0x354>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <HAL_GPIO_Init+0x354>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e6:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_GPIO_Init+0x354>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_GPIO_Init+0x354>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <HAL_GPIO_Init+0x354>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	61fb      	str	r3, [r7, #28]
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	2b0f      	cmp	r3, #15
 8001a20:	f67f ae84 	bls.w	800172c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020400 	.word	0x40020400
 8001a44:	40020800 	.word	0x40020800
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40021400 	.word	0x40021400
 8001a54:	40021800 	.word	0x40021800
 8001a58:	40021c00 	.word	0x40021c00
 8001a5c:	40022000 	.word	0x40022000
 8001a60:	40022400 	.word	0x40022400
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ab2:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fa9c 	bl	8000ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e267      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d075      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aea:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d00c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d112      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b0e:	d10b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	4b7e      	ldr	r3, [pc, #504]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d05b      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x108>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d157      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e242      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b30:	d106      	bne.n	8001b40 <HAL_RCC_OscConfig+0x74>
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e01d      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x98>
 8001b4a:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6f      	ldr	r2, [pc, #444]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6c      	ldr	r2, [pc, #432]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0xb0>
 8001b64:	4b69      	ldr	r3, [pc, #420]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a68      	ldr	r2, [pc, #416]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b66      	ldr	r3, [pc, #408]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a65      	ldr	r2, [pc, #404]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fca6 	bl	80014d4 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fca2 	bl	80014d4 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e207      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9e:	4b5b      	ldr	r3, [pc, #364]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0xc0>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fc92 	bl	80014d4 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb4:	f7ff fc8e 	bl	80014d4 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1f3      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0xe8>
 8001bd2:	e000      	b.n	8001bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d063      	beq.n	8001caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be2:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d11c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d116      	bne.n	8001c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c06:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_RCC_OscConfig+0x152>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e1c7      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4937      	ldr	r1, [pc, #220]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c32:	e03a      	b.n	8001caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d020      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3c:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_OscConfig+0x244>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff fc47 	bl	80014d4 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fc43 	bl	80014d4 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1a8      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4925      	ldr	r1, [pc, #148]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]
 8001c7c:	e015      	b.n	8001caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7e:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x244>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff fc26 	bl	80014d4 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc22 	bl	80014d4 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e187      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d036      	beq.n	8001d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d016      	beq.n	8001cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_RCC_OscConfig+0x248>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7ff fc06 	bl	80014d4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fc02 	bl	80014d4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e167      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x240>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x200>
 8001cea:	e01b      	b.n	8001d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_RCC_OscConfig+0x248>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fbef 	bl	80014d4 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	e00e      	b.n	8001d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fbeb 	bl	80014d4 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d907      	bls.n	8001d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e150      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	42470000 	.word	0x42470000
 8001d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ea      	bne.n	8001cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8097 	beq.w	8001e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d36:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10f      	bne.n	8001d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a7c      	ldr	r2, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b77      	ldr	r3, [pc, #476]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d118      	bne.n	8001da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6e:	4b74      	ldr	r3, [pc, #464]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a73      	ldr	r2, [pc, #460]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7a:	f7ff fbab 	bl	80014d4 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d82:	f7ff fba7 	bl	80014d4 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e10c      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_OscConfig+0x474>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2ea>
 8001da8:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4a63      	ldr	r2, [pc, #396]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6713      	str	r3, [r2, #112]	; 0x70
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x324>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b05      	cmp	r3, #5
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x30c>
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a5b      	ldr	r2, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x324>
 8001dd8:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ddc:	4a57      	ldr	r2, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	6713      	str	r3, [r2, #112]	; 0x70
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a54      	ldr	r2, [pc, #336]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 0304 	bic.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff fb6c 	bl	80014d4 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff fb68 	bl	80014d4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e0cb      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0ee      	beq.n	8001e00 <HAL_RCC_OscConfig+0x334>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fb56 	bl	80014d4 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fb52 	bl	80014d4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e0b5      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ee      	bne.n	8001e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a1 	beq.w	8001fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b08      	cmp	r3, #8
 8001e74:	d05c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d141      	bne.n	8001f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_OscConfig+0x478>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fb26 	bl	80014d4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff fb22 	bl	80014d4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e087      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	69da      	ldr	r2, [r3, #28]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	041b      	lsls	r3, r3, #16
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <HAL_RCC_OscConfig+0x478>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fafb 	bl	80014d4 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff faf7 	bl	80014d4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e05c      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x416>
 8001f00:	e054      	b.n	8001fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_OscConfig+0x478>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fae4 	bl	80014d4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff fae0 	bl	80014d4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e045      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x470>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x444>
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e038      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_OscConfig+0x4ec>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d028      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d121      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d11a      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d111      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	085b      	lsrs	r3, r3, #1
 8001f90:	3b01      	subs	r3, #1
 8001f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0cc      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b68      	ldr	r3, [pc, #416]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d90c      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b63      	ldr	r3, [pc, #396]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0b8      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d020      	beq.n	8002046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002010:	4b59      	ldr	r3, [pc, #356]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800201a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002028:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b50      	ldr	r3, [pc, #320]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	494d      	ldr	r1, [pc, #308]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d044      	beq.n	80020dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e07f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d003      	beq.n	800207a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	2b03      	cmp	r3, #3
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e06f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e067      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4934      	ldr	r1, [pc, #208]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff fa12 	bl	80014d4 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7ff fa0e 	bl	80014d4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e04f      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d20c      	bcs.n	8002104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b20      	ldr	r3, [pc, #128]	; (8002174 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e032      	b.n	800216a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4916      	ldr	r1, [pc, #88]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	490e      	ldr	r1, [pc, #56]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002142:	f000 f821 	bl	8002188 <HAL_RCC_GetSysClockFreq>
 8002146:	4602      	mov	r2, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	490a      	ldr	r1, [pc, #40]	; (800217c <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	5ccb      	ldrb	r3, [r1, r3]
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f972 	bl	800144c <HAL_InitTick>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00
 8002178:	40023800 	.word	0x40023800
 800217c:	0800487c 	.word	0x0800487c
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800218c:	b090      	sub	sp, #64	; 0x40
 800218e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	637b      	str	r3, [r7, #52]	; 0x34
 8002194:	2300      	movs	r3, #0
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002198:	2300      	movs	r3, #0
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d00d      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x40>
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	f200 80a1 	bhi.w	80022f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x34>
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ba:	e09b      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b53      	ldr	r3, [pc, #332]	; (800230c <HAL_RCC_GetSysClockFreq+0x184>)
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021c0:	e09b      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c2:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_GetSysClockFreq+0x188>)
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021c6:	e098      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d2:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d028      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	2200      	movs	r2, #0
 80021e6:	623b      	str	r3, [r7, #32]
 80021e8:	627a      	str	r2, [r7, #36]	; 0x24
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021f0:	2100      	movs	r1, #0
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_GetSysClockFreq+0x188>)
 80021f4:	fb03 f201 	mul.w	r2, r3, r1
 80021f8:	2300      	movs	r3, #0
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	4413      	add	r3, r2
 8002200:	4a43      	ldr	r2, [pc, #268]	; (8002310 <HAL_RCC_GetSysClockFreq+0x188>)
 8002202:	fba0 1202 	umull	r1, r2, r0, r2
 8002206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002208:	460a      	mov	r2, r1
 800220a:	62ba      	str	r2, [r7, #40]	; 0x28
 800220c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220e:	4413      	add	r3, r2
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	2200      	movs	r2, #0
 8002216:	61bb      	str	r3, [r7, #24]
 8002218:	61fa      	str	r2, [r7, #28]
 800221a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800221e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002222:	f7fe f83d 	bl	80002a0 <__aeabi_uldivmod>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4613      	mov	r3, r2
 800222c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800222e:	e053      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <HAL_RCC_GetSysClockFreq+0x180>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	2200      	movs	r2, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	617a      	str	r2, [r7, #20]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002242:	f04f 0b00 	mov.w	fp, #0
 8002246:	4652      	mov	r2, sl
 8002248:	465b      	mov	r3, fp
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	0159      	lsls	r1, r3, #5
 8002254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002258:	0150      	lsls	r0, r2, #5
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	ebb2 080a 	subs.w	r8, r2, sl
 8002262:	eb63 090b 	sbc.w	r9, r3, fp
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002272:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002276:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800227a:	ebb2 0408 	subs.w	r4, r2, r8
 800227e:	eb63 0509 	sbc.w	r5, r3, r9
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	00eb      	lsls	r3, r5, #3
 800228c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002290:	00e2      	lsls	r2, r4, #3
 8002292:	4614      	mov	r4, r2
 8002294:	461d      	mov	r5, r3
 8002296:	eb14 030a 	adds.w	r3, r4, sl
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	eb45 030b 	adc.w	r3, r5, fp
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ae:	4629      	mov	r1, r5
 80022b0:	028b      	lsls	r3, r1, #10
 80022b2:	4621      	mov	r1, r4
 80022b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b8:	4621      	mov	r1, r4
 80022ba:	028a      	lsls	r2, r1, #10
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	2200      	movs	r2, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	60fa      	str	r2, [r7, #12]
 80022c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022cc:	f7fd ffe8 	bl	80002a0 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_GetSysClockFreq+0x180>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	3301      	adds	r3, #1
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80022e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0x184>)
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3740      	adds	r7, #64	; 0x40
 8002300:	46bd      	mov	sp, r7
 8002302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	00f42400 	.word	0x00f42400
 8002310:	017d7840 	.word	0x017d7840

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_GetHCLKFreq+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002330:	f7ff fff0 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0a9b      	lsrs	r3, r3, #10
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	0800488c 	.word	0x0800488c

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002358:	f7ff ffdc 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0b5b      	lsrs	r3, r3, #13
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	0800488c 	.word	0x0800488c

0800237c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10b      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d075      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80023b0:	4b91      	ldr	r3, [pc, #580]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80023b6:	f7ff f88d 	bl	80014d4 <HAL_GetTick>
 80023ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023bc:	e008      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80023be:	f7ff f889 	bl	80014d4 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e189      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023d0:	4b8a      	ldr	r3, [pc, #552]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	019a      	lsls	r2, r3, #6
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	071b      	lsls	r3, r3, #28
 80023f4:	4981      	ldr	r1, [pc, #516]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01f      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002408:	4b7c      	ldr	r3, [pc, #496]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240e:	0f1b      	lsrs	r3, r3, #28
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	019a      	lsls	r2, r3, #6
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	431a      	orrs	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	071b      	lsls	r3, r3, #28
 8002428:	4974      	ldr	r1, [pc, #464]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002430:	4b72      	ldr	r3, [pc, #456]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002436:	f023 021f 	bic.w	r2, r3, #31
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	3b01      	subs	r3, #1
 8002440:	496e      	ldr	r1, [pc, #440]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00d      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	019a      	lsls	r2, r3, #6
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	061b      	lsls	r3, r3, #24
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	071b      	lsls	r3, r3, #28
 8002468:	4964      	ldr	r1, [pc, #400]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002476:	f7ff f82d 	bl	80014d4 <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800247e:	f7ff f829 	bl	80014d4 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e129      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002490:	4b5a      	ldr	r3, [pc, #360]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d079      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024b4:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ba:	f7ff f80b 	bl	80014d4 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80024c2:	f7ff f807 	bl	80014d4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e107      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024d4:	4b49      	ldr	r3, [pc, #292]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e0:	d0ef      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d020      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024ee:	4b43      	ldr	r3, [pc, #268]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	0f1b      	lsrs	r3, r3, #28
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	019a      	lsls	r2, r3, #6
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	431a      	orrs	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	071b      	lsls	r3, r3, #28
 800250e:	493b      	ldr	r1, [pc, #236]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002516:	4b39      	ldr	r3, [pc, #228]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	3b01      	subs	r3, #1
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4934      	ldr	r1, [pc, #208]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01e      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800253c:	4b2f      	ldr	r3, [pc, #188]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	0e1b      	lsrs	r3, r3, #24
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	019a      	lsls	r2, r3, #6
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	061b      	lsls	r3, r3, #24
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	071b      	lsls	r3, r3, #28
 800255c:	4927      	ldr	r1, [pc, #156]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800256a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	4922      	ldr	r1, [pc, #136]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800257a:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002580:	f7fe ffa8 	bl	80014d4 <HAL_GetTick>
 8002584:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002588:	f7fe ffa4 	bl	80014d4 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0a4      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025a6:	d1ef      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 808b 	beq.w	80026cc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025de:	f7fe ff79 	bl	80014d4 <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025e4:	e010      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe ff75 	bl	80014d4 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d909      	bls.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e075      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80025f8:	42470068 	.word	0x42470068
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470070 	.word	0x42470070
 8002604:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0e8      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02f      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	429a      	cmp	r2, r3
 8002630:	d028      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800264e:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b01      	cmp	r3, #1
 8002658:	d114      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe ff3b 	bl	80014d4 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7fe ff37 	bl	80014d4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e035      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ee      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002690:	d10d      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002692:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a6:	4912      	ldr	r1, [pc, #72]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	608b      	str	r3, [r1, #8]
 80026ac:	e005      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026b4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026b8:	6093      	str	r3, [r2, #8]
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80026e0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40007000 	.word	0x40007000
 80026f0:	40023800 	.word	0x40023800
 80026f4:	42470e40 	.word	0x42470e40
 80026f8:	424711e0 	.word	0x424711e0

080026fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e066      	b.n	80027e0 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7f5b      	ldrb	r3, [r3, #29]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d105      	bne.n	8002728 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7fe fd26 	bl	8001174 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	22ca      	movs	r2, #202	; 0xca
 8002734:	625a      	str	r2, [r3, #36]	; 0x24
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2253      	movs	r2, #83	; 0x53
 800273c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fc5c 	bl	8002ffc <RTC_EnterInitMode>
 8002744:	4603      	mov	r3, r0
 8002746:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12c      	bne.n	80027a8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800275c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002760:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68d2      	ldr	r2, [r2, #12]
 8002788:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6919      	ldr	r1, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fc63 	bl	800306a <RTC_ExitInitMode>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d113      	bne.n	80027d6 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	22ff      	movs	r2, #255	; 0xff
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80027de:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	7f1b      	ldrb	r3, [r3, #28]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_RTC_SetTime+0x1c>
 8002800:	2302      	movs	r3, #2
 8002802:	e087      	b.n	8002914 <HAL_RTC_SetTime+0x12c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2202      	movs	r2, #2
 800280e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d126      	bne.n	8002864 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2200      	movs	r2, #0
 8002828:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fc40 	bl	80030b4 <RTC_ByteToBcd2>
 8002834:	4603      	mov	r3, r0
 8002836:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	785b      	ldrb	r3, [r3, #1]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fc39 	bl	80030b4 <RTC_ByteToBcd2>
 8002842:	4603      	mov	r3, r0
 8002844:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002846:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	789b      	ldrb	r3, [r3, #2]
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fc31 	bl	80030b4 <RTC_ByteToBcd2>
 8002852:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002854:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	78db      	ldrb	r3, [r3, #3]
 800285c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e018      	b.n	8002896 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2200      	movs	r2, #0
 8002876:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002884:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800288a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	78db      	ldrb	r3, [r3, #3]
 8002890:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	22ca      	movs	r2, #202	; 0xca
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2253      	movs	r2, #83	; 0x53
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fba8 	bl	8002ffc <RTC_EnterInitMode>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d120      	bne.n	80028f8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80028c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80028c4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6899      	ldr	r1, [r3, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fbbb 	bl	800306a <RTC_ExitInitMode>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	22ff      	movs	r2, #255	; 0xff
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	771a      	strb	r2, [r3, #28]

  return status;
 8002912:	7cfb      	ldrb	r3, [r7, #19]
}
 8002914:	4618      	mov	r0, r3
 8002916:	371c      	adds	r7, #28
 8002918:	46bd      	mov	sp, r7
 800291a:	bd90      	pop	{r4, r7, pc}

0800291c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800294e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002952:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800295e:	b2da      	uxtb	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800296e:	b2da      	uxtb	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800297c:	b2da      	uxtb	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	0d9b      	lsrs	r3, r3, #22
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d11a      	bne.n	80029ce <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fba6 	bl	80030ee <RTC_Bcd2ToByte>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fb9d 	bl	80030ee <RTC_Bcd2ToByte>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 fb94 	bl	80030ee <RTC_Bcd2ToByte>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	7f1b      	ldrb	r3, [r3, #28]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_RTC_SetDate+0x1c>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e071      	b.n	8002ad8 <HAL_RTC_SetDate+0x100>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2202      	movs	r2, #2
 80029fe:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10e      	bne.n	8002a24 <HAL_RTC_SetDate+0x4c>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	330a      	adds	r3, #10
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11c      	bne.n	8002a64 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	78db      	ldrb	r3, [r3, #3]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb40 	bl	80030b4 <RTC_ByteToBcd2>
 8002a34:	4603      	mov	r3, r0
 8002a36:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fb39 	bl	80030b4 <RTC_ByteToBcd2>
 8002a42:	4603      	mov	r3, r0
 8002a44:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a46:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	789b      	ldrb	r3, [r3, #2]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fb31 	bl	80030b4 <RTC_ByteToBcd2>
 8002a52:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a54:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e00e      	b.n	8002a82 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	78db      	ldrb	r3, [r3, #3]
 8002a68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	785b      	ldrb	r3, [r3, #1]
 8002a6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a70:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002a76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	22ca      	movs	r2, #202	; 0xca
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2253      	movs	r2, #83	; 0x53
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fab2 	bl	8002ffc <RTC_EnterInitMode>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002aac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002ab0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fad9 	bl	800306a <RTC_ExitInitMode>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]

  return status;
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd90      	pop	{r4, r7, pc}

08002ae0 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002afa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002afe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	0c1b      	lsrs	r3, r3, #16
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	0a1b      	lsrs	r3, r3, #8
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	0b5b      	lsrs	r3, r3, #13
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11a      	bne.n	8002b74 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fad3 	bl	80030ee <RTC_Bcd2ToByte>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	785b      	ldrb	r3, [r3, #1]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f000 faca 	bl	80030ee <RTC_Bcd2ToByte>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	789b      	ldrb	r3, [r3, #2]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fac1 	bl	80030ee <RTC_Bcd2ToByte>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002b8c:	4b9a      	ldr	r3, [pc, #616]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x278>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a9a      	ldr	r2, [pc, #616]	; (8002dfc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0adb      	lsrs	r3, r3, #11
 8002b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	7f1b      	ldrb	r3, [r3, #28]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RTC_SetAlarm_IT+0x36>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e11c      	b.n	8002df0 <HAL_RTC_SetAlarm_IT+0x270>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d137      	bne.n	8002c38 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fa67 	bl	80030b4 <RTC_ByteToBcd2>
 8002be6:	4603      	mov	r3, r0
 8002be8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fa60 	bl	80030b4 <RTC_ByteToBcd2>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002bf8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	789b      	ldrb	r3, [r3, #2]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa58 	bl	80030b4 <RTC_ByteToBcd2>
 8002c04:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002c06:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	78db      	ldrb	r3, [r3, #3]
 8002c0e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8002c10:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 fa4a 	bl	80030b4 <RTC_ByteToBcd2>
 8002c20:	4603      	mov	r3, r0
 8002c22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8002c24:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8002c2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61fb      	str	r3, [r7, #28]
 8002c36:	e023      	b.n	8002c80 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	785b      	ldrb	r3, [r3, #1]
 8002c56:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c58:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002c5e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	78db      	ldrb	r3, [r3, #3]
 8002c64:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002c66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002c70:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002c76:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	22ca      	movs	r2, #202	; 0xca
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2253      	movs	r2, #83	; 0x53
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca4:	d141      	bne.n	8002d2a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002cc6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1e5a      	subs	r2, r3, #1
 8002ccc:	617a      	str	r2, [r7, #20]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2203      	movs	r2, #3
 8002cde:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e082      	b.n	8002df0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0e7      	beq.n	8002cc8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d16:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	e04b      	b.n	8002dc2 <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d38:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002d4a:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002d4c:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x278>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_RTC_SetAlarm_IT+0x27c>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0adb      	lsrs	r3, r3, #11
 8002d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	617a      	str	r2, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	22ff      	movs	r2, #255	; 0xff
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2203      	movs	r2, #3
 8002d78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e035      	b.n	8002df0 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0e7      	beq.n	8002d62 <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dc0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_RTC_SetAlarm_IT+0x280>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <HAL_RTC_SetAlarm_IT+0x280>)
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002dce:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <HAL_RTC_SetAlarm_IT+0x280>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_RTC_SetAlarm_IT+0x280>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	22ff      	movs	r2, #255	; 0xff
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	10624dd3 	.word	0x10624dd3
 8002e00:	40013c00 	.word	0x40013c00

08002e04 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A: Alarm A
  *            @arg RTC_ALARM_B: Alarm B
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7f1b      	ldrb	r3, [r3, #28]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_RTC_DeactivateAlarm+0x1a>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e07b      	b.n	8002f16 <HAL_RTC_DeactivateAlarm+0x112>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	22ca      	movs	r2, #202	; 0xca
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2253      	movs	r2, #83	; 0x53
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e40:	d12f      	bne.n	8002ea2 <HAL_RTC_DeactivateAlarm+0x9e>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e50:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e60:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e62:	f7fe fb37 	bl	80014d4 <HAL_GetTick>
 8002e66:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e68:	e013      	b.n	8002e92 <HAL_RTC_DeactivateAlarm+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e6a:	f7fe fb33 	bl	80014d4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e78:	d90b      	bls.n	8002e92 <HAL_RTC_DeactivateAlarm+0x8e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	22ff      	movs	r2, #255	; 0xff
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e041      	b.n	8002f16 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0e4      	beq.n	8002e6a <HAL_RTC_DeactivateAlarm+0x66>
 8002ea0:	e02e      	b.n	8002f00 <HAL_RTC_DeactivateAlarm+0xfc>
    }
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002eb0:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe fb07 	bl	80014d4 <HAL_GetTick>
 8002ec6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ec8:	e013      	b.n	8002ef2 <HAL_RTC_DeactivateAlarm+0xee>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002eca:	f7fe fb03 	bl	80014d4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed8:	d90b      	bls.n	8002ef2 <HAL_RTC_DeactivateAlarm+0xee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	22ff      	movs	r2, #255	; 0xff
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e011      	b.n	8002f16 <HAL_RTC_DeactivateAlarm+0x112>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0e4      	beq.n	8002eca <HAL_RTC_DeactivateAlarm+0xc6>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7fe f8bf 	bl	80010c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002f5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f8d4 	bl	8003126 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f8e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002f92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f96:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	775a      	strb	r2, [r3, #29]
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40013c00 	.word	0x40013c00

08002fac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fc8:	f7fe fa84 	bl	80014d4 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002fce:	e009      	b.n	8002fe4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002fd0:	f7fe fa80 	bl	80014d4 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fde:	d901      	bls.n	8002fe4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e007      	b.n	8002ff4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d122      	bne.n	8003060 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003028:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800302a:	f7fe fa53 	bl	80014d4 <HAL_GetTick>
 800302e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003030:	e00c      	b.n	800304c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003032:	f7fe fa4f 	bl	80014d4 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003040:	d904      	bls.n	800304c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <RTC_EnterInitMode+0x64>
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d1e8      	bne.n	8003032 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003060:	7bfb      	ldrb	r3, [r7, #15]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003084:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff89 	bl	8002fac <HAL_RTC_WaitForSynchro>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d004      	beq.n	80030aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2204      	movs	r2, #4
 80030a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80030c2:	e005      	b.n	80030d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	3b0a      	subs	r3, #10
 80030ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b09      	cmp	r3, #9
 80030d4:	d8f6      	bhi.n	80030c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4313      	orrs	r3, r2
 80030e0:	b2db      	uxtb	r3, r3
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	4413      	add	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	b2da      	uxtb	r2, r3
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	4413      	add	r3, r2
 8003118:	b2db      	uxtb	r3, r3
}
 800311a:	4618      	mov	r0, r3
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e041      	b.n	80031d0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fe f839 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f000 f8f5 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_TIM_ConfigClockSource+0x1c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e0b4      	b.n	800335e <HAL_TIM_ConfigClockSource+0x186>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800321a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322c:	d03e      	beq.n	80032ac <HAL_TIM_ConfigClockSource+0xd4>
 800322e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003232:	f200 8087 	bhi.w	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323a:	f000 8086 	beq.w	800334a <HAL_TIM_ConfigClockSource+0x172>
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003242:	d87f      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b70      	cmp	r3, #112	; 0x70
 8003246:	d01a      	beq.n	800327e <HAL_TIM_ConfigClockSource+0xa6>
 8003248:	2b70      	cmp	r3, #112	; 0x70
 800324a:	d87b      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b60      	cmp	r3, #96	; 0x60
 800324e:	d050      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x11a>
 8003250:	2b60      	cmp	r3, #96	; 0x60
 8003252:	d877      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b50      	cmp	r3, #80	; 0x50
 8003256:	d03c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0xfa>
 8003258:	2b50      	cmp	r3, #80	; 0x50
 800325a:	d873      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d058      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x13a>
 8003260:	2b40      	cmp	r3, #64	; 0x40
 8003262:	d86f      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b30      	cmp	r3, #48	; 0x30
 8003266:	d064      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 8003268:	2b30      	cmp	r3, #48	; 0x30
 800326a:	d86b      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d060      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d867      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b10      	cmp	r3, #16
 800327a:	d05a      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15a>
 800327c:	e062      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f000 f985 	bl	800359c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	609a      	str	r2, [r3, #8]
      break;
 80032aa:	e04f      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f000 f96e 	bl	800359c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ce:	609a      	str	r2, [r3, #8]
      break;
 80032d0:	e03c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	461a      	mov	r2, r3
 80032e0:	f000 f8e2 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2150      	movs	r1, #80	; 0x50
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f93b 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 80032f0:	e02c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 f901 	bl	8003506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2160      	movs	r1, #96	; 0x60
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f92b 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003310:	e01c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	461a      	mov	r2, r3
 8003320:	f000 f8c2 	bl	80034a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f91b 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003330:	e00c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f000 f912 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 8003342:	e003      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      break;
 8003348:	e000      	b.n	800334c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800334a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a40      	ldr	r2, [pc, #256]	; (800347c <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d00f      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a3d      	ldr	r2, [pc, #244]	; (8003480 <TIM_Base_SetConfig+0x118>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a3c      	ldr	r2, [pc, #240]	; (8003484 <TIM_Base_SetConfig+0x11c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <TIM_Base_SetConfig+0x120>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a3a      	ldr	r2, [pc, #232]	; (800348c <TIM_Base_SetConfig+0x124>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a2f      	ldr	r2, [pc, #188]	; (800347c <TIM_Base_SetConfig+0x114>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02b      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d027      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <TIM_Base_SetConfig+0x118>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d023      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <TIM_Base_SetConfig+0x11c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01f      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2a      	ldr	r2, [pc, #168]	; (8003488 <TIM_Base_SetConfig+0x120>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d01b      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a29      	ldr	r2, [pc, #164]	; (800348c <TIM_Base_SetConfig+0x124>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d017      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a28      	ldr	r2, [pc, #160]	; (8003490 <TIM_Base_SetConfig+0x128>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a27      	ldr	r2, [pc, #156]	; (8003494 <TIM_Base_SetConfig+0x12c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00f      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a26      	ldr	r2, [pc, #152]	; (8003498 <TIM_Base_SetConfig+0x130>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00b      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a25      	ldr	r2, [pc, #148]	; (800349c <TIM_Base_SetConfig+0x134>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a24      	ldr	r2, [pc, #144]	; (80034a0 <TIM_Base_SetConfig+0x138>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a23      	ldr	r2, [pc, #140]	; (80034a4 <TIM_Base_SetConfig+0x13c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d108      	bne.n	800342c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <TIM_Base_SetConfig+0x114>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a0c      	ldr	r2, [pc, #48]	; (800348c <TIM_Base_SetConfig+0x124>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	615a      	str	r2, [r3, #20]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40010400 	.word	0x40010400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800
 800349c:	40001800 	.word	0x40001800
 80034a0:	40001c00 	.word	0x40001c00
 80034a4:	40002000 	.word	0x40002000

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 030a 	bic.w	r3, r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0210 	bic.w	r2, r3, #16
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e05a      	b.n	80036aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d022      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d01d      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d018      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d013      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00e      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d009      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a17      	ldr	r2, [pc, #92]	; (80036cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10c      	bne.n	8003698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4313      	orrs	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000
 80036bc:	40000400 	.word	0x40000400
 80036c0:	40000800 	.word	0x40000800
 80036c4:	40000c00 	.word	0x40000c00
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40014000 	.word	0x40014000
 80036d0:	40001800 	.word	0x40001800

080036d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e03f      	b.n	8003766 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd fd8e 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	; 0x24
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003716:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f929 	bl	8003970 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800372c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800373c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800374c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b08a      	sub	sp, #40	; 0x28
 8003772:	af02      	add	r7, sp, #8
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4613      	mov	r3, r2
 800377c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b20      	cmp	r3, #32
 800378c:	d17c      	bne.n	8003888 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_UART_Transmit+0x2c>
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e075      	b.n	800388a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Transmit+0x3e>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e06e      	b.n	800388a <HAL_UART_Transmit+0x11c>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2221      	movs	r2, #33	; 0x21
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c2:	f7fd fe87 	bl	80014d4 <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037dc:	d108      	bne.n	80037f0 <HAL_UART_Transmit+0x82>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003800:	e02a      	b.n	8003858 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f840 	bl	8003892 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e036      	b.n	800388a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3302      	adds	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e007      	b.n	800384a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3301      	adds	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1cf      	bne.n	8003802 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2140      	movs	r1, #64	; 0x40
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f810 	bl	8003892 <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e006      	b.n	800388a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3720      	adds	r7, #32
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b090      	sub	sp, #64	; 0x40
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	603b      	str	r3, [r7, #0]
 800389e:	4613      	mov	r3, r2
 80038a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a2:	e050      	b.n	8003946 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d04c      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80038b2:	f7fd fe0f 	bl	80014d4 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038be:	429a      	cmp	r2, r3
 80038c0:	d241      	bcs.n	8003946 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038e2:	637a      	str	r2, [r7, #52]	; 0x34
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e5      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	613b      	str	r3, [r7, #16]
   return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f023 0301 	bic.w	r3, r3, #1
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003916:	623a      	str	r2, [r7, #32]
 8003918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	69f9      	ldr	r1, [r7, #28]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	61bb      	str	r3, [r7, #24]
   return(result);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e5      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e00f      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	461a      	mov	r2, r3
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	429a      	cmp	r2, r3
 8003962:	d09f      	beq.n	80038a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3740      	adds	r7, #64	; 0x40
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003974:	b0c0      	sub	sp, #256	; 0x100
 8003976:	af00      	add	r7, sp, #0
 8003978:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	68d9      	ldr	r1, [r3, #12]
 800398e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	ea40 0301 	orr.w	r3, r0, r1
 8003998:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039c8:	f021 010c 	bic.w	r1, r1, #12
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ea:	6999      	ldr	r1, [r3, #24]
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	ea40 0301 	orr.w	r3, r0, r1
 80039f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b8f      	ldr	r3, [pc, #572]	; (8003c3c <UART_SetConfig+0x2cc>)
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d005      	beq.n	8003a10 <UART_SetConfig+0xa0>
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b8d      	ldr	r3, [pc, #564]	; (8003c40 <UART_SetConfig+0x2d0>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d104      	bne.n	8003a1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a10:	f7fe fca0 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8003a14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a18:	e003      	b.n	8003a22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a1a:	f7fe fc87 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8003a1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2c:	f040 810c 	bne.w	8003c48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a34:	2200      	movs	r2, #0
 8003a36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a42:	4622      	mov	r2, r4
 8003a44:	462b      	mov	r3, r5
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a52:	4621      	mov	r1, r4
 8003a54:	eb12 0801 	adds.w	r8, r2, r1
 8003a58:	4629      	mov	r1, r5
 8003a5a:	eb43 0901 	adc.w	r9, r3, r1
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a72:	4690      	mov	r8, r2
 8003a74:	4699      	mov	r9, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	eb18 0303 	adds.w	r3, r8, r3
 8003a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a80:	462b      	mov	r3, r5
 8003a82:	eb49 0303 	adc.w	r3, r9, r3
 8003a86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	18db      	adds	r3, r3, r3
 8003aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	eb42 0303 	adc.w	r3, r2, r3
 8003aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8003aac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ab0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ab4:	f7fc fbf4 	bl	80002a0 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4b61      	ldr	r3, [pc, #388]	; (8003c44 <UART_SetConfig+0x2d4>)
 8003abe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	011c      	lsls	r4, r3, #4
 8003ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ad4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	1891      	adds	r1, r2, r2
 8003ade:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ae0:	415b      	adcs	r3, r3
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ae8:	4641      	mov	r1, r8
 8003aea:	eb12 0a01 	adds.w	sl, r2, r1
 8003aee:	4649      	mov	r1, r9
 8003af0:	eb43 0b01 	adc.w	fp, r3, r1
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b08:	4692      	mov	sl, r2
 8003b0a:	469b      	mov	fp, r3
 8003b0c:	4643      	mov	r3, r8
 8003b0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b16:	464b      	mov	r3, r9
 8003b18:	eb4b 0303 	adc.w	r3, fp, r3
 8003b1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b34:	460b      	mov	r3, r1
 8003b36:	18db      	adds	r3, r3, r3
 8003b38:	643b      	str	r3, [r7, #64]	; 0x40
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	eb42 0303 	adc.w	r3, r2, r3
 8003b40:	647b      	str	r3, [r7, #68]	; 0x44
 8003b42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b4a:	f7fc fba9 	bl	80002a0 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <UART_SetConfig+0x2d4>)
 8003b56:	fba3 2301 	umull	r2, r3, r3, r1
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2264      	movs	r2, #100	; 0x64
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b6a:	4b36      	ldr	r3, [pc, #216]	; (8003c44 <UART_SetConfig+0x2d4>)
 8003b6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b78:	441c      	add	r4, r3
 8003b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	1891      	adds	r1, r2, r2
 8003b92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b94:	415b      	adcs	r3, r3
 8003b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b9c:	4641      	mov	r1, r8
 8003b9e:	1851      	adds	r1, r2, r1
 8003ba0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	414b      	adcs	r3, r1
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bb4:	4659      	mov	r1, fp
 8003bb6:	00cb      	lsls	r3, r1, #3
 8003bb8:	4651      	mov	r1, sl
 8003bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bbe:	4651      	mov	r1, sl
 8003bc0:	00ca      	lsls	r2, r1, #3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4642      	mov	r2, r8
 8003bca:	189b      	adds	r3, r3, r2
 8003bcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd0:	464b      	mov	r3, r9
 8003bd2:	460a      	mov	r2, r1
 8003bd4:	eb42 0303 	adc.w	r3, r2, r3
 8003bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003be8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	18db      	adds	r3, r3, r3
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	eb42 0303 	adc.w	r3, r2, r3
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c06:	f7fc fb4b 	bl	80002a0 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <UART_SetConfig+0x2d4>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	; 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	3332      	adds	r3, #50	; 0x32
 8003c22:	4a08      	ldr	r2, [pc, #32]	; (8003c44 <UART_SetConfig+0x2d4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 0207 	and.w	r2, r3, #7
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4422      	add	r2, r4
 8003c36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c38:	e105      	b.n	8003e46 <UART_SetConfig+0x4d6>
 8003c3a:	bf00      	nop
 8003c3c:	40011000 	.word	0x40011000
 8003c40:	40011400 	.word	0x40011400
 8003c44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c5a:	4642      	mov	r2, r8
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	1891      	adds	r1, r2, r2
 8003c60:	6239      	str	r1, [r7, #32]
 8003c62:	415b      	adcs	r3, r3
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
 8003c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c6a:	4641      	mov	r1, r8
 8003c6c:	1854      	adds	r4, r2, r1
 8003c6e:	4649      	mov	r1, r9
 8003c70:	eb43 0501 	adc.w	r5, r3, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	00eb      	lsls	r3, r5, #3
 8003c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c82:	00e2      	lsls	r2, r4, #3
 8003c84:	4614      	mov	r4, r2
 8003c86:	461d      	mov	r5, r3
 8003c88:	4643      	mov	r3, r8
 8003c8a:	18e3      	adds	r3, r4, r3
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c90:	464b      	mov	r3, r9
 8003c92:	eb45 0303 	adc.w	r3, r5, r3
 8003c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	008b      	lsls	r3, r1, #2
 8003cba:	4621      	mov	r1, r4
 8003cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cc0:	4621      	mov	r1, r4
 8003cc2:	008a      	lsls	r2, r1, #2
 8003cc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cc8:	f7fc faea 	bl	80002a0 <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4b60      	ldr	r3, [pc, #384]	; (8003e54 <UART_SetConfig+0x4e4>)
 8003cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	011c      	lsls	r4, r3, #4
 8003cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ce4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ce8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	1891      	adds	r1, r2, r2
 8003cf2:	61b9      	str	r1, [r7, #24]
 8003cf4:	415b      	adcs	r3, r3
 8003cf6:	61fb      	str	r3, [r7, #28]
 8003cf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cfc:	4641      	mov	r1, r8
 8003cfe:	1851      	adds	r1, r2, r1
 8003d00:	6139      	str	r1, [r7, #16]
 8003d02:	4649      	mov	r1, r9
 8003d04:	414b      	adcs	r3, r1
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d14:	4659      	mov	r1, fp
 8003d16:	00cb      	lsls	r3, r1, #3
 8003d18:	4651      	mov	r1, sl
 8003d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1e:	4651      	mov	r1, sl
 8003d20:	00ca      	lsls	r2, r1, #3
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	4642      	mov	r2, r8
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d30:	464b      	mov	r3, r9
 8003d32:	460a      	mov	r2, r1
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d54:	4649      	mov	r1, r9
 8003d56:	008b      	lsls	r3, r1, #2
 8003d58:	4641      	mov	r1, r8
 8003d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5e:	4641      	mov	r1, r8
 8003d60:	008a      	lsls	r2, r1, #2
 8003d62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d66:	f7fc fa9b 	bl	80002a0 <__aeabi_uldivmod>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <UART_SetConfig+0x4e4>)
 8003d70:	fba3 1302 	umull	r1, r3, r3, r2
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	2164      	movs	r1, #100	; 0x64
 8003d78:	fb01 f303 	mul.w	r3, r1, r3
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	3332      	adds	r3, #50	; 0x32
 8003d82:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <UART_SetConfig+0x4e4>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	095b      	lsrs	r3, r3, #5
 8003d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8e:	441c      	add	r4, r3
 8003d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d94:	2200      	movs	r2, #0
 8003d96:	673b      	str	r3, [r7, #112]	; 0x70
 8003d98:	677a      	str	r2, [r7, #116]	; 0x74
 8003d9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d9e:	4642      	mov	r2, r8
 8003da0:	464b      	mov	r3, r9
 8003da2:	1891      	adds	r1, r2, r2
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	415b      	adcs	r3, r3
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dae:	4641      	mov	r1, r8
 8003db0:	1851      	adds	r1, r2, r1
 8003db2:	6039      	str	r1, [r7, #0]
 8003db4:	4649      	mov	r1, r9
 8003db6:	414b      	adcs	r3, r1
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dc6:	4659      	mov	r1, fp
 8003dc8:	00cb      	lsls	r3, r1, #3
 8003dca:	4651      	mov	r1, sl
 8003dcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd0:	4651      	mov	r1, sl
 8003dd2:	00ca      	lsls	r2, r1, #3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4642      	mov	r2, r8
 8003ddc:	189b      	adds	r3, r3, r2
 8003dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003de0:	464b      	mov	r3, r9
 8003de2:	460a      	mov	r2, r1
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	663b      	str	r3, [r7, #96]	; 0x60
 8003df4:	667a      	str	r2, [r7, #100]	; 0x64
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003e02:	4649      	mov	r1, r9
 8003e04:	008b      	lsls	r3, r1, #2
 8003e06:	4641      	mov	r1, r8
 8003e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	008a      	lsls	r2, r1, #2
 8003e10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e14:	f7fc fa44 	bl	80002a0 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <UART_SetConfig+0x4e4>)
 8003e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2164      	movs	r1, #100	; 0x64
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	3332      	adds	r3, #50	; 0x32
 8003e30:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <UART_SetConfig+0x4e4>)
 8003e32:	fba2 2303 	umull	r2, r3, r2, r3
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4422      	add	r2, r4
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	bf00      	nop
 8003e48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e52:	bf00      	nop
 8003e54:	51eb851f 	.word	0x51eb851f

08003e58 <__errno>:
 8003e58:	4b01      	ldr	r3, [pc, #4]	; (8003e60 <__errno+0x8>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	2000000c 	.word	0x2000000c

08003e64 <__libc_init_array>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	4d0d      	ldr	r5, [pc, #52]	; (8003e9c <__libc_init_array+0x38>)
 8003e68:	4c0d      	ldr	r4, [pc, #52]	; (8003ea0 <__libc_init_array+0x3c>)
 8003e6a:	1b64      	subs	r4, r4, r5
 8003e6c:	10a4      	asrs	r4, r4, #2
 8003e6e:	2600      	movs	r6, #0
 8003e70:	42a6      	cmp	r6, r4
 8003e72:	d109      	bne.n	8003e88 <__libc_init_array+0x24>
 8003e74:	4d0b      	ldr	r5, [pc, #44]	; (8003ea4 <__libc_init_array+0x40>)
 8003e76:	4c0c      	ldr	r4, [pc, #48]	; (8003ea8 <__libc_init_array+0x44>)
 8003e78:	f000 fc8e 	bl	8004798 <_init>
 8003e7c:	1b64      	subs	r4, r4, r5
 8003e7e:	10a4      	asrs	r4, r4, #2
 8003e80:	2600      	movs	r6, #0
 8003e82:	42a6      	cmp	r6, r4
 8003e84:	d105      	bne.n	8003e92 <__libc_init_array+0x2e>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8c:	4798      	blx	r3
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7ee      	b.n	8003e70 <__libc_init_array+0xc>
 8003e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e96:	4798      	blx	r3
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e7f2      	b.n	8003e82 <__libc_init_array+0x1e>
 8003e9c:	080048d0 	.word	0x080048d0
 8003ea0:	080048d0 	.word	0x080048d0
 8003ea4:	080048d0 	.word	0x080048d0
 8003ea8:	080048d4 	.word	0x080048d4

08003eac <memset>:
 8003eac:	4402      	add	r2, r0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <siprintf>:
 8003ebc:	b40e      	push	{r1, r2, r3}
 8003ebe:	b500      	push	{lr}
 8003ec0:	b09c      	sub	sp, #112	; 0x70
 8003ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ec4:	9002      	str	r0, [sp, #8]
 8003ec6:	9006      	str	r0, [sp, #24]
 8003ec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ecc:	4809      	ldr	r0, [pc, #36]	; (8003ef4 <siprintf+0x38>)
 8003ece:	9107      	str	r1, [sp, #28]
 8003ed0:	9104      	str	r1, [sp, #16]
 8003ed2:	4909      	ldr	r1, [pc, #36]	; (8003ef8 <siprintf+0x3c>)
 8003ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ed8:	9105      	str	r1, [sp, #20]
 8003eda:	6800      	ldr	r0, [r0, #0]
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	a902      	add	r1, sp, #8
 8003ee0:	f000 f868 	bl	8003fb4 <_svfiprintf_r>
 8003ee4:	9b02      	ldr	r3, [sp, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
 8003eea:	b01c      	add	sp, #112	; 0x70
 8003eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ef0:	b003      	add	sp, #12
 8003ef2:	4770      	bx	lr
 8003ef4:	2000000c 	.word	0x2000000c
 8003ef8:	ffff0208 	.word	0xffff0208

08003efc <__ssputs_r>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	688e      	ldr	r6, [r1, #8]
 8003f02:	429e      	cmp	r6, r3
 8003f04:	4682      	mov	sl, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	4690      	mov	r8, r2
 8003f0a:	461f      	mov	r7, r3
 8003f0c:	d838      	bhi.n	8003f80 <__ssputs_r+0x84>
 8003f0e:	898a      	ldrh	r2, [r1, #12]
 8003f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f14:	d032      	beq.n	8003f7c <__ssputs_r+0x80>
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	6909      	ldr	r1, [r1, #16]
 8003f1a:	eba5 0901 	sub.w	r9, r5, r1
 8003f1e:	6965      	ldr	r5, [r4, #20]
 8003f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f28:	3301      	adds	r3, #1
 8003f2a:	444b      	add	r3, r9
 8003f2c:	106d      	asrs	r5, r5, #1
 8003f2e:	429d      	cmp	r5, r3
 8003f30:	bf38      	it	cc
 8003f32:	461d      	movcc	r5, r3
 8003f34:	0553      	lsls	r3, r2, #21
 8003f36:	d531      	bpl.n	8003f9c <__ssputs_r+0xa0>
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f000 fb63 	bl	8004604 <_malloc_r>
 8003f3e:	4606      	mov	r6, r0
 8003f40:	b950      	cbnz	r0, 8003f58 <__ssputs_r+0x5c>
 8003f42:	230c      	movs	r3, #12
 8003f44:	f8ca 3000 	str.w	r3, [sl]
 8003f48:	89a3      	ldrh	r3, [r4, #12]
 8003f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f4e:	81a3      	strh	r3, [r4, #12]
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f58:	6921      	ldr	r1, [r4, #16]
 8003f5a:	464a      	mov	r2, r9
 8003f5c:	f000 fabe 	bl	80044dc <memcpy>
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6a:	81a3      	strh	r3, [r4, #12]
 8003f6c:	6126      	str	r6, [r4, #16]
 8003f6e:	6165      	str	r5, [r4, #20]
 8003f70:	444e      	add	r6, r9
 8003f72:	eba5 0509 	sub.w	r5, r5, r9
 8003f76:	6026      	str	r6, [r4, #0]
 8003f78:	60a5      	str	r5, [r4, #8]
 8003f7a:	463e      	mov	r6, r7
 8003f7c:	42be      	cmp	r6, r7
 8003f7e:	d900      	bls.n	8003f82 <__ssputs_r+0x86>
 8003f80:	463e      	mov	r6, r7
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	4632      	mov	r2, r6
 8003f86:	4641      	mov	r1, r8
 8003f88:	f000 fab6 	bl	80044f8 <memmove>
 8003f8c:	68a3      	ldr	r3, [r4, #8]
 8003f8e:	1b9b      	subs	r3, r3, r6
 8003f90:	60a3      	str	r3, [r4, #8]
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	4433      	add	r3, r6
 8003f96:	6023      	str	r3, [r4, #0]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e7db      	b.n	8003f54 <__ssputs_r+0x58>
 8003f9c:	462a      	mov	r2, r5
 8003f9e:	f000 fba5 	bl	80046ec <_realloc_r>
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d1e1      	bne.n	8003f6c <__ssputs_r+0x70>
 8003fa8:	6921      	ldr	r1, [r4, #16]
 8003faa:	4650      	mov	r0, sl
 8003fac:	f000 fabe 	bl	800452c <_free_r>
 8003fb0:	e7c7      	b.n	8003f42 <__ssputs_r+0x46>
	...

08003fb4 <_svfiprintf_r>:
 8003fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	4698      	mov	r8, r3
 8003fba:	898b      	ldrh	r3, [r1, #12]
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	b09d      	sub	sp, #116	; 0x74
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	d50e      	bpl.n	8003fe6 <_svfiprintf_r+0x32>
 8003fc8:	690b      	ldr	r3, [r1, #16]
 8003fca:	b963      	cbnz	r3, 8003fe6 <_svfiprintf_r+0x32>
 8003fcc:	2140      	movs	r1, #64	; 0x40
 8003fce:	f000 fb19 	bl	8004604 <_malloc_r>
 8003fd2:	6028      	str	r0, [r5, #0]
 8003fd4:	6128      	str	r0, [r5, #16]
 8003fd6:	b920      	cbnz	r0, 8003fe2 <_svfiprintf_r+0x2e>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	603b      	str	r3, [r7, #0]
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	e0d1      	b.n	8004186 <_svfiprintf_r+0x1d2>
 8003fe2:	2340      	movs	r3, #64	; 0x40
 8003fe4:	616b      	str	r3, [r5, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fea:	2320      	movs	r3, #32
 8003fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ff4:	2330      	movs	r3, #48	; 0x30
 8003ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041a0 <_svfiprintf_r+0x1ec>
 8003ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ffe:	f04f 0901 	mov.w	r9, #1
 8004002:	4623      	mov	r3, r4
 8004004:	469a      	mov	sl, r3
 8004006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400a:	b10a      	cbz	r2, 8004010 <_svfiprintf_r+0x5c>
 800400c:	2a25      	cmp	r2, #37	; 0x25
 800400e:	d1f9      	bne.n	8004004 <_svfiprintf_r+0x50>
 8004010:	ebba 0b04 	subs.w	fp, sl, r4
 8004014:	d00b      	beq.n	800402e <_svfiprintf_r+0x7a>
 8004016:	465b      	mov	r3, fp
 8004018:	4622      	mov	r2, r4
 800401a:	4629      	mov	r1, r5
 800401c:	4638      	mov	r0, r7
 800401e:	f7ff ff6d 	bl	8003efc <__ssputs_r>
 8004022:	3001      	adds	r0, #1
 8004024:	f000 80aa 	beq.w	800417c <_svfiprintf_r+0x1c8>
 8004028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402a:	445a      	add	r2, fp
 800402c:	9209      	str	r2, [sp, #36]	; 0x24
 800402e:	f89a 3000 	ldrb.w	r3, [sl]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a2 	beq.w	800417c <_svfiprintf_r+0x1c8>
 8004038:	2300      	movs	r3, #0
 800403a:	f04f 32ff 	mov.w	r2, #4294967295
 800403e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004042:	f10a 0a01 	add.w	sl, sl, #1
 8004046:	9304      	str	r3, [sp, #16]
 8004048:	9307      	str	r3, [sp, #28]
 800404a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800404e:	931a      	str	r3, [sp, #104]	; 0x68
 8004050:	4654      	mov	r4, sl
 8004052:	2205      	movs	r2, #5
 8004054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004058:	4851      	ldr	r0, [pc, #324]	; (80041a0 <_svfiprintf_r+0x1ec>)
 800405a:	f7fc f8d1 	bl	8000200 <memchr>
 800405e:	9a04      	ldr	r2, [sp, #16]
 8004060:	b9d8      	cbnz	r0, 800409a <_svfiprintf_r+0xe6>
 8004062:	06d0      	lsls	r0, r2, #27
 8004064:	bf44      	itt	mi
 8004066:	2320      	movmi	r3, #32
 8004068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800406c:	0711      	lsls	r1, r2, #28
 800406e:	bf44      	itt	mi
 8004070:	232b      	movmi	r3, #43	; 0x2b
 8004072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004076:	f89a 3000 	ldrb.w	r3, [sl]
 800407a:	2b2a      	cmp	r3, #42	; 0x2a
 800407c:	d015      	beq.n	80040aa <_svfiprintf_r+0xf6>
 800407e:	9a07      	ldr	r2, [sp, #28]
 8004080:	4654      	mov	r4, sl
 8004082:	2000      	movs	r0, #0
 8004084:	f04f 0c0a 	mov.w	ip, #10
 8004088:	4621      	mov	r1, r4
 800408a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800408e:	3b30      	subs	r3, #48	; 0x30
 8004090:	2b09      	cmp	r3, #9
 8004092:	d94e      	bls.n	8004132 <_svfiprintf_r+0x17e>
 8004094:	b1b0      	cbz	r0, 80040c4 <_svfiprintf_r+0x110>
 8004096:	9207      	str	r2, [sp, #28]
 8004098:	e014      	b.n	80040c4 <_svfiprintf_r+0x110>
 800409a:	eba0 0308 	sub.w	r3, r0, r8
 800409e:	fa09 f303 	lsl.w	r3, r9, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	9304      	str	r3, [sp, #16]
 80040a6:	46a2      	mov	sl, r4
 80040a8:	e7d2      	b.n	8004050 <_svfiprintf_r+0x9c>
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	1d19      	adds	r1, r3, #4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	9103      	str	r1, [sp, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfbb      	ittet	lt
 80040b6:	425b      	neglt	r3, r3
 80040b8:	f042 0202 	orrlt.w	r2, r2, #2
 80040bc:	9307      	strge	r3, [sp, #28]
 80040be:	9307      	strlt	r3, [sp, #28]
 80040c0:	bfb8      	it	lt
 80040c2:	9204      	strlt	r2, [sp, #16]
 80040c4:	7823      	ldrb	r3, [r4, #0]
 80040c6:	2b2e      	cmp	r3, #46	; 0x2e
 80040c8:	d10c      	bne.n	80040e4 <_svfiprintf_r+0x130>
 80040ca:	7863      	ldrb	r3, [r4, #1]
 80040cc:	2b2a      	cmp	r3, #42	; 0x2a
 80040ce:	d135      	bne.n	800413c <_svfiprintf_r+0x188>
 80040d0:	9b03      	ldr	r3, [sp, #12]
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	9203      	str	r2, [sp, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bfb8      	it	lt
 80040dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e0:	3402      	adds	r4, #2
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041b0 <_svfiprintf_r+0x1fc>
 80040e8:	7821      	ldrb	r1, [r4, #0]
 80040ea:	2203      	movs	r2, #3
 80040ec:	4650      	mov	r0, sl
 80040ee:	f7fc f887 	bl	8000200 <memchr>
 80040f2:	b140      	cbz	r0, 8004106 <_svfiprintf_r+0x152>
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	eba0 000a 	sub.w	r0, r0, sl
 80040fa:	fa03 f000 	lsl.w	r0, r3, r0
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	4303      	orrs	r3, r0
 8004102:	3401      	adds	r4, #1
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410a:	4826      	ldr	r0, [pc, #152]	; (80041a4 <_svfiprintf_r+0x1f0>)
 800410c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004110:	2206      	movs	r2, #6
 8004112:	f7fc f875 	bl	8000200 <memchr>
 8004116:	2800      	cmp	r0, #0
 8004118:	d038      	beq.n	800418c <_svfiprintf_r+0x1d8>
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <_svfiprintf_r+0x1f4>)
 800411c:	bb1b      	cbnz	r3, 8004166 <_svfiprintf_r+0x1b2>
 800411e:	9b03      	ldr	r3, [sp, #12]
 8004120:	3307      	adds	r3, #7
 8004122:	f023 0307 	bic.w	r3, r3, #7
 8004126:	3308      	adds	r3, #8
 8004128:	9303      	str	r3, [sp, #12]
 800412a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800412c:	4433      	add	r3, r6
 800412e:	9309      	str	r3, [sp, #36]	; 0x24
 8004130:	e767      	b.n	8004002 <_svfiprintf_r+0x4e>
 8004132:	fb0c 3202 	mla	r2, ip, r2, r3
 8004136:	460c      	mov	r4, r1
 8004138:	2001      	movs	r0, #1
 800413a:	e7a5      	b.n	8004088 <_svfiprintf_r+0xd4>
 800413c:	2300      	movs	r3, #0
 800413e:	3401      	adds	r4, #1
 8004140:	9305      	str	r3, [sp, #20]
 8004142:	4619      	mov	r1, r3
 8004144:	f04f 0c0a 	mov.w	ip, #10
 8004148:	4620      	mov	r0, r4
 800414a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800414e:	3a30      	subs	r2, #48	; 0x30
 8004150:	2a09      	cmp	r2, #9
 8004152:	d903      	bls.n	800415c <_svfiprintf_r+0x1a8>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0c5      	beq.n	80040e4 <_svfiprintf_r+0x130>
 8004158:	9105      	str	r1, [sp, #20]
 800415a:	e7c3      	b.n	80040e4 <_svfiprintf_r+0x130>
 800415c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004160:	4604      	mov	r4, r0
 8004162:	2301      	movs	r3, #1
 8004164:	e7f0      	b.n	8004148 <_svfiprintf_r+0x194>
 8004166:	ab03      	add	r3, sp, #12
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	462a      	mov	r2, r5
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <_svfiprintf_r+0x1f8>)
 800416e:	a904      	add	r1, sp, #16
 8004170:	4638      	mov	r0, r7
 8004172:	f3af 8000 	nop.w
 8004176:	1c42      	adds	r2, r0, #1
 8004178:	4606      	mov	r6, r0
 800417a:	d1d6      	bne.n	800412a <_svfiprintf_r+0x176>
 800417c:	89ab      	ldrh	r3, [r5, #12]
 800417e:	065b      	lsls	r3, r3, #25
 8004180:	f53f af2c 	bmi.w	8003fdc <_svfiprintf_r+0x28>
 8004184:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004186:	b01d      	add	sp, #116	; 0x74
 8004188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800418c:	ab03      	add	r3, sp, #12
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	462a      	mov	r2, r5
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <_svfiprintf_r+0x1f8>)
 8004194:	a904      	add	r1, sp, #16
 8004196:	4638      	mov	r0, r7
 8004198:	f000 f87a 	bl	8004290 <_printf_i>
 800419c:	e7eb      	b.n	8004176 <_svfiprintf_r+0x1c2>
 800419e:	bf00      	nop
 80041a0:	08004894 	.word	0x08004894
 80041a4:	0800489e 	.word	0x0800489e
 80041a8:	00000000 	.word	0x00000000
 80041ac:	08003efd 	.word	0x08003efd
 80041b0:	0800489a 	.word	0x0800489a

080041b4 <_printf_common>:
 80041b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b8:	4616      	mov	r6, r2
 80041ba:	4699      	mov	r9, r3
 80041bc:	688a      	ldr	r2, [r1, #8]
 80041be:	690b      	ldr	r3, [r1, #16]
 80041c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	bfb8      	it	lt
 80041c8:	4613      	movlt	r3, r2
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041d0:	4607      	mov	r7, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	b10a      	cbz	r2, 80041da <_printf_common+0x26>
 80041d6:	3301      	adds	r3, #1
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	0699      	lsls	r1, r3, #26
 80041de:	bf42      	ittt	mi
 80041e0:	6833      	ldrmi	r3, [r6, #0]
 80041e2:	3302      	addmi	r3, #2
 80041e4:	6033      	strmi	r3, [r6, #0]
 80041e6:	6825      	ldr	r5, [r4, #0]
 80041e8:	f015 0506 	ands.w	r5, r5, #6
 80041ec:	d106      	bne.n	80041fc <_printf_common+0x48>
 80041ee:	f104 0a19 	add.w	sl, r4, #25
 80041f2:	68e3      	ldr	r3, [r4, #12]
 80041f4:	6832      	ldr	r2, [r6, #0]
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	42ab      	cmp	r3, r5
 80041fa:	dc26      	bgt.n	800424a <_printf_common+0x96>
 80041fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004200:	1e13      	subs	r3, r2, #0
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	bf18      	it	ne
 8004206:	2301      	movne	r3, #1
 8004208:	0692      	lsls	r2, r2, #26
 800420a:	d42b      	bmi.n	8004264 <_printf_common+0xb0>
 800420c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004210:	4649      	mov	r1, r9
 8004212:	4638      	mov	r0, r7
 8004214:	47c0      	blx	r8
 8004216:	3001      	adds	r0, #1
 8004218:	d01e      	beq.n	8004258 <_printf_common+0xa4>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	68e5      	ldr	r5, [r4, #12]
 800421e:	6832      	ldr	r2, [r6, #0]
 8004220:	f003 0306 	and.w	r3, r3, #6
 8004224:	2b04      	cmp	r3, #4
 8004226:	bf08      	it	eq
 8004228:	1aad      	subeq	r5, r5, r2
 800422a:	68a3      	ldr	r3, [r4, #8]
 800422c:	6922      	ldr	r2, [r4, #16]
 800422e:	bf0c      	ite	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	2500      	movne	r5, #0
 8004236:	4293      	cmp	r3, r2
 8004238:	bfc4      	itt	gt
 800423a:	1a9b      	subgt	r3, r3, r2
 800423c:	18ed      	addgt	r5, r5, r3
 800423e:	2600      	movs	r6, #0
 8004240:	341a      	adds	r4, #26
 8004242:	42b5      	cmp	r5, r6
 8004244:	d11a      	bne.n	800427c <_printf_common+0xc8>
 8004246:	2000      	movs	r0, #0
 8004248:	e008      	b.n	800425c <_printf_common+0xa8>
 800424a:	2301      	movs	r3, #1
 800424c:	4652      	mov	r2, sl
 800424e:	4649      	mov	r1, r9
 8004250:	4638      	mov	r0, r7
 8004252:	47c0      	blx	r8
 8004254:	3001      	adds	r0, #1
 8004256:	d103      	bne.n	8004260 <_printf_common+0xac>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004260:	3501      	adds	r5, #1
 8004262:	e7c6      	b.n	80041f2 <_printf_common+0x3e>
 8004264:	18e1      	adds	r1, r4, r3
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	2030      	movs	r0, #48	; 0x30
 800426a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800426e:	4422      	add	r2, r4
 8004270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004278:	3302      	adds	r3, #2
 800427a:	e7c7      	b.n	800420c <_printf_common+0x58>
 800427c:	2301      	movs	r3, #1
 800427e:	4622      	mov	r2, r4
 8004280:	4649      	mov	r1, r9
 8004282:	4638      	mov	r0, r7
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d0e6      	beq.n	8004258 <_printf_common+0xa4>
 800428a:	3601      	adds	r6, #1
 800428c:	e7d9      	b.n	8004242 <_printf_common+0x8e>
	...

08004290 <_printf_i>:
 8004290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004294:	7e0f      	ldrb	r7, [r1, #24]
 8004296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004298:	2f78      	cmp	r7, #120	; 0x78
 800429a:	4691      	mov	r9, r2
 800429c:	4680      	mov	r8, r0
 800429e:	460c      	mov	r4, r1
 80042a0:	469a      	mov	sl, r3
 80042a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042a6:	d807      	bhi.n	80042b8 <_printf_i+0x28>
 80042a8:	2f62      	cmp	r7, #98	; 0x62
 80042aa:	d80a      	bhi.n	80042c2 <_printf_i+0x32>
 80042ac:	2f00      	cmp	r7, #0
 80042ae:	f000 80d8 	beq.w	8004462 <_printf_i+0x1d2>
 80042b2:	2f58      	cmp	r7, #88	; 0x58
 80042b4:	f000 80a3 	beq.w	80043fe <_printf_i+0x16e>
 80042b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c0:	e03a      	b.n	8004338 <_printf_i+0xa8>
 80042c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042c6:	2b15      	cmp	r3, #21
 80042c8:	d8f6      	bhi.n	80042b8 <_printf_i+0x28>
 80042ca:	a101      	add	r1, pc, #4	; (adr r1, 80042d0 <_printf_i+0x40>)
 80042cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042d0:	08004329 	.word	0x08004329
 80042d4:	0800433d 	.word	0x0800433d
 80042d8:	080042b9 	.word	0x080042b9
 80042dc:	080042b9 	.word	0x080042b9
 80042e0:	080042b9 	.word	0x080042b9
 80042e4:	080042b9 	.word	0x080042b9
 80042e8:	0800433d 	.word	0x0800433d
 80042ec:	080042b9 	.word	0x080042b9
 80042f0:	080042b9 	.word	0x080042b9
 80042f4:	080042b9 	.word	0x080042b9
 80042f8:	080042b9 	.word	0x080042b9
 80042fc:	08004449 	.word	0x08004449
 8004300:	0800436d 	.word	0x0800436d
 8004304:	0800442b 	.word	0x0800442b
 8004308:	080042b9 	.word	0x080042b9
 800430c:	080042b9 	.word	0x080042b9
 8004310:	0800446b 	.word	0x0800446b
 8004314:	080042b9 	.word	0x080042b9
 8004318:	0800436d 	.word	0x0800436d
 800431c:	080042b9 	.word	0x080042b9
 8004320:	080042b9 	.word	0x080042b9
 8004324:	08004433 	.word	0x08004433
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	1d1a      	adds	r2, r3, #4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	602a      	str	r2, [r5, #0]
 8004330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004338:	2301      	movs	r3, #1
 800433a:	e0a3      	b.n	8004484 <_printf_i+0x1f4>
 800433c:	6820      	ldr	r0, [r4, #0]
 800433e:	6829      	ldr	r1, [r5, #0]
 8004340:	0606      	lsls	r6, r0, #24
 8004342:	f101 0304 	add.w	r3, r1, #4
 8004346:	d50a      	bpl.n	800435e <_printf_i+0xce>
 8004348:	680e      	ldr	r6, [r1, #0]
 800434a:	602b      	str	r3, [r5, #0]
 800434c:	2e00      	cmp	r6, #0
 800434e:	da03      	bge.n	8004358 <_printf_i+0xc8>
 8004350:	232d      	movs	r3, #45	; 0x2d
 8004352:	4276      	negs	r6, r6
 8004354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004358:	485e      	ldr	r0, [pc, #376]	; (80044d4 <_printf_i+0x244>)
 800435a:	230a      	movs	r3, #10
 800435c:	e019      	b.n	8004392 <_printf_i+0x102>
 800435e:	680e      	ldr	r6, [r1, #0]
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004366:	bf18      	it	ne
 8004368:	b236      	sxthne	r6, r6
 800436a:	e7ef      	b.n	800434c <_printf_i+0xbc>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	1d19      	adds	r1, r3, #4
 8004372:	6029      	str	r1, [r5, #0]
 8004374:	0601      	lsls	r1, r0, #24
 8004376:	d501      	bpl.n	800437c <_printf_i+0xec>
 8004378:	681e      	ldr	r6, [r3, #0]
 800437a:	e002      	b.n	8004382 <_printf_i+0xf2>
 800437c:	0646      	lsls	r6, r0, #25
 800437e:	d5fb      	bpl.n	8004378 <_printf_i+0xe8>
 8004380:	881e      	ldrh	r6, [r3, #0]
 8004382:	4854      	ldr	r0, [pc, #336]	; (80044d4 <_printf_i+0x244>)
 8004384:	2f6f      	cmp	r7, #111	; 0x6f
 8004386:	bf0c      	ite	eq
 8004388:	2308      	moveq	r3, #8
 800438a:	230a      	movne	r3, #10
 800438c:	2100      	movs	r1, #0
 800438e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004392:	6865      	ldr	r5, [r4, #4]
 8004394:	60a5      	str	r5, [r4, #8]
 8004396:	2d00      	cmp	r5, #0
 8004398:	bfa2      	ittt	ge
 800439a:	6821      	ldrge	r1, [r4, #0]
 800439c:	f021 0104 	bicge.w	r1, r1, #4
 80043a0:	6021      	strge	r1, [r4, #0]
 80043a2:	b90e      	cbnz	r6, 80043a8 <_printf_i+0x118>
 80043a4:	2d00      	cmp	r5, #0
 80043a6:	d04d      	beq.n	8004444 <_printf_i+0x1b4>
 80043a8:	4615      	mov	r5, r2
 80043aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80043ae:	fb03 6711 	mls	r7, r3, r1, r6
 80043b2:	5dc7      	ldrb	r7, [r0, r7]
 80043b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043b8:	4637      	mov	r7, r6
 80043ba:	42bb      	cmp	r3, r7
 80043bc:	460e      	mov	r6, r1
 80043be:	d9f4      	bls.n	80043aa <_printf_i+0x11a>
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d10b      	bne.n	80043dc <_printf_i+0x14c>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	07de      	lsls	r6, r3, #31
 80043c8:	d508      	bpl.n	80043dc <_printf_i+0x14c>
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	6861      	ldr	r1, [r4, #4]
 80043ce:	4299      	cmp	r1, r3
 80043d0:	bfde      	ittt	le
 80043d2:	2330      	movle	r3, #48	; 0x30
 80043d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80043d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80043dc:	1b52      	subs	r2, r2, r5
 80043de:	6122      	str	r2, [r4, #16]
 80043e0:	f8cd a000 	str.w	sl, [sp]
 80043e4:	464b      	mov	r3, r9
 80043e6:	aa03      	add	r2, sp, #12
 80043e8:	4621      	mov	r1, r4
 80043ea:	4640      	mov	r0, r8
 80043ec:	f7ff fee2 	bl	80041b4 <_printf_common>
 80043f0:	3001      	adds	r0, #1
 80043f2:	d14c      	bne.n	800448e <_printf_i+0x1fe>
 80043f4:	f04f 30ff 	mov.w	r0, #4294967295
 80043f8:	b004      	add	sp, #16
 80043fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fe:	4835      	ldr	r0, [pc, #212]	; (80044d4 <_printf_i+0x244>)
 8004400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004404:	6829      	ldr	r1, [r5, #0]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	f851 6b04 	ldr.w	r6, [r1], #4
 800440c:	6029      	str	r1, [r5, #0]
 800440e:	061d      	lsls	r5, r3, #24
 8004410:	d514      	bpl.n	800443c <_printf_i+0x1ac>
 8004412:	07df      	lsls	r7, r3, #31
 8004414:	bf44      	itt	mi
 8004416:	f043 0320 	orrmi.w	r3, r3, #32
 800441a:	6023      	strmi	r3, [r4, #0]
 800441c:	b91e      	cbnz	r6, 8004426 <_printf_i+0x196>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	f023 0320 	bic.w	r3, r3, #32
 8004424:	6023      	str	r3, [r4, #0]
 8004426:	2310      	movs	r3, #16
 8004428:	e7b0      	b.n	800438c <_printf_i+0xfc>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	f043 0320 	orr.w	r3, r3, #32
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	2378      	movs	r3, #120	; 0x78
 8004434:	4828      	ldr	r0, [pc, #160]	; (80044d8 <_printf_i+0x248>)
 8004436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800443a:	e7e3      	b.n	8004404 <_printf_i+0x174>
 800443c:	0659      	lsls	r1, r3, #25
 800443e:	bf48      	it	mi
 8004440:	b2b6      	uxthmi	r6, r6
 8004442:	e7e6      	b.n	8004412 <_printf_i+0x182>
 8004444:	4615      	mov	r5, r2
 8004446:	e7bb      	b.n	80043c0 <_printf_i+0x130>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	6826      	ldr	r6, [r4, #0]
 800444c:	6961      	ldr	r1, [r4, #20]
 800444e:	1d18      	adds	r0, r3, #4
 8004450:	6028      	str	r0, [r5, #0]
 8004452:	0635      	lsls	r5, r6, #24
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	d501      	bpl.n	800445c <_printf_i+0x1cc>
 8004458:	6019      	str	r1, [r3, #0]
 800445a:	e002      	b.n	8004462 <_printf_i+0x1d2>
 800445c:	0670      	lsls	r0, r6, #25
 800445e:	d5fb      	bpl.n	8004458 <_printf_i+0x1c8>
 8004460:	8019      	strh	r1, [r3, #0]
 8004462:	2300      	movs	r3, #0
 8004464:	6123      	str	r3, [r4, #16]
 8004466:	4615      	mov	r5, r2
 8004468:	e7ba      	b.n	80043e0 <_printf_i+0x150>
 800446a:	682b      	ldr	r3, [r5, #0]
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	602a      	str	r2, [r5, #0]
 8004470:	681d      	ldr	r5, [r3, #0]
 8004472:	6862      	ldr	r2, [r4, #4]
 8004474:	2100      	movs	r1, #0
 8004476:	4628      	mov	r0, r5
 8004478:	f7fb fec2 	bl	8000200 <memchr>
 800447c:	b108      	cbz	r0, 8004482 <_printf_i+0x1f2>
 800447e:	1b40      	subs	r0, r0, r5
 8004480:	6060      	str	r0, [r4, #4]
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	6123      	str	r3, [r4, #16]
 8004486:	2300      	movs	r3, #0
 8004488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800448c:	e7a8      	b.n	80043e0 <_printf_i+0x150>
 800448e:	6923      	ldr	r3, [r4, #16]
 8004490:	462a      	mov	r2, r5
 8004492:	4649      	mov	r1, r9
 8004494:	4640      	mov	r0, r8
 8004496:	47d0      	blx	sl
 8004498:	3001      	adds	r0, #1
 800449a:	d0ab      	beq.n	80043f4 <_printf_i+0x164>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	079b      	lsls	r3, r3, #30
 80044a0:	d413      	bmi.n	80044ca <_printf_i+0x23a>
 80044a2:	68e0      	ldr	r0, [r4, #12]
 80044a4:	9b03      	ldr	r3, [sp, #12]
 80044a6:	4298      	cmp	r0, r3
 80044a8:	bfb8      	it	lt
 80044aa:	4618      	movlt	r0, r3
 80044ac:	e7a4      	b.n	80043f8 <_printf_i+0x168>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4632      	mov	r2, r6
 80044b2:	4649      	mov	r1, r9
 80044b4:	4640      	mov	r0, r8
 80044b6:	47d0      	blx	sl
 80044b8:	3001      	adds	r0, #1
 80044ba:	d09b      	beq.n	80043f4 <_printf_i+0x164>
 80044bc:	3501      	adds	r5, #1
 80044be:	68e3      	ldr	r3, [r4, #12]
 80044c0:	9903      	ldr	r1, [sp, #12]
 80044c2:	1a5b      	subs	r3, r3, r1
 80044c4:	42ab      	cmp	r3, r5
 80044c6:	dcf2      	bgt.n	80044ae <_printf_i+0x21e>
 80044c8:	e7eb      	b.n	80044a2 <_printf_i+0x212>
 80044ca:	2500      	movs	r5, #0
 80044cc:	f104 0619 	add.w	r6, r4, #25
 80044d0:	e7f5      	b.n	80044be <_printf_i+0x22e>
 80044d2:	bf00      	nop
 80044d4:	080048a5 	.word	0x080048a5
 80044d8:	080048b6 	.word	0x080048b6

080044dc <memcpy>:
 80044dc:	440a      	add	r2, r1
 80044de:	4291      	cmp	r1, r2
 80044e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044e4:	d100      	bne.n	80044e8 <memcpy+0xc>
 80044e6:	4770      	bx	lr
 80044e8:	b510      	push	{r4, lr}
 80044ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044f2:	4291      	cmp	r1, r2
 80044f4:	d1f9      	bne.n	80044ea <memcpy+0xe>
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <memmove>:
 80044f8:	4288      	cmp	r0, r1
 80044fa:	b510      	push	{r4, lr}
 80044fc:	eb01 0402 	add.w	r4, r1, r2
 8004500:	d902      	bls.n	8004508 <memmove+0x10>
 8004502:	4284      	cmp	r4, r0
 8004504:	4623      	mov	r3, r4
 8004506:	d807      	bhi.n	8004518 <memmove+0x20>
 8004508:	1e43      	subs	r3, r0, #1
 800450a:	42a1      	cmp	r1, r4
 800450c:	d008      	beq.n	8004520 <memmove+0x28>
 800450e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004512:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004516:	e7f8      	b.n	800450a <memmove+0x12>
 8004518:	4402      	add	r2, r0
 800451a:	4601      	mov	r1, r0
 800451c:	428a      	cmp	r2, r1
 800451e:	d100      	bne.n	8004522 <memmove+0x2a>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004526:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800452a:	e7f7      	b.n	800451c <memmove+0x24>

0800452c <_free_r>:
 800452c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800452e:	2900      	cmp	r1, #0
 8004530:	d044      	beq.n	80045bc <_free_r+0x90>
 8004532:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004536:	9001      	str	r0, [sp, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f1a1 0404 	sub.w	r4, r1, #4
 800453e:	bfb8      	it	lt
 8004540:	18e4      	addlt	r4, r4, r3
 8004542:	f000 f913 	bl	800476c <__malloc_lock>
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <_free_r+0x94>)
 8004548:	9801      	ldr	r0, [sp, #4]
 800454a:	6813      	ldr	r3, [r2, #0]
 800454c:	b933      	cbnz	r3, 800455c <_free_r+0x30>
 800454e:	6063      	str	r3, [r4, #4]
 8004550:	6014      	str	r4, [r2, #0]
 8004552:	b003      	add	sp, #12
 8004554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004558:	f000 b90e 	b.w	8004778 <__malloc_unlock>
 800455c:	42a3      	cmp	r3, r4
 800455e:	d908      	bls.n	8004572 <_free_r+0x46>
 8004560:	6825      	ldr	r5, [r4, #0]
 8004562:	1961      	adds	r1, r4, r5
 8004564:	428b      	cmp	r3, r1
 8004566:	bf01      	itttt	eq
 8004568:	6819      	ldreq	r1, [r3, #0]
 800456a:	685b      	ldreq	r3, [r3, #4]
 800456c:	1949      	addeq	r1, r1, r5
 800456e:	6021      	streq	r1, [r4, #0]
 8004570:	e7ed      	b.n	800454e <_free_r+0x22>
 8004572:	461a      	mov	r2, r3
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	b10b      	cbz	r3, 800457c <_free_r+0x50>
 8004578:	42a3      	cmp	r3, r4
 800457a:	d9fa      	bls.n	8004572 <_free_r+0x46>
 800457c:	6811      	ldr	r1, [r2, #0]
 800457e:	1855      	adds	r5, r2, r1
 8004580:	42a5      	cmp	r5, r4
 8004582:	d10b      	bne.n	800459c <_free_r+0x70>
 8004584:	6824      	ldr	r4, [r4, #0]
 8004586:	4421      	add	r1, r4
 8004588:	1854      	adds	r4, r2, r1
 800458a:	42a3      	cmp	r3, r4
 800458c:	6011      	str	r1, [r2, #0]
 800458e:	d1e0      	bne.n	8004552 <_free_r+0x26>
 8004590:	681c      	ldr	r4, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	6053      	str	r3, [r2, #4]
 8004596:	4421      	add	r1, r4
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	e7da      	b.n	8004552 <_free_r+0x26>
 800459c:	d902      	bls.n	80045a4 <_free_r+0x78>
 800459e:	230c      	movs	r3, #12
 80045a0:	6003      	str	r3, [r0, #0]
 80045a2:	e7d6      	b.n	8004552 <_free_r+0x26>
 80045a4:	6825      	ldr	r5, [r4, #0]
 80045a6:	1961      	adds	r1, r4, r5
 80045a8:	428b      	cmp	r3, r1
 80045aa:	bf04      	itt	eq
 80045ac:	6819      	ldreq	r1, [r3, #0]
 80045ae:	685b      	ldreq	r3, [r3, #4]
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	bf04      	itt	eq
 80045b4:	1949      	addeq	r1, r1, r5
 80045b6:	6021      	streq	r1, [r4, #0]
 80045b8:	6054      	str	r4, [r2, #4]
 80045ba:	e7ca      	b.n	8004552 <_free_r+0x26>
 80045bc:	b003      	add	sp, #12
 80045be:	bd30      	pop	{r4, r5, pc}
 80045c0:	20000140 	.word	0x20000140

080045c4 <sbrk_aligned>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4e0e      	ldr	r6, [pc, #56]	; (8004600 <sbrk_aligned+0x3c>)
 80045c8:	460c      	mov	r4, r1
 80045ca:	6831      	ldr	r1, [r6, #0]
 80045cc:	4605      	mov	r5, r0
 80045ce:	b911      	cbnz	r1, 80045d6 <sbrk_aligned+0x12>
 80045d0:	f000 f8bc 	bl	800474c <_sbrk_r>
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 f8b7 	bl	800474c <_sbrk_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d00a      	beq.n	80045f8 <sbrk_aligned+0x34>
 80045e2:	1cc4      	adds	r4, r0, #3
 80045e4:	f024 0403 	bic.w	r4, r4, #3
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d007      	beq.n	80045fc <sbrk_aligned+0x38>
 80045ec:	1a21      	subs	r1, r4, r0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f8ac 	bl	800474c <_sbrk_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d101      	bne.n	80045fc <sbrk_aligned+0x38>
 80045f8:	f04f 34ff 	mov.w	r4, #4294967295
 80045fc:	4620      	mov	r0, r4
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	20000144 	.word	0x20000144

08004604 <_malloc_r>:
 8004604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	1ccd      	adds	r5, r1, #3
 800460a:	f025 0503 	bic.w	r5, r5, #3
 800460e:	3508      	adds	r5, #8
 8004610:	2d0c      	cmp	r5, #12
 8004612:	bf38      	it	cc
 8004614:	250c      	movcc	r5, #12
 8004616:	2d00      	cmp	r5, #0
 8004618:	4607      	mov	r7, r0
 800461a:	db01      	blt.n	8004620 <_malloc_r+0x1c>
 800461c:	42a9      	cmp	r1, r5
 800461e:	d905      	bls.n	800462c <_malloc_r+0x28>
 8004620:	230c      	movs	r3, #12
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	2600      	movs	r6, #0
 8004626:	4630      	mov	r0, r6
 8004628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800462c:	4e2e      	ldr	r6, [pc, #184]	; (80046e8 <_malloc_r+0xe4>)
 800462e:	f000 f89d 	bl	800476c <__malloc_lock>
 8004632:	6833      	ldr	r3, [r6, #0]
 8004634:	461c      	mov	r4, r3
 8004636:	bb34      	cbnz	r4, 8004686 <_malloc_r+0x82>
 8004638:	4629      	mov	r1, r5
 800463a:	4638      	mov	r0, r7
 800463c:	f7ff ffc2 	bl	80045c4 <sbrk_aligned>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	4604      	mov	r4, r0
 8004644:	d14d      	bne.n	80046e2 <_malloc_r+0xde>
 8004646:	6834      	ldr	r4, [r6, #0]
 8004648:	4626      	mov	r6, r4
 800464a:	2e00      	cmp	r6, #0
 800464c:	d140      	bne.n	80046d0 <_malloc_r+0xcc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	4631      	mov	r1, r6
 8004652:	4638      	mov	r0, r7
 8004654:	eb04 0803 	add.w	r8, r4, r3
 8004658:	f000 f878 	bl	800474c <_sbrk_r>
 800465c:	4580      	cmp	r8, r0
 800465e:	d13a      	bne.n	80046d6 <_malloc_r+0xd2>
 8004660:	6821      	ldr	r1, [r4, #0]
 8004662:	3503      	adds	r5, #3
 8004664:	1a6d      	subs	r5, r5, r1
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	4629      	mov	r1, r5
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ffa5 	bl	80045c4 <sbrk_aligned>
 800467a:	3001      	adds	r0, #1
 800467c:	d02b      	beq.n	80046d6 <_malloc_r+0xd2>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	442b      	add	r3, r5
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	e00e      	b.n	80046a4 <_malloc_r+0xa0>
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	1b52      	subs	r2, r2, r5
 800468a:	d41e      	bmi.n	80046ca <_malloc_r+0xc6>
 800468c:	2a0b      	cmp	r2, #11
 800468e:	d916      	bls.n	80046be <_malloc_r+0xba>
 8004690:	1961      	adds	r1, r4, r5
 8004692:	42a3      	cmp	r3, r4
 8004694:	6025      	str	r5, [r4, #0]
 8004696:	bf18      	it	ne
 8004698:	6059      	strne	r1, [r3, #4]
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	bf08      	it	eq
 800469e:	6031      	streq	r1, [r6, #0]
 80046a0:	5162      	str	r2, [r4, r5]
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	4638      	mov	r0, r7
 80046a6:	f104 060b 	add.w	r6, r4, #11
 80046aa:	f000 f865 	bl	8004778 <__malloc_unlock>
 80046ae:	f026 0607 	bic.w	r6, r6, #7
 80046b2:	1d23      	adds	r3, r4, #4
 80046b4:	1af2      	subs	r2, r6, r3
 80046b6:	d0b6      	beq.n	8004626 <_malloc_r+0x22>
 80046b8:	1b9b      	subs	r3, r3, r6
 80046ba:	50a3      	str	r3, [r4, r2]
 80046bc:	e7b3      	b.n	8004626 <_malloc_r+0x22>
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	bf0c      	ite	eq
 80046c4:	6032      	streq	r2, [r6, #0]
 80046c6:	605a      	strne	r2, [r3, #4]
 80046c8:	e7ec      	b.n	80046a4 <_malloc_r+0xa0>
 80046ca:	4623      	mov	r3, r4
 80046cc:	6864      	ldr	r4, [r4, #4]
 80046ce:	e7b2      	b.n	8004636 <_malloc_r+0x32>
 80046d0:	4634      	mov	r4, r6
 80046d2:	6876      	ldr	r6, [r6, #4]
 80046d4:	e7b9      	b.n	800464a <_malloc_r+0x46>
 80046d6:	230c      	movs	r3, #12
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4638      	mov	r0, r7
 80046dc:	f000 f84c 	bl	8004778 <__malloc_unlock>
 80046e0:	e7a1      	b.n	8004626 <_malloc_r+0x22>
 80046e2:	6025      	str	r5, [r4, #0]
 80046e4:	e7de      	b.n	80046a4 <_malloc_r+0xa0>
 80046e6:	bf00      	nop
 80046e8:	20000140 	.word	0x20000140

080046ec <_realloc_r>:
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	4680      	mov	r8, r0
 80046f2:	4614      	mov	r4, r2
 80046f4:	460e      	mov	r6, r1
 80046f6:	b921      	cbnz	r1, 8004702 <_realloc_r+0x16>
 80046f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	4611      	mov	r1, r2
 80046fe:	f7ff bf81 	b.w	8004604 <_malloc_r>
 8004702:	b92a      	cbnz	r2, 8004710 <_realloc_r+0x24>
 8004704:	f7ff ff12 	bl	800452c <_free_r>
 8004708:	4625      	mov	r5, r4
 800470a:	4628      	mov	r0, r5
 800470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004710:	f000 f838 	bl	8004784 <_malloc_usable_size_r>
 8004714:	4284      	cmp	r4, r0
 8004716:	4607      	mov	r7, r0
 8004718:	d802      	bhi.n	8004720 <_realloc_r+0x34>
 800471a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800471e:	d812      	bhi.n	8004746 <_realloc_r+0x5a>
 8004720:	4621      	mov	r1, r4
 8004722:	4640      	mov	r0, r8
 8004724:	f7ff ff6e 	bl	8004604 <_malloc_r>
 8004728:	4605      	mov	r5, r0
 800472a:	2800      	cmp	r0, #0
 800472c:	d0ed      	beq.n	800470a <_realloc_r+0x1e>
 800472e:	42bc      	cmp	r4, r7
 8004730:	4622      	mov	r2, r4
 8004732:	4631      	mov	r1, r6
 8004734:	bf28      	it	cs
 8004736:	463a      	movcs	r2, r7
 8004738:	f7ff fed0 	bl	80044dc <memcpy>
 800473c:	4631      	mov	r1, r6
 800473e:	4640      	mov	r0, r8
 8004740:	f7ff fef4 	bl	800452c <_free_r>
 8004744:	e7e1      	b.n	800470a <_realloc_r+0x1e>
 8004746:	4635      	mov	r5, r6
 8004748:	e7df      	b.n	800470a <_realloc_r+0x1e>
	...

0800474c <_sbrk_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	; (8004768 <_sbrk_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fc fde4 	bl	8001324 <_sbrk>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_sbrk_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_sbrk_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	20000148 	.word	0x20000148

0800476c <__malloc_lock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_lock+0x8>)
 800476e:	f000 b811 	b.w	8004794 <__retarget_lock_acquire_recursive>
 8004772:	bf00      	nop
 8004774:	2000014c 	.word	0x2000014c

08004778 <__malloc_unlock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_unlock+0x8>)
 800477a:	f000 b80c 	b.w	8004796 <__retarget_lock_release_recursive>
 800477e:	bf00      	nop
 8004780:	2000014c 	.word	0x2000014c

08004784 <_malloc_usable_size_r>:
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f18      	subs	r0, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfbc      	itt	lt
 800478e:	580b      	ldrlt	r3, [r1, r0]
 8004790:	18c0      	addlt	r0, r0, r3
 8004792:	4770      	bx	lr

08004794 <__retarget_lock_acquire_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_release_recursive>:
 8004796:	4770      	bx	lr

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
