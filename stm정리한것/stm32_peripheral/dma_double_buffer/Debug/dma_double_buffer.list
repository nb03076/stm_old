
dma_double_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004988  08004988  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004988  08004988  00014988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004990  08004990  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004998  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000130  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000013c  2000013c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000910e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001792  00000000  00000000  0002914a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  0002a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000688  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d09  00000000  00000000  0002b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000097ba  00000000  00000000  0004d381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda76  00000000  00000000  00056b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001245b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bb4  00000000  00000000  00124604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004950 	.word	0x08004950

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004950 	.word	0x08004950

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fabd 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f839 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f8e9 	bl	80006d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000502:	f000 f8bf 	bl	8000684 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000506:	f000 f893 	bl	8000630 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  void* ptr = rx_buf;
 800050a:	4b15      	ldr	r3, [pc, #84]	; (8000560 <main+0x70>)
 800050c:	607b      	str	r3, [r7, #4]
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)ptr, RX_BUFLEN * 2);
 800050e:	2206      	movs	r2, #6
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <main+0x74>)
 8000514:	f002 fff3 	bl	80034fe <HAL_UART_Receive_DMA>
  HAL_UART_DMAPause(&huart1);
 8000518:	4812      	ldr	r0, [pc, #72]	; (8000564 <main+0x74>)
 800051a:	f003 f820 	bl	800355e <HAL_UART_DMAPause>
  HAL_DMA_Abort(&hdma_usart1_rx);
 800051e:	4812      	ldr	r0, [pc, #72]	; (8000568 <main+0x78>)
 8000520:	f000 fd32 	bl	8000f88 <HAL_DMA_Abort>
  hdma_usart1_rx.XferM1CpltCallback = M1Callback;
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <main+0x78>)
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <main+0x7c>)
 8000528:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_DMAEx_MultiBufferStart_IT(&hdma_usart1_rx, (uint32_t)&huart1.Instance->DR , (uint32_t)ptr, (uint32_t)(ptr+RX_BUFLEN), RX_BUFLEN);
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <main+0x74>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3304      	adds	r3, #4
 8000530:	4619      	mov	r1, r3
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3303      	adds	r3, #3
 8000538:	4618      	mov	r0, r3
 800053a:	2303      	movs	r3, #3
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	4603      	mov	r3, r0
 8000540:	4809      	ldr	r0, [pc, #36]	; (8000568 <main+0x78>)
 8000542:	f001 f81d 	bl	8001580 <HAL_DMAEx_MultiBufferStart_IT>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
 8000546:	4b07      	ldr	r3, [pc, #28]	; (8000564 <main+0x74>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68da      	ldr	r2, [r3, #12]
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <main+0x74>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f042 0210 	orr.w	r2, r2, #16
 8000554:	60da      	str	r2, [r3, #12]
  HAL_UART_DMAResume(&huart1);
 8000556:	4803      	ldr	r0, [pc, #12]	; (8000564 <main+0x74>)
 8000558:	f003 f8ad 	bl	80036b6 <HAL_UART_DMAResume>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x6c>
 800055e:	bf00      	nop
 8000560:	2000012c 	.word	0x2000012c
 8000564:	20000028 	.word	0x20000028
 8000568:	200000cc 	.word	0x200000cc
 800056c:	08000709 	.word	0x08000709

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b094      	sub	sp, #80	; 0x50
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2230      	movs	r2, #48	; 0x30
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 f9de 	bl	8004940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
 8000592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	4a22      	ldr	r2, [pc, #136]	; (8000628 <SystemClock_Config+0xb8>)
 800059e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a2:	6413      	str	r3, [r2, #64]	; 0x40
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <SystemClock_Config+0xb8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b0:	2300      	movs	r3, #0
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <SystemClock_Config+0xbc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xbc>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xbc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fae5 	bl	8002bb4 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 f8c8 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fd48 	bl	80030a4 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061a:	f000 f8b3 	bl	8000784 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_USART1_UART_Init+0x4c>)
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <MX_USART1_UART_Init+0x50>)
 8000638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_USART1_UART_Init+0x4c>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_USART1_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_USART1_UART_Init+0x4c>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_USART1_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_USART1_UART_Init+0x4c>)
 8000668:	f002 fefc 	bl	8003464 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000672:	f000 f887 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000028 	.word	0x20000028
 8000680:	40011000 	.word	0x40011000

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_DMA_Init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <MX_DMA_Init+0x4c>)
 8000694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_DMA_Init+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	203a      	movs	r0, #58	; 0x3a
 80006ac:	f000 fb2f 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80006b0:	203a      	movs	r0, #58	; 0x3a
 80006b2:	f000 fb48 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2046      	movs	r0, #70	; 0x46
 80006bc:	f000 fb27 	bl	8000d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80006c0:	2046      	movs	r0, #70	; 0x46
 80006c2:	f000 fb40 	bl	8000d46 <HAL_NVIC_EnableIRQ>

}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <MX_GPIO_Init+0x30>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_GPIO_Init+0x30>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800

08000708 <M1Callback>:

/* USER CODE BEGIN 4 */
void M1Callback(struct __DMA_HandleTypeDef * hdma)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	dmabufNum = 0;
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <M1Callback+0x1c>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	20000134 	.word	0x20000134

08000728 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a10      	ldr	r2, [pc, #64]	; (8000778 <HAL_UART_RxCpltCallback+0x50>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d119      	bne.n	800076e <HAL_UART_RxCpltCallback+0x46>
	{
		if(__HAL_UART_GET_FLAG(huart,UART_FLAG_IDLE) == 1){
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	2b10      	cmp	r3, #16
 8000746:	d10f      	bne.n	8000768 <HAL_UART_RxCpltCallback+0x40>
			__HAL_UART_CLEAR_FLAG(huart,UART_FLAG_IDLE);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f06f 0210 	mvn.w	r2, #16
 8000750:	601a      	str	r2, [r3, #0]
			UartRxDMANum = RX_BUFLEN - huart->hdmarx->Instance->NDTR;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	b29b      	uxth	r3, r3
 800075c:	f1c3 0303 	rsb	r3, r3, #3
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_UART_RxCpltCallback+0x54>)
 8000764:	801a      	strh	r2, [r3, #0]
			return;
 8000766:	e002      	b.n	800076e <HAL_UART_RxCpltCallback+0x46>
		}
		dmabufNum = 1;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_UART_RxCpltCallback+0x58>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
	}
}
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	40011000 	.word	0x40011000
 800077c:	20000132 	.word	0x20000132
 8000780:	20000134 	.word	0x20000134

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_MspInit+0x4c>)
 80007a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a4:	6453      	str	r3, [r2, #68]	; 0x44
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <HAL_MspInit+0x4c>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x4c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6413      	str	r3, [r2, #64]	; 0x40
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x4c>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800

080007e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a4d      	ldr	r2, [pc, #308]	; (8000934 <HAL_UART_MspInit+0x154>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	f040 8093 	bne.w	800092a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	4b4b      	ldr	r3, [pc, #300]	; (8000938 <HAL_UART_MspInit+0x158>)
 800080a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080c:	4a4a      	ldr	r2, [pc, #296]	; (8000938 <HAL_UART_MspInit+0x158>)
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6453      	str	r3, [r2, #68]	; 0x44
 8000814:	4b48      	ldr	r3, [pc, #288]	; (8000938 <HAL_UART_MspInit+0x158>)
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4b44      	ldr	r3, [pc, #272]	; (8000938 <HAL_UART_MspInit+0x158>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000828:	4a43      	ldr	r2, [pc, #268]	; (8000938 <HAL_UART_MspInit+0x158>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6313      	str	r3, [r2, #48]	; 0x30
 8000830:	4b41      	ldr	r3, [pc, #260]	; (8000938 <HAL_UART_MspInit+0x158>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800083c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800084e:	2307      	movs	r3, #7
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4838      	ldr	r0, [pc, #224]	; (800093c <HAL_UART_MspInit+0x15c>)
 800085a:	f001 ffff 	bl	800285c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <HAL_UART_MspInit+0x160>)
 8000860:	4a38      	ldr	r2, [pc, #224]	; (8000944 <HAL_UART_MspInit+0x164>)
 8000862:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000864:	4b36      	ldr	r3, [pc, #216]	; (8000940 <HAL_UART_MspInit+0x160>)
 8000866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800086a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <HAL_UART_MspInit+0x160>)
 800086e:	2240      	movs	r2, #64	; 0x40
 8000870:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000872:	4b33      	ldr	r3, [pc, #204]	; (8000940 <HAL_UART_MspInit+0x160>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000878:	4b31      	ldr	r3, [pc, #196]	; (8000940 <HAL_UART_MspInit+0x160>)
 800087a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800087e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <HAL_UART_MspInit+0x160>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <HAL_UART_MspInit+0x160>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <HAL_UART_MspInit+0x160>)
 800088e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000892:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000894:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <HAL_UART_MspInit+0x160>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_UART_MspInit+0x160>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008a0:	4827      	ldr	r0, [pc, #156]	; (8000940 <HAL_UART_MspInit+0x160>)
 80008a2:	f000 fa6b 	bl	8000d7c <HAL_DMA_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80008ac:	f7ff ff6a 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <HAL_UART_MspInit+0x160>)
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4a22      	ldr	r2, [pc, #136]	; (8000940 <HAL_UART_MspInit+0x160>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <HAL_UART_MspInit+0x16c>)
 80008c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_UART_MspInit+0x168>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <HAL_UART_MspInit+0x168>)
 8000900:	f000 fa3c 	bl	8000d7c <HAL_DMA_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800090a:	f7ff ff3b 	bl	8000784 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_UART_MspInit+0x168>)
 8000912:	639a      	str	r2, [r3, #56]	; 0x38
 8000914:	4a0c      	ldr	r2, [pc, #48]	; (8000948 <HAL_UART_MspInit+0x168>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2025      	movs	r0, #37	; 0x25
 8000920:	f000 f9f5 	bl	8000d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000924:	2025      	movs	r0, #37	; 0x25
 8000926:	f000 fa0e 	bl	8000d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40011000 	.word	0x40011000
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000
 8000940:	2000006c 	.word	0x2000006c
 8000944:	400264b8 	.word	0x400264b8
 8000948:	200000cc 	.word	0x200000cc
 800094c:	40026440 	.word	0x40026440

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8bc 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <USART1_IRQHandler+0x14>)
 80009aa:	f002 ff21 	bl	80037f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_RxCpltCallback(&huart1);
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <USART1_IRQHandler+0x14>)
 80009b0:	f7ff feba 	bl	8000728 <HAL_UART_RxCpltCallback>
  /* USER CODE END USART1_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000028 	.word	0x20000028

080009bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <DMA2_Stream2_IRQHandler+0x18>)
 80009c2:	f000 fb73 	bl	80010ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
  __HAL_UART_CLEAR_FLAG(&huart1,UART_FLAG_IDLE);
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <DMA2_Stream2_IRQHandler+0x1c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f06f 0210 	mvn.w	r2, #16
 80009ce:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200000cc 	.word	0x200000cc
 80009d8:	20000028 	.word	0x20000028

080009dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <DMA2_Stream7_IRQHandler+0x18>)
 80009e2:	f000 fb63 	bl	80010ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
  __HAL_UART_CLEAR_FLAG(&huart1,UART_FLAG_IDLE);
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <DMA2_Stream7_IRQHandler+0x1c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f06f 0210 	mvn.w	r2, #16
 80009ee:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000006c 	.word	0x2000006c
 80009f8:	20000028 	.word	0x20000028

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4a:	f7ff ffd7 	bl	80009fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f003 ff53 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd4d 	bl	80004f0 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a64:	08004998 	.word	0x08004998
  ldr r2, =_sbss
 8000a68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a6c:	2000013c 	.word	0x2000013c

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f92b 	bl	8000cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	200f      	movs	r0, #15
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fe72 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f943 	bl	8000d62 <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f000 f90b 	bl	8000d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000138 	.word	0x20000138

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000138 	.word	0x20000138

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	db0b      	blt.n	8000be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	f003 021f 	and.w	r2, r3, #31
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <__NVIC_EnableIRQ+0x38>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	095b      	lsrs	r3, r3, #5
 8000bdc:	2001      	movs	r0, #1
 8000bde:	fa00 f202 	lsl.w	r2, r0, r2
 8000be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc4:	d301      	bcc.n	8000cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e00f      	b.n	8000cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <SysTick_Config+0x40>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f7ff ff8e 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SysTick_Config+0x40>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <SysTick_Config+0x40>)
 8000ce4:	2207      	movs	r2, #7
 8000ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	e000e010 	.word	0xe000e010

08000cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff29 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b086      	sub	sp, #24
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
 8000d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d20:	f7ff ff3e 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	6978      	ldr	r0, [r7, #20]
 8000d2c:	f7ff ff8e 	bl	8000c4c <NVIC_EncodePriority>
 8000d30:	4602      	mov	r2, r0
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4611      	mov	r1, r2
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff5d 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3e:	bf00      	nop
 8000d40:	3718      	adds	r7, #24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff31 	bl	8000bbc <__NVIC_EnableIRQ>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff ffa2 	bl	8000cb4 <SysTick_Config>
 8000d70:	4603      	mov	r3, r0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff feda 	bl	8000b40 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e099      	b.n	8000ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 0201 	bic.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000db8:	e00f      	b.n	8000dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000dba:	f7ff fec1 	bl	8000b40 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b05      	cmp	r3, #5
 8000dc6:	d908      	bls.n	8000dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2220      	movs	r2, #32
 8000dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e078      	b.n	8000ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d1e8      	bne.n	8000dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <HAL_DMA_Init+0x158>)
 8000df4:	4013      	ands	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a1b      	ldr	r3, [r3, #32]
 8000e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d107      	bne.n	8000e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	697a      	ldr	r2, [r7, #20]
 8000e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f023 0307 	bic.w	r3, r3, #7
 8000e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	d117      	bne.n	8000e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00e      	beq.n	8000e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 fb01 	bl	8001488 <DMA_CheckFifoParam>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d008      	beq.n	8000e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2240      	movs	r2, #64	; 0x40
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e016      	b.n	8000ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fab8 	bl	800141c <DMA_CalcBaseAndBitshift>
 8000eac:	4603      	mov	r3, r0
 8000eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eb4:	223f      	movs	r2, #63	; 0x3f
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	f010803f 	.word	0xf010803f

08000ed8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
 8000ee4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d101      	bne.n	8000efe <HAL_DMA_Start_IT+0x26>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e040      	b.n	8000f80 <HAL_DMA_Start_IT+0xa8>
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d12f      	bne.n	8000f72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2202      	movs	r2, #2
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f000 fa4a 	bl	80013c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f30:	223f      	movs	r2, #63	; 0x3f
 8000f32:	409a      	lsls	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0216 	orr.w	r2, r2, #22
 8000f46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0208 	orr.w	r2, r2, #8
 8000f5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	e005      	b.n	8000f7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f96:	f7ff fdd3 	bl	8000b40 <HAL_GetTick>
 8000f9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d008      	beq.n	8000fba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e052      	b.n	8001060 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0216 	bic.w	r2, r2, #22
 8000fc8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fd8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <HAL_DMA_Abort+0x62>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d007      	beq.n	8000ffa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0208 	bic.w	r2, r2, #8
 8000ff8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0201 	bic.w	r2, r2, #1
 8001008:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800100a:	e013      	b.n	8001034 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100c:	f7ff fd98 	bl	8000b40 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b05      	cmp	r3, #5
 8001018:	d90c      	bls.n	8001034 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2220      	movs	r2, #32
 800101e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e015      	b.n	8001060 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1e4      	bne.n	800100c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001046:	223f      	movs	r2, #63	; 0x3f
 8001048:	409a      	lsls	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d004      	beq.n	8001086 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00c      	b.n	80010a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2205      	movs	r2, #5
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010b8:	4b8e      	ldr	r3, [pc, #568]	; (80012f4 <HAL_DMA_IRQHandler+0x248>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a8e      	ldr	r2, [pc, #568]	; (80012f8 <HAL_DMA_IRQHandler+0x24c>)
 80010be:	fba2 2303 	umull	r2, r3, r2, r3
 80010c2:	0a9b      	lsrs	r3, r3, #10
 80010c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d6:	2208      	movs	r2, #8
 80010d8:	409a      	lsls	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4013      	ands	r3, r2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d01a      	beq.n	8001118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0204 	bic.w	r2, r2, #4
 80010fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	2208      	movs	r2, #8
 8001106:	409a      	lsls	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111c:	2201      	movs	r2, #1
 800111e:	409a      	lsls	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d012      	beq.n	800114e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113a:	2201      	movs	r2, #1
 800113c:	409a      	lsls	r2, r3
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001146:	f043 0202 	orr.w	r2, r3, #2
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001152:	2204      	movs	r2, #4
 8001154:	409a      	lsls	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d012      	beq.n	8001184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00b      	beq.n	8001184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001170:	2204      	movs	r2, #4
 8001172:	409a      	lsls	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	f043 0204 	orr.w	r2, r3, #4
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001188:	2210      	movs	r2, #16
 800118a:	409a      	lsls	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d043      	beq.n	800121c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d03c      	beq.n	800121c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a6:	2210      	movs	r2, #16
 80011a8:	409a      	lsls	r2, r3
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d018      	beq.n	80011ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d108      	bne.n	80011dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d024      	beq.n	800121c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	4798      	blx	r3
 80011da:	e01f      	b.n	800121c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d01b      	beq.n	800121c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	4798      	blx	r3
 80011ec:	e016      	b.n	800121c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d107      	bne.n	800120c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0208 	bic.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001220:	2220      	movs	r2, #32
 8001222:	409a      	lsls	r2, r3
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 808f 	beq.w	800134c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8087 	beq.w	800134c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001242:	2220      	movs	r2, #32
 8001244:	409a      	lsls	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b05      	cmp	r3, #5
 8001254:	d136      	bne.n	80012c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0216 	bic.w	r2, r2, #22
 8001264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	695a      	ldr	r2, [r3, #20]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <HAL_DMA_IRQHandler+0x1da>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0208 	bic.w	r2, r2, #8
 8001294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	223f      	movs	r2, #63	; 0x3f
 800129c:	409a      	lsls	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d07e      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	4798      	blx	r3
        }
        return;
 80012c2:	e079      	b.n	80013b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01d      	beq.n	800130e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10d      	bne.n	80012fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d031      	beq.n	800134c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
 80012f0:	e02c      	b.n	800134c <HAL_DMA_IRQHandler+0x2a0>
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000
 80012f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d023      	beq.n	800134c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	4798      	blx	r3
 800130c:	e01e      	b.n	800134c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0210 	bic.w	r2, r2, #16
 800132a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	2b00      	cmp	r3, #0
 8001352:	d032      	beq.n	80013ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d022      	beq.n	80013a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2205      	movs	r2, #5
 8001364:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3301      	adds	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	d307      	bcc.n	8001394 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <HAL_DMA_IRQHandler+0x2cc>
 8001392:	e000      	b.n	8001396 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001394:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d005      	beq.n	80013ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
 80013b6:	e000      	b.n	80013ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80013b8:	bf00      	nop
    }
  }
}
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b40      	cmp	r3, #64	; 0x40
 80013ec:	d108      	bne.n	8001400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80013fe:	e007      	b.n	8001410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	60da      	str	r2, [r3, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3b10      	subs	r3, #16
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <DMA_CalcBaseAndBitshift+0x64>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <DMA_CalcBaseAndBitshift+0x68>)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d909      	bls.n	800145e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	1d1a      	adds	r2, r3, #4
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	659a      	str	r2, [r3, #88]	; 0x58
 800145c:	e007      	b.n	800146e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	aaaaaaab 	.word	0xaaaaaaab
 8001484:	08004980 	.word	0x08004980

08001488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11f      	bne.n	80014e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d856      	bhi.n	8001556 <DMA_CheckFifoParam+0xce>
 80014a8:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <DMA_CheckFifoParam+0x28>)
 80014aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ae:	bf00      	nop
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014d3 	.word	0x080014d3
 80014b8:	080014c1 	.word	0x080014c1
 80014bc:	08001557 	.word	0x08001557
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d046      	beq.n	800155a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014d0:	e043      	b.n	800155a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014da:	d140      	bne.n	800155e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014e0:	e03d      	b.n	800155e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014ea:	d121      	bne.n	8001530 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d837      	bhi.n	8001562 <DMA_CheckFifoParam+0xda>
 80014f2:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <DMA_CheckFifoParam+0x70>)
 80014f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f8:	08001509 	.word	0x08001509
 80014fc:	0800150f 	.word	0x0800150f
 8001500:	08001509 	.word	0x08001509
 8001504:	08001521 	.word	0x08001521
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
      break;
 800150c:	e030      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d025      	beq.n	8001566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800151e:	e022      	b.n	8001566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001528:	d11f      	bne.n	800156a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800152e:	e01c      	b.n	800156a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d903      	bls.n	800153e <DMA_CheckFifoParam+0xb6>
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d003      	beq.n	8001544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800153c:	e018      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
      break;
 8001542:	e015      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00e      	beq.n	800156e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
      break;
 8001554:	e00b      	b.n	800156e <DMA_CheckFifoParam+0xe6>
      break;
 8001556:	bf00      	nop
 8001558:	e00a      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      break;
 800155a:	bf00      	nop
 800155c:	e008      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      break;
 800155e:	bf00      	nop
 8001560:	e006      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      break;
 8001562:	bf00      	nop
 8001564:	e004      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      break;
 8001566:	bf00      	nop
 8001568:	e002      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      break;   
 800156a:	bf00      	nop
 800156c:	e000      	b.n	8001570 <DMA_CheckFifoParam+0xe8>
      break;
 800156e:	bf00      	nop
    }
  } 
  
  return status; 
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b80      	cmp	r3, #128	; 0x80
 8001598:	d106      	bne.n	80015a8 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	f001 b911 	b.w	80027ca <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2240      	movs	r2, #64	; 0x40
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f001 b8ff 	b.w	80027ca <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80015d6:	2302      	movs	r3, #2
 80015d8:	f001 b8f7 	b.w	80027ca <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	f041 80e5 	bne.w	80027bc <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2202      	movs	r2, #2
 80015f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800160e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f001 f8f6 	bl	8002810 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b8d      	ldr	r3, [pc, #564]	; (8001860 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800162c:	429a      	cmp	r2, r3
 800162e:	d960      	bls.n	80016f2 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d057      	beq.n	80016ea <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a8a      	ldr	r2, [pc, #552]	; (8001868 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d050      	beq.n	80016e6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a88      	ldr	r2, [pc, #544]	; (800186c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d049      	beq.n	80016e2 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a87      	ldr	r2, [pc, #540]	; (8001870 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d042      	beq.n	80016de <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a85      	ldr	r2, [pc, #532]	; (8001874 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d03a      	beq.n	80016d8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a84      	ldr	r2, [pc, #528]	; (8001878 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d032      	beq.n	80016d2 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a82      	ldr	r2, [pc, #520]	; (800187c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d02a      	beq.n	80016cc <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a81      	ldr	r2, [pc, #516]	; (8001880 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d022      	beq.n	80016c6 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a7f      	ldr	r2, [pc, #508]	; (8001884 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01a      	beq.n	80016c0 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7e      	ldr	r2, [pc, #504]	; (8001888 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d012      	beq.n	80016ba <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a7c      	ldr	r2, [pc, #496]	; (800188c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00a      	beq.n	80016b4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7b      	ldr	r2, [pc, #492]	; (8001890 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d102      	bne.n	80016ae <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80016a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016ac:	e01e      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80016b2:	e01b      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b8:	e018      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016be:	e015      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016c4:	e012      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ca:	e00f      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d0:	e00c      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d6:	e009      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016dc:	e006      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016de:	2320      	movs	r3, #32
 80016e0:	e004      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016e2:	2320      	movs	r3, #32
 80016e4:	e002      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016e6:	2320      	movs	r3, #32
 80016e8:	e000      	b.n	80016ec <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80016ea:	2320      	movs	r3, #32
 80016ec:	4a69      	ldr	r2, [pc, #420]	; (8001894 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80016ee:	60d3      	str	r3, [r2, #12]
 80016f0:	e14f      	b.n	8001992 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d960      	bls.n	80017c0 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d057      	beq.n	80017b8 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a56      	ldr	r2, [pc, #344]	; (8001868 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d050      	beq.n	80017b4 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a55      	ldr	r2, [pc, #340]	; (800186c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d049      	beq.n	80017b0 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a53      	ldr	r2, [pc, #332]	; (8001870 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d042      	beq.n	80017ac <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d03a      	beq.n	80017a6 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d032      	beq.n	80017a0 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a4f      	ldr	r2, [pc, #316]	; (800187c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d02a      	beq.n	800179a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d022      	beq.n	8001794 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d01a      	beq.n	800178e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a4a      	ldr	r2, [pc, #296]	; (8001888 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d012      	beq.n	8001788 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a49      	ldr	r2, [pc, #292]	; (800188c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00a      	beq.n	8001782 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a47      	ldr	r2, [pc, #284]	; (8001890 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d102      	bne.n	800177c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8001776:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800177a:	e01e      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800177c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001780:	e01b      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001782:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001786:	e018      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001788:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800178c:	e015      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800178e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001792:	e012      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001798:	e00f      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800179a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179e:	e00c      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a4:	e009      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017aa:	e006      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017ac:	2320      	movs	r3, #32
 80017ae:	e004      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017b0:	2320      	movs	r3, #32
 80017b2:	e002      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017b4:	2320      	movs	r3, #32
 80017b6:	e000      	b.n	80017ba <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80017b8:	2320      	movs	r3, #32
 80017ba:	4a36      	ldr	r2, [pc, #216]	; (8001894 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80017bc:	6093      	str	r3, [r2, #8]
 80017be:	e0e8      	b.n	8001992 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f240 8082 	bls.w	80018d2 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a24      	ldr	r2, [pc, #144]	; (8001864 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d078      	beq.n	80018ca <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	; (8001868 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d071      	beq.n	80018c6 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d06a      	beq.n	80018c2 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d063      	beq.n	80018be <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d05b      	beq.n	80018b8 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d053      	beq.n	80018b2 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1b      	ldr	r2, [pc, #108]	; (800187c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d04b      	beq.n	80018ac <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d043      	beq.n	80018a6 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a18      	ldr	r2, [pc, #96]	; (8001884 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d03b      	beq.n	80018a0 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a16      	ldr	r2, [pc, #88]	; (8001888 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d012      	beq.n	8001858 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d00a      	beq.n	8001852 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a13      	ldr	r2, [pc, #76]	; (8001890 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d102      	bne.n	800184c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8001846:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800184a:	e03f      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800184c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001850:	e03c      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001852:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001856:	e039      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001858:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800185c:	e036      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800185e:	bf00      	nop
 8001860:	40026458 	.word	0x40026458
 8001864:	40026010 	.word	0x40026010
 8001868:	40026410 	.word	0x40026410
 800186c:	40026070 	.word	0x40026070
 8001870:	40026470 	.word	0x40026470
 8001874:	40026028 	.word	0x40026028
 8001878:	40026428 	.word	0x40026428
 800187c:	40026088 	.word	0x40026088
 8001880:	40026488 	.word	0x40026488
 8001884:	40026040 	.word	0x40026040
 8001888:	40026440 	.word	0x40026440
 800188c:	400260a0 	.word	0x400260a0
 8001890:	400264a0 	.word	0x400264a0
 8001894:	40026400 	.word	0x40026400
 8001898:	400260b8 	.word	0x400260b8
 800189c:	40026058 	.word	0x40026058
 80018a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018a4:	e012      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018aa:	e00f      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b0:	e00c      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018b6:	e009      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018bc:	e006      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018be:	2320      	movs	r3, #32
 80018c0:	e004      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018c2:	2320      	movs	r3, #32
 80018c4:	e002      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018c6:	2320      	movs	r3, #32
 80018c8:	e000      	b.n	80018cc <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80018ca:	2320      	movs	r3, #32
 80018cc:	4a8c      	ldr	r2, [pc, #560]	; (8001b00 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80018ce:	60d3      	str	r3, [r2, #12]
 80018d0:	e05f      	b.n	8001992 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a8b      	ldr	r2, [pc, #556]	; (8001b04 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d057      	beq.n	800198c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a89      	ldr	r2, [pc, #548]	; (8001b08 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d050      	beq.n	8001988 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a88      	ldr	r2, [pc, #544]	; (8001b0c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d049      	beq.n	8001984 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a86      	ldr	r2, [pc, #536]	; (8001b10 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d042      	beq.n	8001980 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a85      	ldr	r2, [pc, #532]	; (8001b14 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d03a      	beq.n	800197a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a83      	ldr	r2, [pc, #524]	; (8001b18 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d032      	beq.n	8001974 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a82      	ldr	r2, [pc, #520]	; (8001b1c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d02a      	beq.n	800196e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a80      	ldr	r2, [pc, #512]	; (8001b20 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d022      	beq.n	8001968 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7f      	ldr	r2, [pc, #508]	; (8001b24 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d01a      	beq.n	8001962 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a7d      	ldr	r2, [pc, #500]	; (8001b28 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d012      	beq.n	800195c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7c      	ldr	r2, [pc, #496]	; (8001b2c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d00a      	beq.n	8001956 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a7a      	ldr	r2, [pc, #488]	; (8001b30 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d102      	bne.n	8001950 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 800194a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800194e:	e01e      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001950:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001954:	e01b      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001956:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800195a:	e018      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800195c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001960:	e015      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001962:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001966:	e012      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800196c:	e00f      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800196e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001972:	e00c      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001978:	e009      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800197a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800197e:	e006      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001980:	2320      	movs	r3, #32
 8001982:	e004      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001984:	2320      	movs	r3, #32
 8001986:	e002      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001988:	2320      	movs	r3, #32
 800198a:	e000      	b.n	800198e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800198c:	2320      	movs	r3, #32
 800198e:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8001990:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800199a:	429a      	cmp	r2, r3
 800199c:	d960      	bls.n	8001a60 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d057      	beq.n	8001a58 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a56      	ldr	r2, [pc, #344]	; (8001b08 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d050      	beq.n	8001a54 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d049      	beq.n	8001a50 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a53      	ldr	r2, [pc, #332]	; (8001b10 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d042      	beq.n	8001a4c <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d03a      	beq.n	8001a46 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d032      	beq.n	8001a40 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d02a      	beq.n	8001a3a <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a4d      	ldr	r2, [pc, #308]	; (8001b20 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d022      	beq.n	8001a34 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a4c      	ldr	r2, [pc, #304]	; (8001b24 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d01a      	beq.n	8001a2e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d012      	beq.n	8001a28 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00a      	beq.n	8001a22 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a47      	ldr	r2, [pc, #284]	; (8001b30 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d102      	bne.n	8001a1c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8001a16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a1a:	e01e      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a20:	e01b      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a26:	e018      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a2c:	e015      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a32:	e012      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a38:	e00f      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a3e:	e00c      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a44:	e009      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a4a:	e006      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a4c:	2310      	movs	r3, #16
 8001a4e:	e004      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a50:	2310      	movs	r3, #16
 8001a52:	e002      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a54:	2310      	movs	r3, #16
 8001a56:	e000      	b.n	8001a5a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001a58:	2310      	movs	r3, #16
 8001a5a:	4a37      	ldr	r2, [pc, #220]	; (8001b38 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001a5c:	60d3      	str	r3, [r2, #12]
 8001a5e:	e14f      	b.n	8001d00 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f240 8082 	bls.w	8001b72 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a24      	ldr	r2, [pc, #144]	; (8001b04 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d078      	beq.n	8001b6a <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d071      	beq.n	8001b66 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d06a      	beq.n	8001b62 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d063      	beq.n	8001b5e <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d05b      	beq.n	8001b58 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1c      	ldr	r2, [pc, #112]	; (8001b18 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d053      	beq.n	8001b52 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d04b      	beq.n	8001b4c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a19      	ldr	r2, [pc, #100]	; (8001b20 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d043      	beq.n	8001b46 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a18      	ldr	r2, [pc, #96]	; (8001b24 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d03b      	beq.n	8001b40 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a16      	ldr	r2, [pc, #88]	; (8001b28 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d012      	beq.n	8001af8 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00a      	beq.n	8001af2 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d102      	bne.n	8001aec <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8001ae6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001aea:	e03f      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001aec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001af0:	e03c      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001af2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001af6:	e039      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001af8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001afc:	e036      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001afe:	bf00      	nop
 8001b00:	40026000 	.word	0x40026000
 8001b04:	40026010 	.word	0x40026010
 8001b08:	40026410 	.word	0x40026410
 8001b0c:	40026070 	.word	0x40026070
 8001b10:	40026470 	.word	0x40026470
 8001b14:	40026028 	.word	0x40026028
 8001b18:	40026428 	.word	0x40026428
 8001b1c:	40026088 	.word	0x40026088
 8001b20:	40026488 	.word	0x40026488
 8001b24:	40026040 	.word	0x40026040
 8001b28:	40026440 	.word	0x40026440
 8001b2c:	400260a0 	.word	0x400260a0
 8001b30:	400264a0 	.word	0x400264a0
 8001b34:	40026458 	.word	0x40026458
 8001b38:	40026400 	.word	0x40026400
 8001b3c:	400260b8 	.word	0x400260b8
 8001b40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b44:	e012      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b4a:	e00f      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	e00c      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	e009      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5c:	e006      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b5e:	2310      	movs	r3, #16
 8001b60:	e004      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b62:	2310      	movs	r3, #16
 8001b64:	e002      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b66:	2310      	movs	r3, #16
 8001b68:	e000      	b.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001b6a:	2310      	movs	r3, #16
 8001b6c:	4a8c      	ldr	r2, [pc, #560]	; (8001da0 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8001b6e:	6093      	str	r3, [r2, #8]
 8001b70:	e0c6      	b.n	8001d00 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b8a      	ldr	r3, [pc, #552]	; (8001da4 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d960      	bls.n	8001c40 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a89      	ldr	r2, [pc, #548]	; (8001da8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d057      	beq.n	8001c38 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d050      	beq.n	8001c34 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a86      	ldr	r2, [pc, #536]	; (8001db0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d049      	beq.n	8001c30 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a84      	ldr	r2, [pc, #528]	; (8001db4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d042      	beq.n	8001c2c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a83      	ldr	r2, [pc, #524]	; (8001db8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d03a      	beq.n	8001c26 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a81      	ldr	r2, [pc, #516]	; (8001dbc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d032      	beq.n	8001c20 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a80      	ldr	r2, [pc, #512]	; (8001dc0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d02a      	beq.n	8001c1a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7e      	ldr	r2, [pc, #504]	; (8001dc4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d022      	beq.n	8001c14 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7d      	ldr	r2, [pc, #500]	; (8001dc8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d01a      	beq.n	8001c0e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a7b      	ldr	r2, [pc, #492]	; (8001dcc <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d012      	beq.n	8001c08 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00a      	beq.n	8001c02 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a78      	ldr	r2, [pc, #480]	; (8001dd4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d102      	bne.n	8001bfc <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8001bf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001bfa:	e01e      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001bfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c00:	e01b      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c06:	e018      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c0c:	e015      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c12:	e012      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c18:	e00f      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1e:	e00c      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c24:	e009      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	e006      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c2c:	2310      	movs	r3, #16
 8001c2e:	e004      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c30:	2310      	movs	r3, #16
 8001c32:	e002      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c34:	2310      	movs	r3, #16
 8001c36:	e000      	b.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8001c38:	2310      	movs	r3, #16
 8001c3a:	4a67      	ldr	r2, [pc, #412]	; (8001dd8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8001c3c:	60d3      	str	r3, [r2, #12]
 8001c3e:	e05f      	b.n	8001d00 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a58      	ldr	r2, [pc, #352]	; (8001da8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d057      	beq.n	8001cfa <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a57      	ldr	r2, [pc, #348]	; (8001dac <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d050      	beq.n	8001cf6 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d049      	beq.n	8001cf2 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d042      	beq.n	8001cee <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d03a      	beq.n	8001ce8 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d032      	beq.n	8001ce2 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a4f      	ldr	r2, [pc, #316]	; (8001dc0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d02a      	beq.n	8001cdc <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a4e      	ldr	r2, [pc, #312]	; (8001dc4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d022      	beq.n	8001cd6 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a4c      	ldr	r2, [pc, #304]	; (8001dc8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d01a      	beq.n	8001cd0 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d012      	beq.n	8001cca <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a49      	ldr	r2, [pc, #292]	; (8001dd0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00a      	beq.n	8001cc4 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a48      	ldr	r2, [pc, #288]	; (8001dd4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d102      	bne.n	8001cbe <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8001cb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cbc:	e01e      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cc2:	e01b      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc8:	e018      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cce:	e015      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cd4:	e012      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cda:	e00f      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce0:	e00c      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ce6:	e009      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cec:	e006      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cee:	2310      	movs	r3, #16
 8001cf0:	e004      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	e002      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cf6:	2310      	movs	r3, #16
 8001cf8:	e000      	b.n	8001cfc <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8001cfa:	2310      	movs	r3, #16
 8001cfc:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8001cfe:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f240 8082 	bls.w	8001e12 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d078      	beq.n	8001e0a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a23      	ldr	r2, [pc, #140]	; (8001dac <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d071      	beq.n	8001e06 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d06a      	beq.n	8001e02 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d063      	beq.n	8001dfe <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1f      	ldr	r2, [pc, #124]	; (8001db8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d05b      	beq.n	8001df8 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d053      	beq.n	8001df2 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d04b      	beq.n	8001dec <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d043      	beq.n	8001de6 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d03b      	beq.n	8001de0 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d012      	beq.n	8001d98 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00a      	beq.n	8001d92 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d102      	bne.n	8001d8c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8001d86:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d8a:	e03f      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d90:	e03c      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001d92:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d96:	e039      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001d98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001d9c:	e036      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001d9e:	bf00      	nop
 8001da0:	40026400 	.word	0x40026400
 8001da4:	40026058 	.word	0x40026058
 8001da8:	40026010 	.word	0x40026010
 8001dac:	40026410 	.word	0x40026410
 8001db0:	40026070 	.word	0x40026070
 8001db4:	40026470 	.word	0x40026470
 8001db8:	40026028 	.word	0x40026028
 8001dbc:	40026428 	.word	0x40026428
 8001dc0:	40026088 	.word	0x40026088
 8001dc4:	40026488 	.word	0x40026488
 8001dc8:	40026040 	.word	0x40026040
 8001dcc:	40026440 	.word	0x40026440
 8001dd0:	400260a0 	.word	0x400260a0
 8001dd4:	400264a0 	.word	0x400264a0
 8001dd8:	40026000 	.word	0x40026000
 8001ddc:	40026458 	.word	0x40026458
 8001de0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001de4:	e012      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dea:	e00f      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df0:	e00c      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001df6:	e009      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfc:	e006      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001dfe:	2308      	movs	r3, #8
 8001e00:	e004      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001e02:	2308      	movs	r3, #8
 8001e04:	e002      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001e06:	2308      	movs	r3, #8
 8001e08:	e000      	b.n	8001e0c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8001e0a:	2308      	movs	r3, #8
 8001e0c:	4a8c      	ldr	r2, [pc, #560]	; (8002040 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8001e0e:	60d3      	str	r3, [r2, #12]
 8001e10:	e14e      	b.n	80020b0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	4b8a      	ldr	r3, [pc, #552]	; (8002044 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d960      	bls.n	8001ee0 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a89      	ldr	r2, [pc, #548]	; (8002048 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d057      	beq.n	8001ed8 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d050      	beq.n	8001ed4 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a86      	ldr	r2, [pc, #536]	; (8002050 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d049      	beq.n	8001ed0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a84      	ldr	r2, [pc, #528]	; (8002054 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d042      	beq.n	8001ecc <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a83      	ldr	r2, [pc, #524]	; (8002058 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d03a      	beq.n	8001ec6 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a81      	ldr	r2, [pc, #516]	; (800205c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d032      	beq.n	8001ec0 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a80      	ldr	r2, [pc, #512]	; (8002060 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d02a      	beq.n	8001eba <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7e      	ldr	r2, [pc, #504]	; (8002064 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d022      	beq.n	8001eb4 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a7d      	ldr	r2, [pc, #500]	; (8002068 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d01a      	beq.n	8001eae <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a7b      	ldr	r2, [pc, #492]	; (800206c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d012      	beq.n	8001ea8 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a7a      	ldr	r2, [pc, #488]	; (8002070 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a78      	ldr	r2, [pc, #480]	; (8002074 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d102      	bne.n	8001e9c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8001e96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001e9a:	e01e      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea0:	e01b      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ea2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001ea6:	e018      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001eac:	e015      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001eae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001eb2:	e012      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001eb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb8:	e00f      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebe:	e00c      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec4:	e009      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ec6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eca:	e006      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ecc:	2308      	movs	r3, #8
 8001ece:	e004      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	e002      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	e000      	b.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8001ed8:	2308      	movs	r3, #8
 8001eda:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8001edc:	6093      	str	r3, [r2, #8]
 8001ede:	e0e7      	b.n	80020b0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d960      	bls.n	8001fae <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a55      	ldr	r2, [pc, #340]	; (8002048 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d057      	beq.n	8001fa6 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d050      	beq.n	8001fa2 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d049      	beq.n	8001f9e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d042      	beq.n	8001f9a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d03a      	beq.n	8001f94 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a4e      	ldr	r2, [pc, #312]	; (800205c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d032      	beq.n	8001f8e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	; (8002060 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02a      	beq.n	8001f88 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a4b      	ldr	r2, [pc, #300]	; (8002064 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d022      	beq.n	8001f82 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01a      	beq.n	8001f7c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d012      	beq.n	8001f76 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00a      	beq.n	8001f70 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d102      	bne.n	8001f6a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8001f64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f68:	e01e      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6e:	e01b      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f74:	e018      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f7a:	e015      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f80:	e012      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f86:	e00f      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8c:	e00c      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f92:	e009      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f98:	e006      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	e004      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	e002      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	e000      	b.n	8001fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8001fa6:	2308      	movs	r3, #8
 8001fa8:	4a34      	ldr	r2, [pc, #208]	; (800207c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8001faa:	60d3      	str	r3, [r2, #12]
 8001fac:	e080      	b.n	80020b0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d078      	beq.n	80020aa <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a23      	ldr	r2, [pc, #140]	; (800204c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d071      	beq.n	80020a6 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d06a      	beq.n	80020a2 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d063      	beq.n	800209e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d05b      	beq.n	8002098 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1d      	ldr	r2, [pc, #116]	; (800205c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d053      	beq.n	8002092 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d04b      	beq.n	800208c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d043      	beq.n	8002086 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d03b      	beq.n	8002080 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d012      	beq.n	8002038 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a16      	ldr	r2, [pc, #88]	; (8002070 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00a      	beq.n	8002032 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a14      	ldr	r2, [pc, #80]	; (8002074 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d102      	bne.n	800202c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002026:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800202a:	e03f      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800202c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002030:	e03c      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002032:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002036:	e039      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002038:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800203c:	e036      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800203e:	bf00      	nop
 8002040:	40026400 	.word	0x40026400
 8002044:	400260b8 	.word	0x400260b8
 8002048:	40026010 	.word	0x40026010
 800204c:	40026410 	.word	0x40026410
 8002050:	40026070 	.word	0x40026070
 8002054:	40026470 	.word	0x40026470
 8002058:	40026028 	.word	0x40026028
 800205c:	40026428 	.word	0x40026428
 8002060:	40026088 	.word	0x40026088
 8002064:	40026488 	.word	0x40026488
 8002068:	40026040 	.word	0x40026040
 800206c:	40026440 	.word	0x40026440
 8002070:	400260a0 	.word	0x400260a0
 8002074:	400264a0 	.word	0x400264a0
 8002078:	40026058 	.word	0x40026058
 800207c:	40026000 	.word	0x40026000
 8002080:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002084:	e012      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002086:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208a:	e00f      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800208c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002090:	e00c      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002096:	e009      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800209c:	e006      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800209e:	2308      	movs	r3, #8
 80020a0:	e004      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e002      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80020a6:	2308      	movs	r3, #8
 80020a8:	e000      	b.n	80020ac <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80020aa:	2308      	movs	r3, #8
 80020ac:	4a8a      	ldr	r2, [pc, #552]	; (80022d8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80020ae:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b89      	ldr	r3, [pc, #548]	; (80022dc <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d960      	bls.n	800217e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a87      	ldr	r2, [pc, #540]	; (80022e0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d057      	beq.n	8002176 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a86      	ldr	r2, [pc, #536]	; (80022e4 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d050      	beq.n	8002172 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a84      	ldr	r2, [pc, #528]	; (80022e8 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d049      	beq.n	800216e <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a83      	ldr	r2, [pc, #524]	; (80022ec <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d042      	beq.n	800216a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a81      	ldr	r2, [pc, #516]	; (80022f0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03a      	beq.n	8002164 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a80      	ldr	r2, [pc, #512]	; (80022f4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d032      	beq.n	800215e <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d02a      	beq.n	8002158 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7d      	ldr	r2, [pc, #500]	; (80022fc <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7b      	ldr	r2, [pc, #492]	; (8002300 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01a      	beq.n	800214c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d012      	beq.n	8002146 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a78      	ldr	r2, [pc, #480]	; (8002308 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00a      	beq.n	8002140 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002134:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002138:	e01e      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800213a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213e:	e01b      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002140:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002144:	e018      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002146:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800214a:	e015      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800214c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002150:	e012      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002156:	e00f      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002158:	f44f 7380 	mov.w	r3, #256	; 0x100
 800215c:	e00c      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800215e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002162:	e009      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002168:	e006      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800216a:	2304      	movs	r3, #4
 800216c:	e004      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800216e:	2304      	movs	r3, #4
 8002170:	e002      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002172:	2304      	movs	r3, #4
 8002174:	e000      	b.n	8002178 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002176:	2304      	movs	r3, #4
 8002178:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800217a:	60d3      	str	r3, [r2, #12]
 800217c:	e150      	b.n	8002420 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b63      	ldr	r3, [pc, #396]	; (8002314 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002186:	429a      	cmp	r2, r3
 8002188:	d960      	bls.n	800224c <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a54      	ldr	r2, [pc, #336]	; (80022e0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d057      	beq.n	8002244 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d050      	beq.n	8002240 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a51      	ldr	r2, [pc, #324]	; (80022e8 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d049      	beq.n	800223c <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	; (80022ec <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d042      	beq.n	8002238 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4e      	ldr	r2, [pc, #312]	; (80022f0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d03a      	beq.n	8002232 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4c      	ldr	r2, [pc, #304]	; (80022f4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d032      	beq.n	800222c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d02a      	beq.n	8002226 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a49      	ldr	r2, [pc, #292]	; (80022fc <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d022      	beq.n	8002220 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a48      	ldr	r2, [pc, #288]	; (8002300 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d01a      	beq.n	800221a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a46      	ldr	r2, [pc, #280]	; (8002304 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d012      	beq.n	8002214 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a45      	ldr	r2, [pc, #276]	; (8002308 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00a      	beq.n	800220e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a43      	ldr	r2, [pc, #268]	; (800230c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d102      	bne.n	8002208 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8002202:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002206:	e01e      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800220c:	e01b      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800220e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002212:	e018      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002218:	e015      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800221a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800221e:	e012      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	e00f      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222a:	e00c      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800222c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002230:	e009      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002236:	e006      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002238:	2304      	movs	r3, #4
 800223a:	e004      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800223c:	2304      	movs	r3, #4
 800223e:	e002      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002240:	2304      	movs	r3, #4
 8002242:	e000      	b.n	8002246 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002244:	2304      	movs	r3, #4
 8002246:	4a32      	ldr	r2, [pc, #200]	; (8002310 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e0e9      	b.n	8002420 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002254:	429a      	cmp	r2, r3
 8002256:	f240 8083 	bls.w	8002360 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d079      	beq.n	8002358 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d072      	beq.n	8002354 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d06b      	beq.n	8002350 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1b      	ldr	r2, [pc, #108]	; (80022ec <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d064      	beq.n	800234c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1a      	ldr	r2, [pc, #104]	; (80022f0 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d05c      	beq.n	8002346 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d054      	beq.n	8002340 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04c      	beq.n	800233a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d044      	beq.n	8002334 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d03c      	beq.n	800232e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a12      	ldr	r2, [pc, #72]	; (8002304 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d034      	beq.n	8002328 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d02c      	beq.n	8002322 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d124      	bne.n	800231c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80022d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022d6:	e040      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80022d8:	40026000 	.word	0x40026000
 80022dc:	40026458 	.word	0x40026458
 80022e0:	40026010 	.word	0x40026010
 80022e4:	40026410 	.word	0x40026410
 80022e8:	40026070 	.word	0x40026070
 80022ec:	40026470 	.word	0x40026470
 80022f0:	40026028 	.word	0x40026028
 80022f4:	40026428 	.word	0x40026428
 80022f8:	40026088 	.word	0x40026088
 80022fc:	40026488 	.word	0x40026488
 8002300:	40026040 	.word	0x40026040
 8002304:	40026440 	.word	0x40026440
 8002308:	400260a0 	.word	0x400260a0
 800230c:	400264a0 	.word	0x400264a0
 8002310:	40026400 	.word	0x40026400
 8002314:	400260b8 	.word	0x400260b8
 8002318:	40026058 	.word	0x40026058
 800231c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002320:	e01b      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002322:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002326:	e018      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800232c:	e015      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800232e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002332:	e012      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002338:	e00f      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800233a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233e:	e00c      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002344:	e009      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800234a:	e006      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800234c:	2304      	movs	r3, #4
 800234e:	e004      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002350:	2304      	movs	r3, #4
 8002352:	e002      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002354:	2304      	movs	r3, #4
 8002356:	e000      	b.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002358:	2304      	movs	r3, #4
 800235a:	4a8b      	ldr	r2, [pc, #556]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800235c:	60d3      	str	r3, [r2, #12]
 800235e:	e05f      	b.n	8002420 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a89      	ldr	r2, [pc, #548]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d057      	beq.n	800241a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a88      	ldr	r2, [pc, #544]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d050      	beq.n	8002416 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a86      	ldr	r2, [pc, #536]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d049      	beq.n	8002412 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a85      	ldr	r2, [pc, #532]	; (8002598 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d042      	beq.n	800240e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a83      	ldr	r2, [pc, #524]	; (800259c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d03a      	beq.n	8002408 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a82      	ldr	r2, [pc, #520]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d032      	beq.n	8002402 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a80      	ldr	r2, [pc, #512]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02a      	beq.n	80023fc <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a7f      	ldr	r2, [pc, #508]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d022      	beq.n	80023f6 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a7d      	ldr	r2, [pc, #500]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01a      	beq.n	80023f0 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7c      	ldr	r2, [pc, #496]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d012      	beq.n	80023ea <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00a      	beq.n	80023e4 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d102      	bne.n	80023de <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80023d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023dc:	e01e      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80023de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023e2:	e01b      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80023e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023e8:	e018      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80023ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023ee:	e015      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80023f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023f4:	e012      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80023f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fa:	e00f      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80023fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002400:	e00c      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002402:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002406:	e009      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800240c:	e006      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800240e:	2304      	movs	r3, #4
 8002410:	e004      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002412:	2304      	movs	r3, #4
 8002414:	e002      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002416:	2304      	movs	r3, #4
 8002418:	e000      	b.n	800241c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800241a:	2304      	movs	r3, #4
 800241c:	4a5a      	ldr	r2, [pc, #360]	; (8002588 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800241e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	461a      	mov	r2, r3
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8002428:	429a      	cmp	r2, r3
 800242a:	d95c      	bls.n	80024e6 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a56      	ldr	r2, [pc, #344]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d053      	beq.n	80024de <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a55      	ldr	r2, [pc, #340]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d04c      	beq.n	80024da <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a53      	ldr	r2, [pc, #332]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d045      	beq.n	80024d6 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d03e      	beq.n	80024d2 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d037      	beq.n	80024ce <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d030      	beq.n	80024ca <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a4d      	ldr	r2, [pc, #308]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d029      	beq.n	80024c6 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a4a      	ldr	r2, [pc, #296]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01a      	beq.n	80024bc <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a49      	ldr	r2, [pc, #292]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d012      	beq.n	80024b6 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00a      	beq.n	80024b0 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a46      	ldr	r2, [pc, #280]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d102      	bne.n	80024aa <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80024a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a8:	e01a      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ae:	e017      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	e014      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ba:	e011      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c0:	e00e      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024c2:	2340      	movs	r3, #64	; 0x40
 80024c4:	e00c      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024c6:	2340      	movs	r3, #64	; 0x40
 80024c8:	e00a      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	e008      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024ce:	2340      	movs	r3, #64	; 0x40
 80024d0:	e006      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e004      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e002      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80024de:	2301      	movs	r3, #1
 80024e0:	4a37      	ldr	r2, [pc, #220]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80024e2:	60d3      	str	r3, [r2, #12]
 80024e4:	e141      	b.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d97c      	bls.n	80025ec <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a25      	ldr	r2, [pc, #148]	; (800258c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d073      	beq.n	80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d06c      	beq.n	80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d065      	beq.n	80025dc <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d05e      	beq.n	80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d057      	beq.n	80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d050      	beq.n	80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a1c      	ldr	r2, [pc, #112]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d049      	beq.n	80025cc <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d042      	beq.n	80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d01a      	beq.n	8002582 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d012      	beq.n	800257c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00a      	beq.n	8002576 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d102      	bne.n	8002570 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800256a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800256e:	e03a      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002570:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002574:	e037      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800257a:	e034      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800257c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002580:	e031      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002586:	e02e      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002588:	40026000 	.word	0x40026000
 800258c:	40026010 	.word	0x40026010
 8002590:	40026410 	.word	0x40026410
 8002594:	40026070 	.word	0x40026070
 8002598:	40026470 	.word	0x40026470
 800259c:	40026028 	.word	0x40026028
 80025a0:	40026428 	.word	0x40026428
 80025a4:	40026088 	.word	0x40026088
 80025a8:	40026488 	.word	0x40026488
 80025ac:	40026040 	.word	0x40026040
 80025b0:	40026440 	.word	0x40026440
 80025b4:	400260a0 	.word	0x400260a0
 80025b8:	400264a0 	.word	0x400264a0
 80025bc:	40026458 	.word	0x40026458
 80025c0:	40026400 	.word	0x40026400
 80025c4:	400260b8 	.word	0x400260b8
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	e00c      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025cc:	2340      	movs	r3, #64	; 0x40
 80025ce:	e00a      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025d0:	2340      	movs	r3, #64	; 0x40
 80025d2:	e008      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025d4:	2340      	movs	r3, #64	; 0x40
 80025d6:	e006      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025d8:	2301      	movs	r3, #1
 80025da:	e004      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025dc:	2301      	movs	r3, #1
 80025de:	e002      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80025e4:	2301      	movs	r3, #1
 80025e6:	4a7b      	ldr	r2, [pc, #492]	; (80027d4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80025e8:	6093      	str	r3, [r2, #8]
 80025ea:	e0be      	b.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b79      	ldr	r3, [pc, #484]	; (80027d8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d95c      	bls.n	80026b2 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a77      	ldr	r2, [pc, #476]	; (80027dc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d053      	beq.n	80026aa <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a76      	ldr	r2, [pc, #472]	; (80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d04c      	beq.n	80026a6 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a74      	ldr	r2, [pc, #464]	; (80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d045      	beq.n	80026a2 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03e      	beq.n	800269e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a71      	ldr	r2, [pc, #452]	; (80027ec <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d037      	beq.n	800269a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a70      	ldr	r2, [pc, #448]	; (80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d030      	beq.n	8002696 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a6e      	ldr	r2, [pc, #440]	; (80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d029      	beq.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a6d      	ldr	r2, [pc, #436]	; (80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d022      	beq.n	800268e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a6b      	ldr	r2, [pc, #428]	; (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d01a      	beq.n	8002688 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6a      	ldr	r2, [pc, #424]	; (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d012      	beq.n	8002682 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a68      	ldr	r2, [pc, #416]	; (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d00a      	beq.n	800267c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a67      	ldr	r2, [pc, #412]	; (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d102      	bne.n	8002676 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8002670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002674:	e01a      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267a:	e017      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800267c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002680:	e014      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002686:	e011      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268c:	e00e      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800268e:	2340      	movs	r3, #64	; 0x40
 8002690:	e00c      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002692:	2340      	movs	r3, #64	; 0x40
 8002694:	e00a      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002696:	2340      	movs	r3, #64	; 0x40
 8002698:	e008      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	e006      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800269e:	2301      	movs	r3, #1
 80026a0:	e004      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e002      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80026aa:	2301      	movs	r3, #1
 80026ac:	4a57      	ldr	r2, [pc, #348]	; (800280c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80026ae:	60d3      	str	r3, [r2, #12]
 80026b0:	e05b      	b.n	800276a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a49      	ldr	r2, [pc, #292]	; (80027dc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d053      	beq.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a47      	ldr	r2, [pc, #284]	; (80027e0 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d04c      	beq.n	8002760 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a46      	ldr	r2, [pc, #280]	; (80027e4 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d045      	beq.n	800275c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a44      	ldr	r2, [pc, #272]	; (80027e8 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d03e      	beq.n	8002758 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a43      	ldr	r2, [pc, #268]	; (80027ec <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d037      	beq.n	8002754 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a41      	ldr	r2, [pc, #260]	; (80027f0 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d030      	beq.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a40      	ldr	r2, [pc, #256]	; (80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d029      	beq.n	800274c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a3e      	ldr	r2, [pc, #248]	; (80027f8 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d022      	beq.n	8002748 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d01a      	beq.n	8002742 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d012      	beq.n	800273c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a3a      	ldr	r2, [pc, #232]	; (8002804 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00a      	beq.n	8002736 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a38      	ldr	r2, [pc, #224]	; (8002808 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d102      	bne.n	8002730 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800272a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272e:	e01a      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002730:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002734:	e017      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800273a:	e014      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800273c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002740:	e011      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002746:	e00e      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	e00c      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800274c:	2340      	movs	r3, #64	; 0x40
 800274e:	e00a      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002750:	2340      	movs	r3, #64	; 0x40
 8002752:	e008      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002754:	2340      	movs	r3, #64	; 0x40
 8002756:	e006      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002758:	2301      	movs	r3, #1
 800275a:	e004      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800275c:	2301      	movs	r3, #1
 800275e:	e002      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002764:	2301      	movs	r3, #1
 8002766:	4a29      	ldr	r2, [pc, #164]	; (800280c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8002768:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0216 	orr.w	r2, r2, #22
 8002778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d103      	bne.n	800279a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 0208 	orr.w	r2, r2, #8
 80027a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e005      	b.n	80027c8 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
 80027c6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40026400 	.word	0x40026400
 80027d8:	40026058 	.word	0x40026058
 80027dc:	40026010 	.word	0x40026010
 80027e0:	40026410 	.word	0x40026410
 80027e4:	40026070 	.word	0x40026070
 80027e8:	40026470 	.word	0x40026470
 80027ec:	40026028 	.word	0x40026028
 80027f0:	40026428 	.word	0x40026428
 80027f4:	40026088 	.word	0x40026088
 80027f8:	40026488 	.word	0x40026488
 80027fc:	40026040 	.word	0x40026040
 8002800:	40026440 	.word	0x40026440
 8002804:	400260a0 	.word	0x400260a0
 8002808:	400264a0 	.word	0x400264a0
 800280c:	40026000 	.word	0x40026000

08002810 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d108      	bne.n	8002840 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800283e:	e007      	b.n	8002850 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e177      	b.n	8002b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	f040 8166 	bne.w	8002b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d005      	beq.n	80028ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d130      	bne.n	8002910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	2203      	movs	r2, #3
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e4:	2201      	movs	r2, #1
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f003 0201 	and.w	r2, r3, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	2b03      	cmp	r3, #3
 800291a:	d017      	beq.n	800294c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d123      	bne.n	80029a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80c0 	beq.w	8002b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <HAL_GPIO_Init+0x324>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_GPIO_Init+0x324>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <HAL_GPIO_Init+0x324>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fe:	4a61      	ldr	r2, [pc, #388]	; (8002b84 <HAL_GPIO_Init+0x328>)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_GPIO_Init+0x32c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d037      	beq.n	8002a9a <HAL_GPIO_Init+0x23e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_GPIO_Init+0x330>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d031      	beq.n	8002a96 <HAL_GPIO_Init+0x23a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_GPIO_Init+0x334>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02b      	beq.n	8002a92 <HAL_GPIO_Init+0x236>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a55      	ldr	r2, [pc, #340]	; (8002b94 <HAL_GPIO_Init+0x338>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d025      	beq.n	8002a8e <HAL_GPIO_Init+0x232>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <HAL_GPIO_Init+0x33c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01f      	beq.n	8002a8a <HAL_GPIO_Init+0x22e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <HAL_GPIO_Init+0x340>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0x22a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_GPIO_Init+0x344>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x226>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a51      	ldr	r2, [pc, #324]	; (8002ba4 <HAL_GPIO_Init+0x348>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x222>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a50      	ldr	r2, [pc, #320]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x21e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a72:	2309      	movs	r3, #9
 8002a74:	e012      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a76:	230a      	movs	r3, #10
 8002a78:	e010      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	e00e      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00c      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e00a      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a86:	2305      	movs	r3, #5
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aac:	4935      	ldr	r1, [pc, #212]	; (8002b84 <HAL_GPIO_Init+0x328>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b32:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f ae84 	bls.w	8002878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40021400 	.word	0x40021400
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021c00 	.word	0x40021c00
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40022400 	.word	0x40022400
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e267      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d075      	beq.n	8002cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bd2:	4b88      	ldr	r3, [pc, #544]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bde:	4b85      	ldr	r3, [pc, #532]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d112      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bea:	4b82      	ldr	r3, [pc, #520]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf8:	4b7e      	ldr	r3, [pc, #504]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d05b      	beq.n	8002cbc <HAL_RCC_OscConfig+0x108>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d157      	bne.n	8002cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e242      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d106      	bne.n	8002c28 <HAL_RCC_OscConfig+0x74>
 8002c1a:	4b76      	ldr	r3, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a75      	ldr	r2, [pc, #468]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	e01d      	b.n	8002c64 <HAL_RCC_OscConfig+0xb0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x98>
 8002c32:	4b70      	ldr	r3, [pc, #448]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6f      	ldr	r2, [pc, #444]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6c      	ldr	r2, [pc, #432]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e00b      	b.n	8002c64 <HAL_RCC_OscConfig+0xb0>
 8002c4c:	4b69      	ldr	r3, [pc, #420]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c56:	6013      	str	r3, [r2, #0]
 8002c58:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fd ff68 	bl	8000b40 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fd ff64 	bl	8000b40 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e207      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0xc0>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c94:	f7fd ff54 	bl	8000b40 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fd ff50 	bl	8000b40 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e1f3      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	4b51      	ldr	r3, [pc, #324]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0xe8>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d063      	beq.n	8002d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cd6:	4b47      	ldr	r3, [pc, #284]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d11c      	bne.n	8002d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce2:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d116      	bne.n	8002d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_RCC_OscConfig+0x152>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d001      	beq.n	8002d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e1c7      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d06:	4b3b      	ldr	r3, [pc, #236]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4937      	ldr	r1, [pc, #220]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	e03a      	b.n	8002d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d24:	4b34      	ldr	r3, [pc, #208]	; (8002df8 <HAL_RCC_OscConfig+0x244>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2a:	f7fd ff09 	bl	8000b40 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d32:	f7fd ff05 	bl	8000b40 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e1a8      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4925      	ldr	r1, [pc, #148]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
 8002d64:	e015      	b.n	8002d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_OscConfig+0x244>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fd fee8 	bl	8000b40 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fd fee4 	bl	8000b40 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e187      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d036      	beq.n	8002e0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_RCC_OscConfig+0x248>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fd fec8 	bl	8000b40 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db4:	f7fd fec4 	bl	8000b40 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e167      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x200>
 8002dd2:	e01b      	b.n	8002e0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_OscConfig+0x248>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dda:	f7fd feb1 	bl	8000b40 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fd fead 	bl	8000b40 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d907      	bls.n	8002e00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e150      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470000 	.word	0x42470000
 8002dfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	4b88      	ldr	r3, [pc, #544]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ea      	bne.n	8002de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8097 	beq.w	8002f48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1e:	4b81      	ldr	r3, [pc, #516]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	4b7d      	ldr	r3, [pc, #500]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a7c      	ldr	r2, [pc, #496]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e46:	2301      	movs	r3, #1
 8002e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4a:	4b77      	ldr	r3, [pc, #476]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e56:	4b74      	ldr	r3, [pc, #464]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a73      	ldr	r2, [pc, #460]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e62:	f7fd fe6d 	bl	8000b40 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e6a:	f7fd fe69 	bl	8000b40 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e10c      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCC_OscConfig+0x474>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2ea>
 8002e90:	4b64      	ldr	r3, [pc, #400]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a63      	ldr	r2, [pc, #396]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x324>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b05      	cmp	r3, #5
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x30c>
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a5e      	ldr	r2, [pc, #376]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 0304 	orr.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0x324>
 8002ec0:	4b58      	ldr	r3, [pc, #352]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	4a57      	ldr	r2, [pc, #348]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ecc:	4b55      	ldr	r3, [pc, #340]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a54      	ldr	r2, [pc, #336]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7fd fe2e 	bl	8000b40 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7fd fe2a 	bl	8000b40 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e0cb      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0ee      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x334>
 8002f0a:	e014      	b.n	8002f36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f0c:	f7fd fe18 	bl	8000b40 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7fd fe14 	bl	8000b40 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0b5      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2a:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ee      	bne.n	8002f14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3c:	4b39      	ldr	r3, [pc, #228]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	4a38      	ldr	r2, [pc, #224]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80a1 	beq.w	8003094 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f52:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d05c      	beq.n	8003018 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d141      	bne.n	8002fea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_RCC_OscConfig+0x478>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fde8 	bl	8000b40 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fd fde4 	bl	8000b40 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e087      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b27      	ldr	r3, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	019b      	lsls	r3, r3, #6
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	3b01      	subs	r3, #1
 8002fac:	041b      	lsls	r3, r3, #16
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
 8002fb6:	491b      	ldr	r1, [pc, #108]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_RCC_OscConfig+0x478>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fdbd 	bl	8000b40 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fd fdb9 	bl	8000b40 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e05c      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x416>
 8002fe8:	e054      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fea:	4b10      	ldr	r3, [pc, #64]	; (800302c <HAL_RCC_OscConfig+0x478>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fda6 	bl	8000b40 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7fd fda2 	bl	8000b40 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e045      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_OscConfig+0x470>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x444>
 8003016:	e03d      	b.n	8003094 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e038      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_RCC_OscConfig+0x4ec>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d028      	beq.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d121      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d11a      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003060:	4013      	ands	r3, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003066:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003068:	4293      	cmp	r3, r2
 800306a:	d111      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	3b01      	subs	r3, #1
 800307a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800

080030a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0cc      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d90c      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800311a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d044      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d119      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e067      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b37      	ldr	r3, [pc, #220]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4934      	ldr	r1, [pc, #208]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fd fcd4 	bl	8000b40 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fd fcd0 	bl	8000b40 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d20c      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fc34 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
 8003264:	08004968 	.word	0x08004968
 8003268:	20000000 	.word	0x20000000
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b090      	sub	sp, #64	; 0x40
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
 800327c:	2300      	movs	r3, #0
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d00d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003294:	2b08      	cmp	r3, #8
 8003296:	f200 80a1 	bhi.w	80033dc <HAL_RCC_GetSysClockFreq+0x16c>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x3a>
 80032a2:	e09b      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b53      	ldr	r3, [pc, #332]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032a8:	e09b      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032ae:	e098      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ba:	4b4d      	ldr	r3, [pc, #308]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	2200      	movs	r2, #0
 80032ce:	623b      	str	r3, [r7, #32]
 80032d0:	627a      	str	r2, [r7, #36]	; 0x24
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032d8:	2100      	movs	r1, #0
 80032da:	4b47      	ldr	r3, [pc, #284]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032dc:	fb03 f201 	mul.w	r2, r3, r1
 80032e0:	2300      	movs	r3, #0
 80032e2:	fb00 f303 	mul.w	r3, r0, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	4a43      	ldr	r2, [pc, #268]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80032ea:	fba0 1202 	umull	r1, r2, r0, r2
 80032ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032f0:	460a      	mov	r2, r1
 80032f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80032f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f6:	4413      	add	r3, r2
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	2200      	movs	r2, #0
 80032fe:	61bb      	str	r3, [r7, #24]
 8003300:	61fa      	str	r2, [r7, #28]
 8003302:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003306:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800330a:	f7fc ff6f 	bl	80001ec <__aeabi_uldivmod>
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	4613      	mov	r3, r2
 8003314:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003316:	e053      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	099b      	lsrs	r3, r3, #6
 800331e:	2200      	movs	r2, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	617a      	str	r2, [r7, #20]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800332a:	f04f 0b00 	mov.w	fp, #0
 800332e:	4652      	mov	r2, sl
 8003330:	465b      	mov	r3, fp
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	ebb2 080a 	subs.w	r8, r2, sl
 800334a:	eb63 090b 	sbc.w	r9, r3, fp
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800335a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800335e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003362:	ebb2 0408 	subs.w	r4, r2, r8
 8003366:	eb63 0509 	sbc.w	r5, r3, r9
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	00eb      	lsls	r3, r5, #3
 8003374:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003378:	00e2      	lsls	r2, r4, #3
 800337a:	4614      	mov	r4, r2
 800337c:	461d      	mov	r5, r3
 800337e:	eb14 030a 	adds.w	r3, r4, sl
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	eb45 030b 	adc.w	r3, r5, fp
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003396:	4629      	mov	r1, r5
 8003398:	028b      	lsls	r3, r1, #10
 800339a:	4621      	mov	r1, r4
 800339c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a0:	4621      	mov	r1, r4
 80033a2:	028a      	lsls	r2, r1, #10
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033aa:	2200      	movs	r2, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	60fa      	str	r2, [r7, #12]
 80033b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033b4:	f7fc ff1a 	bl	80001ec <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	3301      	adds	r3, #1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033da:	e002      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3740      	adds	r7, #64	; 0x40
 80033e8:	46bd      	mov	sp, r7
 80033ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	00f42400 	.word	0x00f42400
 80033f8:	017d7840 	.word	0x017d7840

080033fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003400:	4b03      	ldr	r3, [pc, #12]	; (8003410 <HAL_RCC_GetHCLKFreq+0x14>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	20000000 	.word	0x20000000

08003414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003418:	f7ff fff0 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	08004978 	.word	0x08004978

0800343c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003440:	f7ff ffdc 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8003444:	4602      	mov	r2, r0
 8003446:	4b05      	ldr	r3, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	0b5b      	lsrs	r3, r3, #13
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003452:	5ccb      	ldrb	r3, [r1, r3]
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003458:	4618      	mov	r0, r3
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40023800 	.word	0x40023800
 8003460:	08004978 	.word	0x08004978

08003464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e03f      	b.n	80034f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd f9a8 	bl	80007e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 ffb1 	bl	8004410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	4613      	mov	r3, r2
 800350a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	d11d      	bne.n	8003554 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_UART_Receive_DMA+0x26>
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e016      	b.n	8003556 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UART_Receive_DMA+0x38>
 8003532:	2302      	movs	r3, #2
 8003534:	e00f      	b.n	8003556 <HAL_UART_Receive_DMA+0x58>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	461a      	mov	r2, r3
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 fd00 	bl	8003f50 <UART_Start_Receive_DMA>
 8003550:	4603      	mov	r3, r0
 8003552:	e000      	b.n	8003556 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800355e:	b480      	push	{r7}
 8003560:	b09d      	sub	sp, #116	; 0x74
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003566:	2300      	movs	r3, #0
 8003568:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_UART_DMAPause+0x1a>
 8003574:	2302      	movs	r3, #2
 8003576:	e098      	b.n	80036aa <HAL_UART_DMAPause+0x14c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b21      	cmp	r3, #33	; 0x21
 80035a0:	d11c      	bne.n	80035dc <HAL_UART_DMAPause+0x7e>
 80035a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d019      	beq.n	80035dc <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	3314      	adds	r3, #20
 80035ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035be:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3314      	adds	r3, #20
 80035c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e5      	bne.n	80035a8 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b22      	cmp	r3, #34	; 0x22
 80035fc:	d150      	bne.n	80036a0 <HAL_UART_DMAPause+0x142>
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d04d      	beq.n	80036a0 <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800361a:	667b      	str	r3, [r7, #100]	; 0x64
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003624:	647a      	str	r2, [r7, #68]	; 0x44
 8003626:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800362a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3314      	adds	r3, #20
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	623b      	str	r3, [r7, #32]
   return(result);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	663b      	str	r3, [r7, #96]	; 0x60
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3314      	adds	r3, #20
 8003656:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003658:	633a      	str	r2, [r7, #48]	; 0x30
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800365e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e5      	bne.n	8003638 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3314      	adds	r3, #20
 8003672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	60fb      	str	r3, [r7, #12]
   return(result);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3314      	adds	r3, #20
 800368a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800368c:	61fa      	str	r2, [r7, #28]
 800368e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	617b      	str	r3, [r7, #20]
   return(result);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3774      	adds	r7, #116	; 0x74
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b09d      	sub	sp, #116	; 0x74
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_UART_DMAResume+0x16>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e08b      	b.n	80037e4 <HAL_UART_DMAResume+0x12e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b21      	cmp	r3, #33	; 0x21
 80036de:	d119      	bne.n	8003714 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003700:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003702:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003706:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800370e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b22      	cmp	r3, #34	; 0x22
 800371e:	d15c      	bne.n	80037da <HAL_UART_DMAResume+0x124>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d019      	beq.n	8003772 <HAL_UART_DMAResume+0xbc>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	66bb      	str	r3, [r7, #104]	; 0x68
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	330c      	adds	r3, #12
 800375c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800375e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003760:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003762:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003764:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003766:	e841 2300 	strex	r3, r2, [r1]
 800376a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800376c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e5      	bne.n	800373e <HAL_UART_DMAResume+0x88>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377c:	e853 3f00 	ldrex	r3, [r3]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	667b      	str	r3, [r7, #100]	; 0x64
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3314      	adds	r3, #20
 8003790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003792:	637a      	str	r2, [r7, #52]	; 0x34
 8003794:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379a:	e841 2300 	strex	r3, r2, [r1]
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1e5      	bne.n	8003772 <HAL_UART_DMAResume+0xbc>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	e853 3f00 	ldrex	r3, [r3]
 80037b4:	613b      	str	r3, [r7, #16]
   return(result);
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037bc:	663b      	str	r3, [r7, #96]	; 0x60
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037c6:	623a      	str	r2, [r7, #32]
 80037c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	69f9      	ldr	r1, [r7, #28]
 80037cc:	6a3a      	ldr	r2, [r7, #32]
 80037ce:	e841 2300 	strex	r3, r2, [r1]
 80037d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1e5      	bne.n	80037a6 <HAL_UART_DMAResume+0xf0>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3774      	adds	r7, #116	; 0x74
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b0ba      	sub	sp, #232	; 0xe8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003816:	2300      	movs	r3, #0
 8003818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800382e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_UART_IRQHandler+0x66>
 8003842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fd23 	bl	800429a <UART_Receive_IT>
      return;
 8003854:	e256      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80de 	beq.w	8003a1c <HAL_UART_IRQHandler+0x22c>
 8003860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800386c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003870:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80d1 	beq.w	8003a1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800387a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00b      	beq.n	800389e <HAL_UART_IRQHandler+0xae>
 8003886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800388a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388e:	2b00      	cmp	r3, #0
 8003890:	d005      	beq.n	800389e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0201 	orr.w	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800389e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_UART_IRQHandler+0xd2>
 80038aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f043 0202 	orr.w	r2, r3, #2
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0xf6>
 80038ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0204 	orr.w	r2, r3, #4
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d011      	beq.n	8003916 <HAL_UART_IRQHandler+0x126>
 80038f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f043 0208 	orr.w	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 81ed 	beq.w	8003cfa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_UART_IRQHandler+0x14e>
 800392c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fcae 	bl	800429a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_UART_IRQHandler+0x17a>
 8003962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d04f      	beq.n	8003a0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fbb6 	bl	80040dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d141      	bne.n	8003a02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3314      	adds	r3, #20
 80039a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1d9      	bne.n	800397e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4a7d      	ldr	r2, [pc, #500]	; (8003bcc <HAL_UART_IRQHandler+0x3dc>)
 80039d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fb42 	bl	8001068 <HAL_DMA_Abort_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039f4:	4610      	mov	r0, r2
 80039f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e00e      	b.n	8003a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f99a 	bl	8003d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e00a      	b.n	8003a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f996 	bl	8003d34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e006      	b.n	8003a18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f992 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a16:	e170      	b.n	8003cfa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a18:	bf00      	nop
    return;
 8003a1a:	e16e      	b.n	8003cfa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	f040 814a 	bne.w	8003cba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 8143 	beq.w	8003cba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 813c 	beq.w	8003cba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	f040 80b4 	bne.w	8003bd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 8140 	beq.w	8003cfe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a86:	429a      	cmp	r2, r3
 8003a88:	f080 8139 	bcs.w	8003cfe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a9e:	f000 8088 	beq.w	8003bb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1d9      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3314      	adds	r3, #20
 8003af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e1      	bne.n	8003aee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e3      	bne.n	8003b2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	f023 0310 	bic.w	r3, r3, #16
 8003b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b94:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e3      	bne.n	8003b70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd f9eb 	bl	8000f88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8c0 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc8:	e099      	b.n	8003cfe <HAL_UART_IRQHandler+0x50e>
 8003bca:	bf00      	nop
 8003bcc:	080041a3 	.word	0x080041a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808b 	beq.w	8003d02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8086 	beq.w	8003d02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	330c      	adds	r3, #12
 8003c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c1a:	647a      	str	r2, [r7, #68]	; 0x44
 8003c1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c22:	e841 2300 	strex	r3, r2, [r1]
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1e3      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3314      	adds	r3, #20
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c52:	633a      	str	r2, [r7, #48]	; 0x30
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e3      	bne.n	8003c2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	330c      	adds	r3, #12
 8003c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	330c      	adds	r3, #12
 8003c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e3      	bne.n	8003c74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f848 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cb8:	e023      	b.n	8003d02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_UART_IRQHandler+0x4ea>
 8003cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fa79 	bl	80041ca <UART_Transmit_IT>
    return;
 8003cd8:	e014      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <HAL_UART_IRQHandler+0x514>
 8003ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 fab9 	bl	800426a <UART_EndTransmit_IT>
    return;
 8003cf8:	e004      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
    return;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
      return;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <HAL_UART_IRQHandler+0x514>
      return;
 8003d02:	bf00      	nop
  }
}
 8003d04:	37e8      	adds	r7, #232	; 0xe8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop

08003d0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b09c      	sub	sp, #112	; 0x70
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d172      	bne.n	8003e62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	2200      	movs	r2, #0
 8003d80:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	330c      	adds	r3, #12
 8003da0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003da2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003da4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003da8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e5      	bne.n	8003d82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3314      	adds	r3, #20
 8003dd4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003dd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003dd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	3314      	adds	r3, #20
 8003e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e0a:	633a      	str	r2, [r7, #48]	; 0x30
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d119      	bne.n	8003e62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f023 0310 	bic.w	r3, r3, #16
 8003e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e4e:	61fa      	str	r2, [r7, #28]
 8003e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	69b9      	ldr	r1, [r7, #24]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d106      	bne.n	8003e78 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e72:	f7ff ff69 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e76:	e002      	b.n	8003e7e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003e78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e7a:	f7fc fc55 	bl	8000728 <HAL_UART_RxCpltCallback>
}
 8003e7e:	bf00      	nop
 8003e80:	3770      	adds	r7, #112	; 0x70
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f7ff ff4e 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003eac:	e002      	b.n	8003eb4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff ff36 	bl	8003d20 <HAL_UART_RxHalfCpltCallback>
}
 8003eb4:	bf00      	nop
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b21      	cmp	r3, #33	; 0x21
 8003eee:	d108      	bne.n	8003f02 <UART_DMAError+0x46>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003efc:	68b8      	ldr	r0, [r7, #8]
 8003efe:	f000 f8c5 	bl	800408c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0c:	2b40      	cmp	r3, #64	; 0x40
 8003f0e:	bf0c      	ite	eq
 8003f10:	2301      	moveq	r3, #1
 8003f12:	2300      	movne	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b22      	cmp	r3, #34	; 0x22
 8003f22:	d108      	bne.n	8003f36 <UART_DMAError+0x7a>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f30:	68b8      	ldr	r0, [r7, #8]
 8003f32:	f000 f8d3 	bl	80040dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0210 	orr.w	r2, r3, #16
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f42:	68b8      	ldr	r0, [r7, #8]
 8003f44:	f7ff fef6 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b098      	sub	sp, #96	; 0x60
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	88fa      	ldrh	r2, [r7, #6]
 8003f68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	4a40      	ldr	r2, [pc, #256]	; (8004080 <UART_Start_Receive_DMA+0x130>)
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	4a3f      	ldr	r2, [pc, #252]	; (8004084 <UART_Start_Receive_DMA+0x134>)
 8003f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <UART_Start_Receive_DMA+0x138>)
 8003f8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	2200      	movs	r2, #0
 8003f96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f98:	f107 0308 	add.w	r3, r7, #8
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	f7fc ff92 	bl	8000ed8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	613b      	str	r3, [r7, #16]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d019      	beq.n	800400e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	330c      	adds	r3, #12
 8003ff8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ffa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1e5      	bne.n	8003fda <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3314      	adds	r3, #20
 8004014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	657b      	str	r3, [r7, #84]	; 0x54
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800402e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e5      	bne.n	800400e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3314      	adds	r3, #20
 8004048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	617b      	str	r3, [r7, #20]
   return(result);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004058:	653b      	str	r3, [r7, #80]	; 0x50
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3314      	adds	r3, #20
 8004060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004062:	627a      	str	r2, [r7, #36]	; 0x24
 8004064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6a39      	ldr	r1, [r7, #32]
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e5      	bne.n	8004042 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3760      	adds	r7, #96	; 0x60
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	08003d61 	.word	0x08003d61
 8004084:	08003e87 	.word	0x08003e87
 8004088:	08003ebd 	.word	0x08003ebd

0800408c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b089      	sub	sp, #36	; 0x24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	61ba      	str	r2, [r7, #24]
 80040b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	613b      	str	r3, [r7, #16]
   return(result);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80040d0:	bf00      	nop
 80040d2:	3724      	adds	r7, #36	; 0x24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b095      	sub	sp, #84	; 0x54
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	e853 3f00 	ldrex	r3, [r3]
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004104:	643a      	str	r2, [r7, #64]	; 0x40
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800410a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800410c:	e841 2300 	strex	r3, r2, [r1]
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e5      	bne.n	80040e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3314      	adds	r3, #20
 800411e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	61fb      	str	r3, [r7, #28]
   return(result);
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3314      	adds	r3, #20
 8004136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	2b01      	cmp	r3, #1
 8004152:	d119      	bne.n	8004188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	330c      	adds	r3, #12
 800415a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	60bb      	str	r3, [r7, #8]
   return(result);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f023 0310 	bic.w	r3, r3, #16
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004174:	61ba      	str	r2, [r7, #24]
 8004176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	613b      	str	r3, [r7, #16]
   return(result);
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004196:	bf00      	nop
 8004198:	3754      	adds	r7, #84	; 0x54
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff fdb9 	bl	8003d34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b21      	cmp	r3, #33	; 0x21
 80041dc:	d13e      	bne.n	800425c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d114      	bne.n	8004212 <UART_Transmit_IT+0x48>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d110      	bne.n	8004212 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]
 8004210:	e008      	b.n	8004224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6211      	str	r1, [r2, #32]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b082      	sub	sp, #8
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68da      	ldr	r2, [r3, #12]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004280:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fd3e 	bl	8003d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b08c      	sub	sp, #48	; 0x30
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b22      	cmp	r3, #34	; 0x22
 80042ac:	f040 80ab 	bne.w	8004406 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b8:	d117      	bne.n	80042ea <UART_Receive_IT+0x50>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	1c9a      	adds	r2, r3, #2
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	629a      	str	r2, [r3, #40]	; 0x28
 80042e8:	e026      	b.n	8004338 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d007      	beq.n	800430e <UART_Receive_IT+0x74>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <UART_Receive_IT+0x82>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	b2da      	uxtb	r2, r3
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e008      	b.n	800432e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004328:	b2da      	uxtb	r2, r3
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29b      	uxth	r3, r3
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004348:	2b00      	cmp	r3, #0
 800434a:	d15a      	bne.n	8004402 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0220 	bic.w	r2, r2, #32
 800435a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695a      	ldr	r2, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	2b01      	cmp	r3, #1
 800438a:	d135      	bne.n	80043f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	330c      	adds	r3, #12
 8004398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	613b      	str	r3, [r7, #16]
   return(result);
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f023 0310 	bic.w	r3, r3, #16
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	330c      	adds	r3, #12
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	623a      	str	r2, [r7, #32]
 80043b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	69f9      	ldr	r1, [r7, #28]
 80043b8:	6a3a      	ldr	r2, [r7, #32]
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d10a      	bne.n	80043ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ee:	4619      	mov	r1, r3
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fca9 	bl	8003d48 <HAL_UARTEx_RxEventCallback>
 80043f6:	e002      	b.n	80043fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fc f995 	bl	8000728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e002      	b.n	8004408 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e000      	b.n	8004408 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3730      	adds	r7, #48	; 0x30
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004414:	b0c0      	sub	sp, #256	; 0x100
 8004416:	af00      	add	r7, sp, #0
 8004418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	68d9      	ldr	r1, [r3, #12]
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	ea40 0301 	orr.w	r3, r0, r1
 8004438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	431a      	orrs	r2, r3
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	431a      	orrs	r2, r3
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004468:	f021 010c 	bic.w	r1, r1, #12
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004476:	430b      	orrs	r3, r1
 8004478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448a:	6999      	ldr	r1, [r3, #24]
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	ea40 0301 	orr.w	r3, r0, r1
 8004496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b8f      	ldr	r3, [pc, #572]	; (80046dc <UART_SetConfig+0x2cc>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d005      	beq.n	80044b0 <UART_SetConfig+0xa0>
 80044a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <UART_SetConfig+0x2d0>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d104      	bne.n	80044ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044b0:	f7fe ffc4 	bl	800343c <HAL_RCC_GetPCLK2Freq>
 80044b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044b8:	e003      	b.n	80044c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ba:	f7fe ffab 	bl	8003414 <HAL_RCC_GetPCLK1Freq>
 80044be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	69db      	ldr	r3, [r3, #28]
 80044c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044cc:	f040 810c 	bne.w	80046e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044e2:	4622      	mov	r2, r4
 80044e4:	462b      	mov	r3, r5
 80044e6:	1891      	adds	r1, r2, r2
 80044e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ea:	415b      	adcs	r3, r3
 80044ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044f2:	4621      	mov	r1, r4
 80044f4:	eb12 0801 	adds.w	r8, r2, r1
 80044f8:	4629      	mov	r1, r5
 80044fa:	eb43 0901 	adc.w	r9, r3, r1
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800450a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800450e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004512:	4690      	mov	r8, r2
 8004514:	4699      	mov	r9, r3
 8004516:	4623      	mov	r3, r4
 8004518:	eb18 0303 	adds.w	r3, r8, r3
 800451c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004520:	462b      	mov	r3, r5
 8004522:	eb49 0303 	adc.w	r3, r9, r3
 8004526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800452a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800453a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800453e:	460b      	mov	r3, r1
 8004540:	18db      	adds	r3, r3, r3
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
 8004544:	4613      	mov	r3, r2
 8004546:	eb42 0303 	adc.w	r3, r2, r3
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
 800454c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004554:	f7fb fe4a 	bl	80001ec <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4b61      	ldr	r3, [pc, #388]	; (80046e4 <UART_SetConfig+0x2d4>)
 800455e:	fba3 2302 	umull	r2, r3, r3, r2
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	011c      	lsls	r4, r3, #4
 8004566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	1891      	adds	r1, r2, r2
 800457e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004580:	415b      	adcs	r3, r3
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004588:	4641      	mov	r1, r8
 800458a:	eb12 0a01 	adds.w	sl, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb43 0b01 	adc.w	fp, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80045a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80045a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a8:	4692      	mov	sl, r2
 80045aa:	469b      	mov	fp, r3
 80045ac:	4643      	mov	r3, r8
 80045ae:	eb1a 0303 	adds.w	r3, sl, r3
 80045b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b6:	464b      	mov	r3, r9
 80045b8:	eb4b 0303 	adc.w	r3, fp, r3
 80045bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045d4:	460b      	mov	r3, r1
 80045d6:	18db      	adds	r3, r3, r3
 80045d8:	643b      	str	r3, [r7, #64]	; 0x40
 80045da:	4613      	mov	r3, r2
 80045dc:	eb42 0303 	adc.w	r3, r2, r3
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
 80045e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ea:	f7fb fdff 	bl	80001ec <__aeabi_uldivmod>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4611      	mov	r1, r2
 80045f4:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <UART_SetConfig+0x2d4>)
 80045f6:	fba3 2301 	umull	r2, r3, r3, r1
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2264      	movs	r2, #100	; 0x64
 80045fe:	fb02 f303 	mul.w	r3, r2, r3
 8004602:	1acb      	subs	r3, r1, r3
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <UART_SetConfig+0x2d4>)
 800460c:	fba3 2302 	umull	r2, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004618:	441c      	add	r4, r3
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	63b9      	str	r1, [r7, #56]	; 0x38
 8004634:	415b      	adcs	r3, r3
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800463c:	4641      	mov	r1, r8
 800463e:	1851      	adds	r1, r2, r1
 8004640:	6339      	str	r1, [r7, #48]	; 0x30
 8004642:	4649      	mov	r1, r9
 8004644:	414b      	adcs	r3, r1
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004654:	4659      	mov	r1, fp
 8004656:	00cb      	lsls	r3, r1, #3
 8004658:	4651      	mov	r1, sl
 800465a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800465e:	4651      	mov	r1, sl
 8004660:	00ca      	lsls	r2, r1, #3
 8004662:	4610      	mov	r0, r2
 8004664:	4619      	mov	r1, r3
 8004666:	4603      	mov	r3, r0
 8004668:	4642      	mov	r2, r8
 800466a:	189b      	adds	r3, r3, r2
 800466c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004670:	464b      	mov	r3, r9
 8004672:	460a      	mov	r2, r1
 8004674:	eb42 0303 	adc.w	r3, r2, r3
 8004678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800468c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004690:	460b      	mov	r3, r1
 8004692:	18db      	adds	r3, r3, r3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
 8004696:	4613      	mov	r3, r2
 8004698:	eb42 0303 	adc.w	r3, r2, r3
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80046a6:	f7fb fda1 	bl	80001ec <__aeabi_uldivmod>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <UART_SetConfig+0x2d4>)
 80046b0:	fba3 1302 	umull	r1, r3, r3, r2
 80046b4:	095b      	lsrs	r3, r3, #5
 80046b6:	2164      	movs	r1, #100	; 0x64
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	3332      	adds	r3, #50	; 0x32
 80046c2:	4a08      	ldr	r2, [pc, #32]	; (80046e4 <UART_SetConfig+0x2d4>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	095b      	lsrs	r3, r3, #5
 80046ca:	f003 0207 	and.w	r2, r3, #7
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4422      	add	r2, r4
 80046d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046d8:	e105      	b.n	80048e6 <UART_SetConfig+0x4d6>
 80046da:	bf00      	nop
 80046dc:	40011000 	.word	0x40011000
 80046e0:	40011400 	.word	0x40011400
 80046e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046fa:	4642      	mov	r2, r8
 80046fc:	464b      	mov	r3, r9
 80046fe:	1891      	adds	r1, r2, r2
 8004700:	6239      	str	r1, [r7, #32]
 8004702:	415b      	adcs	r3, r3
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800470a:	4641      	mov	r1, r8
 800470c:	1854      	adds	r4, r2, r1
 800470e:	4649      	mov	r1, r9
 8004710:	eb43 0501 	adc.w	r5, r3, r1
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	00eb      	lsls	r3, r5, #3
 800471e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004722:	00e2      	lsls	r2, r4, #3
 8004724:	4614      	mov	r4, r2
 8004726:	461d      	mov	r5, r3
 8004728:	4643      	mov	r3, r8
 800472a:	18e3      	adds	r3, r4, r3
 800472c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004730:	464b      	mov	r3, r9
 8004732:	eb45 0303 	adc.w	r3, r5, r3
 8004736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004756:	4629      	mov	r1, r5
 8004758:	008b      	lsls	r3, r1, #2
 800475a:	4621      	mov	r1, r4
 800475c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004760:	4621      	mov	r1, r4
 8004762:	008a      	lsls	r2, r1, #2
 8004764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004768:	f7fb fd40 	bl	80001ec <__aeabi_uldivmod>
 800476c:	4602      	mov	r2, r0
 800476e:	460b      	mov	r3, r1
 8004770:	4b60      	ldr	r3, [pc, #384]	; (80048f4 <UART_SetConfig+0x4e4>)
 8004772:	fba3 2302 	umull	r2, r3, r3, r2
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	011c      	lsls	r4, r3, #4
 800477a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477e:	2200      	movs	r2, #0
 8004780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	1891      	adds	r1, r2, r2
 8004792:	61b9      	str	r1, [r7, #24]
 8004794:	415b      	adcs	r3, r3
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800479c:	4641      	mov	r1, r8
 800479e:	1851      	adds	r1, r2, r1
 80047a0:	6139      	str	r1, [r7, #16]
 80047a2:	4649      	mov	r1, r9
 80047a4:	414b      	adcs	r3, r1
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047b4:	4659      	mov	r1, fp
 80047b6:	00cb      	lsls	r3, r1, #3
 80047b8:	4651      	mov	r1, sl
 80047ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047be:	4651      	mov	r1, sl
 80047c0:	00ca      	lsls	r2, r1, #3
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	4642      	mov	r2, r8
 80047ca:	189b      	adds	r3, r3, r2
 80047cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047d0:	464b      	mov	r3, r9
 80047d2:	460a      	mov	r2, r1
 80047d4:	eb42 0303 	adc.w	r3, r2, r3
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80047e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047f4:	4649      	mov	r1, r9
 80047f6:	008b      	lsls	r3, r1, #2
 80047f8:	4641      	mov	r1, r8
 80047fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047fe:	4641      	mov	r1, r8
 8004800:	008a      	lsls	r2, r1, #2
 8004802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004806:	f7fb fcf1 	bl	80001ec <__aeabi_uldivmod>
 800480a:	4602      	mov	r2, r0
 800480c:	460b      	mov	r3, r1
 800480e:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <UART_SetConfig+0x4e4>)
 8004810:	fba3 1302 	umull	r1, r3, r3, r2
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	2164      	movs	r1, #100	; 0x64
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	3332      	adds	r3, #50	; 0x32
 8004822:	4a34      	ldr	r2, [pc, #208]	; (80048f4 <UART_SetConfig+0x4e4>)
 8004824:	fba2 2303 	umull	r2, r3, r2, r3
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800482e:	441c      	add	r4, r3
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004834:	2200      	movs	r2, #0
 8004836:	673b      	str	r3, [r7, #112]	; 0x70
 8004838:	677a      	str	r2, [r7, #116]	; 0x74
 800483a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800483e:	4642      	mov	r2, r8
 8004840:	464b      	mov	r3, r9
 8004842:	1891      	adds	r1, r2, r2
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	415b      	adcs	r3, r3
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800484e:	4641      	mov	r1, r8
 8004850:	1851      	adds	r1, r2, r1
 8004852:	6039      	str	r1, [r7, #0]
 8004854:	4649      	mov	r1, r9
 8004856:	414b      	adcs	r3, r1
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004866:	4659      	mov	r1, fp
 8004868:	00cb      	lsls	r3, r1, #3
 800486a:	4651      	mov	r1, sl
 800486c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004870:	4651      	mov	r1, sl
 8004872:	00ca      	lsls	r2, r1, #3
 8004874:	4610      	mov	r0, r2
 8004876:	4619      	mov	r1, r3
 8004878:	4603      	mov	r3, r0
 800487a:	4642      	mov	r2, r8
 800487c:	189b      	adds	r3, r3, r2
 800487e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004880:	464b      	mov	r3, r9
 8004882:	460a      	mov	r2, r1
 8004884:	eb42 0303 	adc.w	r3, r2, r3
 8004888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	663b      	str	r3, [r7, #96]	; 0x60
 8004894:	667a      	str	r2, [r7, #100]	; 0x64
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80048a2:	4649      	mov	r1, r9
 80048a4:	008b      	lsls	r3, r1, #2
 80048a6:	4641      	mov	r1, r8
 80048a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ac:	4641      	mov	r1, r8
 80048ae:	008a      	lsls	r2, r1, #2
 80048b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048b4:	f7fb fc9a 	bl	80001ec <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <UART_SetConfig+0x4e4>)
 80048be:	fba3 1302 	umull	r1, r3, r3, r2
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2164      	movs	r1, #100	; 0x64
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	3332      	adds	r3, #50	; 0x32
 80048d0:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <UART_SetConfig+0x4e4>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	f003 020f 	and.w	r2, r3, #15
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4422      	add	r2, r4
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048ec:	46bd      	mov	sp, r7
 80048ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f2:	bf00      	nop
 80048f4:	51eb851f 	.word	0x51eb851f

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4d0d      	ldr	r5, [pc, #52]	; (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	; (8004934 <__libc_init_array+0x3c>)
 80048fe:	1b64      	subs	r4, r4, r5
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2600      	movs	r6, #0
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4d0b      	ldr	r5, [pc, #44]	; (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	; (800493c <__libc_init_array+0x44>)
 800490c:	f000 f820 	bl	8004950 <_init>
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2600      	movs	r6, #0
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	08004990 	.word	0x08004990
 8004934:	08004990 	.word	0x08004990
 8004938:	08004990 	.word	0x08004990
 800493c:	08004994 	.word	0x08004994

08004940 <memset>:
 8004940:	4402      	add	r2, r0
 8004942:	4603      	mov	r3, r0
 8004944:	4293      	cmp	r3, r2
 8004946:	d100      	bne.n	800494a <memset+0xa>
 8004948:	4770      	bx	lr
 800494a:	f803 1b01 	strb.w	r1, [r3], #1
 800494e:	e7f9      	b.n	8004944 <memset+0x4>

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
