
rtc_timestamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b8  080041b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041c0  080041c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000e0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa98  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f3b  00000000  00000000  0002fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00031a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d70  00000000  00000000  000328b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002459e  00000000  00000000  00033620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102af  00000000  00000000  00057bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0516  00000000  00000000  00067e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00148383  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004048  00000000  00000000  001483d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004060 	.word	0x08004060

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08004060 	.word	0x08004060

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fc22 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f80a 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f948 	bl	8000844 <MX_GPIO_Init>
  MX_RTC_Init();
 80005b4:	f000 f868 	bl	8000688 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f91a 	bl	80007f0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80005bc:	f000 f8ca 	bl	8000754 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x1c>
	...

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f8ce 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xbc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a23      	ldr	r2, [pc, #140]	; (8000680 <SystemClock_Config+0xbc>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xbc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <SystemClock_Config+0xc0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000610:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <SystemClock_Config+0xc0>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <SystemClock_Config+0xc0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000624:	230a      	movs	r3, #10
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ff39 	bl	80014b4 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000648:	f000 fa5a 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 f99c 	bl	80019a4 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000672:	f000 fa45 	bl	8000b00 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_RTC_Init+0xc4>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	; (8000750 <MX_RTC_Init+0xc8>)
 80006a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_RTC_Init+0xc4>)
 80006a8:	2240      	movs	r2, #64	; 0x40
 80006aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_RTC_Init+0xc4>)
 80006ae:	227f      	movs	r2, #127	; 0x7f
 80006b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_RTC_Init+0xc4>)
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_RTC_Init+0xc4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_RTC_Init+0xc4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_RTC_Init+0xc4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006ca:	4820      	ldr	r0, [pc, #128]	; (800074c <MX_RTC_Init+0xc4>)
 80006cc:	f001 fd0a 	bl	80020e4 <HAL_RTC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80006d6:	f000 fa13 	bl	8000b00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80006da:	2301      	movs	r3, #1
 80006dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80006de:	2300      	movs	r3, #0
 80006e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71bb      	strb	r3, [r7, #6]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	4814      	ldr	r0, [pc, #80]	; (800074c <MX_RTC_Init+0xc4>)
 80006fa:	f001 fd69 	bl	80021d0 <HAL_RTC_SetTime>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_RTC_Init+0x80>
  {
    Error_Handler();
 8000704:	f000 f9fc 	bl	8000b00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000708:	2301      	movs	r3, #1
 800070a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800070c:	2301      	movs	r3, #1
 800070e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000710:	2301      	movs	r3, #1
 8000712:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000714:	2300      	movs	r3, #0
 8000716:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <MX_RTC_Init+0xc4>)
 8000720:	f001 fe4e 	bl	80023c0 <HAL_RTC_SetDate>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800072a:	f000 f9e9 	bl	8000b00 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <MX_RTC_Init+0xc4>)
 8000734:	f001 ffd4 	bl	80026e0 <HAL_RTCEx_SetTimeStamp_IT>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_RTC_Init+0xba>
  {
    Error_Handler();
 800073e:	f000 f9df 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40002800 	.word	0x40002800

08000754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_TIM4_Init+0x98>)
 8000774:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM4_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000788:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_TIM4_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000798:	f002 f934 	bl	8002a04 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f9ad 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM4_Init+0x94>)
 80007b4:	f002 f975 	bl	8002aa2 <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f99f 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM4_Init+0x94>)
 80007d0:	f002 fb68 	bl	8002ea4 <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007da:	f000 f991 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000ac 	.word	0x200000ac
 80007ec:	40000800 	.word	0x40000800

080007f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART1_UART_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_USART1_UART_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USART1_UART_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART1_UART_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART1_UART_Init+0x4c>)
 8000828:	f002 fbb8 	bl	8002f9c <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000832:	f000 f965 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000f4 	.word	0x200000f4
 8000840:	40011000 	.word	0x40011000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b2b      	ldr	r3, [pc, #172]	; (800090c <MX_GPIO_Init+0xc8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a2a      	ldr	r2, [pc, #168]	; (800090c <MX_GPIO_Init+0xc8>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b28      	ldr	r3, [pc, #160]	; (800090c <MX_GPIO_Init+0xc8>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b24      	ldr	r3, [pc, #144]	; (800090c <MX_GPIO_Init+0xc8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a23      	ldr	r2, [pc, #140]	; (800090c <MX_GPIO_Init+0xc8>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_GPIO_Init+0xc8>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_GPIO_Init+0xc8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_GPIO_Init+0xc8>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_GPIO_Init+0xc8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <MX_GPIO_Init+0xcc>)
 80008b6:	f000 fdcb 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ba:	2301      	movs	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c4:	2302      	movs	r3, #2
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_GPIO_Init+0xd0>)
 80008d0:	f000 fc12 	bl	80010f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <MX_GPIO_Init+0xcc>)
 80008ee:	f000 fc03 	bl	80010f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2006      	movs	r0, #6
 80008f8:	f000 fbc7 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008fc:	2006      	movs	r0, #6
 80008fe:	f000 fbe0 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40021800 	.word	0x40021800
 8000914:	40020000 	.word	0x40020000

08000918 <getDayofweek>:

/* USER CODE BEGIN 4 */
char* getDayofweek(uint8_t num)
{
 8000918:	b4b0      	push	{r4, r5, r7}
 800091a:	b08b      	sub	sp, #44	; 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
	char *weekday[] = {"Mon","Tue","Wed","Thu","Fri","Sat","Sun"};
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <getDayofweek+0x38>)
 8000924:	f107 040c 	add.w	r4, r7, #12
 8000928:	461d      	mov	r5, r3
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000932:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return weekday[num-1];
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	3b01      	subs	r3, #1
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	3328      	adds	r3, #40	; 0x28
 800093e:	443b      	add	r3, r7
 8000940:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000944:	4618      	mov	r0, r3
 8000946:	372c      	adds	r7, #44	; 0x2c
 8000948:	46bd      	mov	sp, r7
 800094a:	bcb0      	pop	{r4, r5, r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	08004094 	.word	0x08004094

08000954 <HAL_GPIO_EXTI_Callback>:
}
*/


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000956:	b09f      	sub	sp, #124	; 0x7c
 8000958:	af02      	add	r7, sp, #8
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d150      	bne.n	8000a06 <HAL_GPIO_EXTI_Callback+0xb2>
		RTC_TimeTypeDef RTC_TimeRead;
		RTC_DateTypeDef RTC_DateRead;

		char buf[80];

		HAL_RTC_GetTime(&hrtc, &RTC_TimeRead, RTC_FORMAT_BIN);
 8000964:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	4828      	ldr	r0, [pc, #160]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xbc>)
 800096e:	f001 fcc9 	bl	8002304 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_DateRead, RTC_FORMAT_BIN);
 8000972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000976:	2200      	movs	r2, #0
 8000978:	4619      	mov	r1, r3
 800097a:	4825      	ldr	r0, [pc, #148]	; (8000a10 <HAL_GPIO_EXTI_Callback+0xbc>)
 800097c:	f001 fda4 	bl	80024c8 <HAL_RTC_GetDate>

		sprintf(buf,"Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000980:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000984:	461a      	mov	r2, r3
				RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 8000986:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
		sprintf(buf,"Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 800098a:	4619      	mov	r1, r3
				RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
 800098c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
		sprintf(buf,"Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
 8000990:	f107 0008 	add.w	r0, r7, #8
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	460b      	mov	r3, r1
 8000998:	491e      	ldr	r1, [pc, #120]	; (8000a14 <HAL_GPIO_EXTI_Callback+0xc0>)
 800099a:	f002 fef3 	bl	8003784 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fc24 	bl	80001f0 <strlen>
 80009a8:	4603      	mov	r3, r0
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	f107 0108 	add.w	r1, r7, #8
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	4818      	ldr	r0, [pc, #96]	; (8000a18 <HAL_GPIO_EXTI_Callback+0xc4>)
 80009b6:	f002 fb3e 	bl	8003036 <HAL_UART_Transmit>

		sprintf(buf,"Current Date is : %02d-%2d-%2d <%s>\r\n",RTC_DateRead.Month,\
 80009ba:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80009be:	461d      	mov	r5, r3
				RTC_DateRead.Date,RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 80009c0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
		sprintf(buf,"Current Date is : %02d-%2d-%2d <%s>\r\n",RTC_DateRead.Month,\
 80009c4:	461e      	mov	r6, r3
				RTC_DateRead.Date,RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
 80009c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
		sprintf(buf,"Current Date is : %02d-%2d-%2d <%s>\r\n",RTC_DateRead.Month,\
 80009ca:	461c      	mov	r4, r3
 80009cc:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffa1 	bl	8000918 <getDayofweek>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f107 0008 	add.w	r0, r7, #8
 80009dc:	9301      	str	r3, [sp, #4]
 80009de:	9400      	str	r4, [sp, #0]
 80009e0:	4633      	mov	r3, r6
 80009e2:	462a      	mov	r2, r5
 80009e4:	490d      	ldr	r1, [pc, #52]	; (8000a1c <HAL_GPIO_EXTI_Callback+0xc8>)
 80009e6:	f002 fecd 	bl	8003784 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fbfe 	bl	80001f0 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f107 0108 	add.w	r1, r7, #8
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000a02:	f002 fb18 	bl	8003036 <HAL_UART_Transmit>

		// RTC_AlarmConfig();
	}
}
 8000a06:	bf00      	nop
 8000a08:	3774      	adds	r7, #116	; 0x74
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	2000008c 	.word	0x2000008c
 8000a14:	080040b0 	.word	0x080040b0
 8000a18:	200000f4 	.word	0x200000f4
 8000a1c:	080040d4 	.word	0x080040d4

08000a20 <HAL_RTCEx_TimeStampEventCallback>:
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
}
*/

void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a22:	b09f      	sub	sp, #124	; 0x7c
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stampTime;
	RTC_DateTypeDef stampDate;

	char buf[80];

	HAL_RTCEx_GetTimeStamp(hrtc, &stampTime, &stampDate, RTC_FORMAT_BIN);
 8000a28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000a2c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000a30:	2300      	movs	r3, #0
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f001 fed2 	bl	80027dc <HAL_RTCEx_GetTimeStamp>

	sprintf(buf,"\r\n\r\nTimeStamp is occurred !\r\n");
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	492c      	ldr	r1, [pc, #176]	; (8000af0 <HAL_RTCEx_TimeStampEventCallback+0xd0>)
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fea0 	bl	8003784 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fbd1 	bl	80001f0 <strlen>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f107 0108 	add.w	r1, r7, #8
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	4826      	ldr	r0, [pc, #152]	; (8000af4 <HAL_RTCEx_TimeStampEventCallback+0xd4>)
 8000a5c:	f002 faeb 	bl	8003036 <HAL_UART_Transmit>


	sprintf(buf,"TimeStamp Time is : %02d:%02d:%02d\r\n",stampTime.Hours,\
 8000a60:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000a64:	461a      	mov	r2, r3
			stampTime.Minutes,stampTime.Seconds);
 8000a66:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
	sprintf(buf,"TimeStamp Time is : %02d:%02d:%02d\r\n",stampTime.Hours,\
 8000a6a:	4619      	mov	r1, r3
			stampTime.Minutes,stampTime.Seconds);
 8000a6c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
	sprintf(buf,"TimeStamp Time is : %02d:%02d:%02d\r\n",stampTime.Hours,\
 8000a70:	f107 0008 	add.w	r0, r7, #8
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	460b      	mov	r3, r1
 8000a78:	491f      	ldr	r1, [pc, #124]	; (8000af8 <HAL_RTCEx_TimeStampEventCallback+0xd8>)
 8000a7a:	f002 fe83 	bl	8003784 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fbb4 	bl	80001f0 <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f107 0108 	add.w	r1, r7, #8
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	4817      	ldr	r0, [pc, #92]	; (8000af4 <HAL_RTCEx_TimeStampEventCallback+0xd4>)
 8000a96:	f002 face 	bl	8003036 <HAL_UART_Transmit>

	sprintf(buf,"TimeStamp Date is : %02d-%2d-%2d <%s>\r\n",stampDate.Month,\
 8000a9a:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000a9e:	461d      	mov	r5, r3
			stampDate.Date,stampDate.Year,getDayofweek(stampDate.WeekDay));
 8000aa0:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
	sprintf(buf,"TimeStamp Date is : %02d-%2d-%2d <%s>\r\n",stampDate.Month,\
 8000aa4:	461e      	mov	r6, r3
			stampDate.Date,stampDate.Year,getDayofweek(stampDate.WeekDay));
 8000aa6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
	sprintf(buf,"TimeStamp Date is : %02d-%2d-%2d <%s>\r\n",stampDate.Month,\
 8000aaa:	461c      	mov	r4, r3
 8000aac:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff31 	bl	8000918 <getDayofweek>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f107 0008 	add.w	r0, r7, #8
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	9400      	str	r4, [sp, #0]
 8000ac0:	4633      	mov	r3, r6
 8000ac2:	462a      	mov	r2, r5
 8000ac4:	490d      	ldr	r1, [pc, #52]	; (8000afc <HAL_RTCEx_TimeStampEventCallback+0xdc>)
 8000ac6:	f002 fe5d 	bl	8003784 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fb8e 	bl	80001f0 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	f107 0108 	add.w	r1, r7, #8
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	4804      	ldr	r0, [pc, #16]	; (8000af4 <HAL_RTCEx_TimeStampEventCallback+0xd4>)
 8000ae2:	f002 faa8 	bl	8003036 <HAL_UART_Transmit>


}
 8000ae6:	bf00      	nop
 8000ae8:	3774      	adds	r7, #116	; 0x74
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aee:	bf00      	nop
 8000af0:	080040fc 	.word	0x080040fc
 8000af4:	200000f4 	.word	0x200000f4
 8000af8:	0800411c 	.word	0x0800411c
 8000afc:	08004144 	.word	0x08004144

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2230      	movs	r2, #48	; 0x30
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fe01 	bl	8003774 <memset>
  if(hrtc->Instance==RTC)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_RTC_MspInit+0x5c>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d119      	bne.n	8000bb0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f8ea 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b96:	f7ff ffb3 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_RTC_MspInit+0x60>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_IRQn, 0, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f000 fa70 	bl	800108a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_IRQn);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f000 fa89 	bl	80010c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3738      	adds	r7, #56	; 0x38
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40002800 	.word	0x40002800
 8000bbc:	42470e3c 	.word	0x42470e3c

08000bc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_TIM_Base_MspInit+0x3c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10d      	bne.n	8000bee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_TIM_Base_MspInit+0x40>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <HAL_TIM_Base_MspInit+0x40>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_TIM_Base_MspInit+0x40>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40000800 	.word	0x40000800
 8000c00:	40023800 	.word	0x40023800

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <HAL_UART_MspInit+0x84>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12c      	bne.n	8000c80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_UART_MspInit+0x8c>)
 8000c7c:	f000 fa3c 	bl	80010f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40011000 	.word	0x40011000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8d8 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <TAMP_STAMP_IRQHandler>:

/**
  * @brief This function handles RTC tamper and timestamp interrupts through EXTI line 21.
  */
void TAMP_STAMP_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_IRQn 0 */

  /* USER CODE END TAMP_STAMP_IRQn 0 */
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TAMP_STAMP_IRQHandler+0x10>)
 8000cee:	f001 fe15 	bl	800291c <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_IRQn 1 */

  /* USER CODE END TAMP_STAMP_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000008c 	.word	0x2000008c

08000cfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d00:	2001      	movs	r0, #1
 8000d02:	f000 fbbf 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d14:	4a14      	ldr	r2, [pc, #80]	; (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d3c:	f002 fcf0 	bl	8003720 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20030000 	.word	0x20030000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	20000138 	.word	0x20000138
 8000d74:	20000150 	.word	0x20000150

08000d78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da0:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da2:	490e      	ldr	r1, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da8:	e002      	b.n	8000db0 <LoopCopyDataInit>

08000daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dae:	3304      	adds	r3, #4

08000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db4:	d3f9      	bcc.n	8000daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db8:	4c0b      	ldr	r4, [pc, #44]	; (8000de8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dbc:	e001      	b.n	8000dc2 <LoopFillZerobss>

08000dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc0:	3204      	adds	r2, #4

08000dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc4:	d3fb      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc6:	f7ff ffd7 	bl	8000d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f002 fcaf 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fbe9 	bl	80005a4 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dd4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ddc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000de0:	080041c8 	.word	0x080041c8
  ldr r2, =_sbss
 8000de4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000de8:	20000150 	.word	0x20000150

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f92b 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	200f      	movs	r0, #15
 8000e20:	f000 f808 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff fe72 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f943 	bl	80010de <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f90b 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	2000013c 	.word	0x2000013c

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	2000013c 	.word	0x2000013c

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff3e 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff31 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa2 	bl	8001030 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e177      	b.n	8001404 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8166 	bne.w	80013fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b01      	cmp	r3, #1
 800113c:	d005      	beq.n	800114a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001146:	2b02      	cmp	r3, #2
 8001148:	d130      	bne.n	80011ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	68da      	ldr	r2, [r3, #12]
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001180:	2201      	movs	r2, #1
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 0201 	and.w	r2, r3, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d017      	beq.n	80011e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	2203      	movs	r2, #3
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80c0 	beq.w	80013fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b66      	ldr	r3, [pc, #408]	; (800141c <HAL_GPIO_Init+0x324>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_GPIO_Init+0x324>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b63      	ldr	r3, [pc, #396]	; (800141c <HAL_GPIO_Init+0x324>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a61      	ldr	r2, [pc, #388]	; (8001420 <HAL_GPIO_Init+0x328>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a58      	ldr	r2, [pc, #352]	; (8001424 <HAL_GPIO_Init+0x32c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d037      	beq.n	8001336 <HAL_GPIO_Init+0x23e>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a57      	ldr	r2, [pc, #348]	; (8001428 <HAL_GPIO_Init+0x330>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d031      	beq.n	8001332 <HAL_GPIO_Init+0x23a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a56      	ldr	r2, [pc, #344]	; (800142c <HAL_GPIO_Init+0x334>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d02b      	beq.n	800132e <HAL_GPIO_Init+0x236>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a55      	ldr	r2, [pc, #340]	; (8001430 <HAL_GPIO_Init+0x338>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d025      	beq.n	800132a <HAL_GPIO_Init+0x232>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a54      	ldr	r2, [pc, #336]	; (8001434 <HAL_GPIO_Init+0x33c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01f      	beq.n	8001326 <HAL_GPIO_Init+0x22e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a53      	ldr	r2, [pc, #332]	; (8001438 <HAL_GPIO_Init+0x340>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x22a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_GPIO_Init+0x344>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x226>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_GPIO_Init+0x348>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x222>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_GPIO_Init+0x34c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x21e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x350>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x21a>
 800130e:	2309      	movs	r3, #9
 8001310:	e012      	b.n	8001338 <HAL_GPIO_Init+0x240>
 8001312:	230a      	movs	r3, #10
 8001314:	e010      	b.n	8001338 <HAL_GPIO_Init+0x240>
 8001316:	2308      	movs	r3, #8
 8001318:	e00e      	b.n	8001338 <HAL_GPIO_Init+0x240>
 800131a:	2307      	movs	r3, #7
 800131c:	e00c      	b.n	8001338 <HAL_GPIO_Init+0x240>
 800131e:	2306      	movs	r3, #6
 8001320:	e00a      	b.n	8001338 <HAL_GPIO_Init+0x240>
 8001322:	2305      	movs	r3, #5
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x240>
 8001326:	2304      	movs	r3, #4
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x240>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x240>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x240>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x240>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <HAL_GPIO_Init+0x328>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_GPIO_Init+0x354>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a34      	ldr	r2, [pc, #208]	; (800144c <HAL_GPIO_Init+0x354>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b32      	ldr	r3, [pc, #200]	; (800144c <HAL_GPIO_Init+0x354>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a29      	ldr	r2, [pc, #164]	; (800144c <HAL_GPIO_Init+0x354>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <HAL_GPIO_Init+0x354>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_GPIO_Init+0x354>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_GPIO_Init+0x354>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <HAL_GPIO_Init+0x354>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f ae84 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40021c00 	.word	0x40021c00
 8001444:	40022000 	.word	0x40022000
 8001448:	40022400 	.word	0x40022400
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fa56 	bl	8000954 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e267      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d075      	beq.n	80015be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b82      	ldr	r3, [pc, #520]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x108>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e242      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a75      	ldr	r2, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x98>
 8001532:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6d      	ldr	r3, [pc, #436]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6c      	ldr	r2, [pc, #432]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xb0>
 800154c:	4b69      	ldr	r3, [pc, #420]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a68      	ldr	r2, [pc, #416]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a65      	ldr	r2, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fca6 	bl	8000ebc <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fca2 	bl	8000ebc <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e207      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5b      	ldr	r3, [pc, #364]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xc0>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fc92 	bl	8000ebc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc8e 	bl	8000ebc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1f3      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0xe8>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c7      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4937      	ldr	r1, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162a:	f7ff fc47 	bl	8000ebc <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fc43 	bl	8000ebc <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a8      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4925      	ldr	r1, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <HAL_RCC_OscConfig+0x244>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166c:	f7ff fc26 	bl	8000ebc <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fc22 	bl	8000ebc <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e187      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d016      	beq.n	80016d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fc06 	bl	8000ebc <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fc02 	bl	8000ebc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e167      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x240>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x200>
 80016d2:	e01b      	b.n	800170c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_RCC_OscConfig+0x248>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fbef 	bl	8000ebc <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e0:	e00e      	b.n	8001700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e2:	f7ff fbeb 	bl	8000ebc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d907      	bls.n	8001700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e150      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	42470000 	.word	0x42470000
 80016fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1ea      	bne.n	80016e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	f000 8097 	beq.w	8001848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800171e:	4b81      	ldr	r3, [pc, #516]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b7d      	ldr	r3, [pc, #500]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	4a7c      	ldr	r2, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
 800173a:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174a:	4b77      	ldr	r3, [pc, #476]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001756:	4b74      	ldr	r3, [pc, #464]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a73      	ldr	r2, [pc, #460]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001762:	f7ff fbab 	bl	8000ebc <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176a:	f7ff fba7 	bl	8000ebc <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e10c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x474>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x2ea>
 8001790:	4b64      	ldr	r3, [pc, #400]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a63      	ldr	r2, [pc, #396]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	e01c      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b05      	cmp	r3, #5
 80017a4:	d10c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x30c>
 80017a6:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a5e      	ldr	r2, [pc, #376]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	e00b      	b.n	80017d8 <HAL_RCC_OscConfig+0x324>
 80017c0:	4b58      	ldr	r3, [pc, #352]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a57      	ldr	r2, [pc, #348]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b55      	ldr	r3, [pc, #340]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80017d2:	f023 0304 	bic.w	r3, r3, #4
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff fb6c 	bl	8000ebc <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	e00a      	b.n	80017fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb68 	bl	8000ebc <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e0cb      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0ee      	beq.n	80017e8 <HAL_RCC_OscConfig+0x334>
 800180a:	e014      	b.n	8001836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180c:	f7ff fb56 	bl	8000ebc <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fb52 	bl	8000ebc <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0b5      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ee      	bne.n	8001814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b39      	ldr	r3, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 80a1 	beq.w	8001994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	d05c      	beq.n	8001918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d141      	bne.n	80018ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001866:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_RCC_OscConfig+0x478>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb26 	bl	8000ebc <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff fb22 	bl	8000ebc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e087      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	019b      	lsls	r3, r3, #6
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	061b      	lsls	r3, r3, #24
 80018b6:	491b      	ldr	r1, [pc, #108]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7ff fafb 	bl	8000ebc <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff faf7 	bl	8000ebc <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e05c      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x416>
 80018e8:	e054      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fae4 	bl	8000ebc <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fae0 	bl	8000ebc <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e045      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x444>
 8001916:	e03d      	b.n	8001994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e038      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000
 800192c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d028      	beq.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d121      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d11a      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	4293      	cmp	r3, r2
 800196a:	d111      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0cc      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d90c      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b65      	ldr	r3, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d044      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d119      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a72:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e067      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 0203 	bic.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	4934      	ldr	r1, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a94:	f7ff fa12 	bl	8000ebc <HAL_GetTick>
 8001a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff fa0e 	bl	8000ebc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 020c 	and.w	r2, r3, #12
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d1eb      	bne.n	8001a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac4:	4b25      	ldr	r3, [pc, #148]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d20c      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f972 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023c00 	.word	0x40023c00
 8001b60:	40023800 	.word	0x40023800
 8001b64:	0800416c 	.word	0x0800416c
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	20000004 	.word	0x20000004

08001b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b74:	b090      	sub	sp, #64	; 0x40
 8001b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d00d      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	f200 80a1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d003      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba2:	e09b      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b53      	ldr	r3, [pc, #332]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ba8:	e09b      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001baa:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bae:	e098      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b4d      	ldr	r3, [pc, #308]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d028      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	2200      	movs	r2, #0
 8001bce:	623b      	str	r3, [r7, #32]
 8001bd0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bdc:	fb03 f201 	mul.w	r2, r3, r1
 8001be0:	2300      	movs	r3, #0
 8001be2:	fb00 f303 	mul.w	r3, r0, r3
 8001be6:	4413      	add	r3, r2
 8001be8:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bea:	fba0 1202 	umull	r1, r2, r0, r2
 8001bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	61fa      	str	r2, [r7, #28]
 8001c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c0a:	f7fe fb49 	bl	80002a0 <__aeabi_uldivmod>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4613      	mov	r3, r2
 8001c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c16:	e053      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	617a      	str	r2, [r7, #20]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c2a:	f04f 0b00 	mov.w	fp, #0
 8001c2e:	4652      	mov	r2, sl
 8001c30:	465b      	mov	r3, fp
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0159      	lsls	r1, r3, #5
 8001c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c40:	0150      	lsls	r0, r2, #5
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	ebb2 080a 	subs.w	r8, r2, sl
 8001c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c62:	ebb2 0408 	subs.w	r4, r2, r8
 8001c66:	eb63 0509 	sbc.w	r5, r3, r9
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	00eb      	lsls	r3, r5, #3
 8001c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c78:	00e2      	lsls	r2, r4, #3
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	eb14 030a 	adds.w	r3, r4, sl
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	eb45 030b 	adc.w	r3, r5, fp
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001caa:	2200      	movs	r2, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb4:	f7fe faf4 	bl	80002a0 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3740      	adds	r7, #64	; 0x40
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	017d7840 	.word	0x017d7840

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	0800417c 	.word	0x0800417c

08001d3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d40:	f7ff ffdc 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0b5b      	lsrs	r3, r3, #13
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4903      	ldr	r1, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	0800417c 	.word	0x0800417c

08001d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d075      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d98:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d9e:	f7ff f88d 	bl	8000ebc <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001da6:	f7ff f889 	bl	8000ebc <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e189      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001db8:	4b8a      	ldr	r3, [pc, #552]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	019a      	lsls	r2, r3, #6
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	071b      	lsls	r3, r3, #28
 8001ddc:	4981      	ldr	r1, [pc, #516]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01f      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001df0:	4b7c      	ldr	r3, [pc, #496]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df6:	0f1b      	lsrs	r3, r3, #28
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	019a      	lsls	r2, r3, #6
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	071b      	lsls	r3, r3, #28
 8001e10:	4974      	ldr	r1, [pc, #464]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001e18:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1e:	f023 021f 	bic.w	r2, r3, #31
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	496e      	ldr	r1, [pc, #440]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	019a      	lsls	r2, r3, #6
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	071b      	lsls	r3, r3, #28
 8001e50:	4964      	ldr	r1, [pc, #400]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e5e:	f7ff f82d 	bl	8000ebc <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e66:	f7ff f829 	bl	8000ebc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e129      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f0      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d079      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e9c:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ea2:	f7ff f80b 	bl	8000ebc <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001eaa:	f7ff f807 	bl	8000ebc <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e107      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ebc:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec8:	d0ef      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ed6:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001edc:	0f1b      	lsrs	r3, r3, #28
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	019a      	lsls	r2, r3, #6
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	071b      	lsls	r3, r3, #28
 8001ef6:	493b      	ldr	r1, [pc, #236]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	4934      	ldr	r1, [pc, #208]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01e      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f24:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	0e1b      	lsrs	r3, r3, #24
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	019a      	lsls	r2, r3, #6
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	071b      	lsls	r3, r3, #28
 8001f44:	4927      	ldr	r1, [pc, #156]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f62:	4b21      	ldr	r3, [pc, #132]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f68:	f7fe ffa8 	bl	8000ebc <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f70:	f7fe ffa4 	bl	8000ebc <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e0a4      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f8e:	d1ef      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 808b 	beq.w	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a0f      	ldr	r2, [pc, #60]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe ff79 	bl	8000ebc <HAL_GetTick>
 8001fca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001fcc:	e010      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fce:	f7fe ff75 	bl	8000ebc <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d909      	bls.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e075      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8001fe0:	42470068 	.word	0x42470068
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470070 	.word	0x42470070
 8001fec:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0e8      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002004:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d02f      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	429a      	cmp	r2, r3
 8002018:	d028      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800201a:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002022:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d114      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002042:	f7fe ff3b 	bl	8000ebc <HAL_GetTick>
 8002046:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe ff37 	bl	8000ebc <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e035      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ee      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002078:	d10d      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800208a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208e:	4912      	ldr	r1, [pc, #72]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002090:	4313      	orrs	r3, r2
 8002092:	608b      	str	r3, [r1, #8]
 8002094:	e005      	b.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800209c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020a0:	6093      	str	r3, [r2, #8]
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	490a      	ldr	r1, [pc, #40]	; (80020d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80020c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40007000 	.word	0x40007000
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470e40 	.word	0x42470e40
 80020e0:	424711e0 	.word	0x424711e0

080020e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e066      	b.n	80021c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7f5b      	ldrb	r3, [r3, #29]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fd26 	bl	8000b5c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	22ca      	movs	r2, #202	; 0xca
 800211c:	625a      	str	r2, [r3, #36]	; 0x24
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2253      	movs	r2, #83	; 0x53
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa45 	bl	80025b6 <RTC_EnterInitMode>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d12c      	bne.n	8002190 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002148:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6899      	ldr	r1, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68d2      	ldr	r2, [r2, #12]
 8002170:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6919      	ldr	r1, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fa4c 	bl	8002624 <RTC_ExitInitMode>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	22ff      	movs	r2, #255	; 0xff
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	7f1b      	ldrb	r3, [r3, #28]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_RTC_SetTime+0x1c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e087      	b.n	80022fc <HAL_RTC_SetTime+0x12c>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d126      	bne.n	800224c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fa29 	bl	800266e <RTC_ByteToBcd2>
 800221c:	4603      	mov	r3, r0
 800221e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fa22 	bl	800266e <RTC_ByteToBcd2>
 800222a:	4603      	mov	r3, r0
 800222c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800222e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	789b      	ldrb	r3, [r3, #2]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa1a 	bl	800266e <RTC_ByteToBcd2>
 800223a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800223c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	78db      	ldrb	r3, [r3, #3]
 8002244:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e018      	b.n	800227e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800226c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002272:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	78db      	ldrb	r3, [r3, #3]
 8002278:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	22ca      	movs	r2, #202	; 0xca
 8002284:	625a      	str	r2, [r3, #36]	; 0x24
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2253      	movs	r2, #83	; 0x53
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f991 	bl	80025b6 <RTC_EnterInitMode>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d120      	bne.n	80022e0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80022a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6899      	ldr	r1, [r3, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f9a4 	bl	8002624 <RTC_ExitInitMode>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	771a      	strb	r2, [r3, #28]

  return status;
 80022fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd90      	pop	{r4, r7, pc}

08002304 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002336:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800233a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	0c1b      	lsrs	r3, r3, #16
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002346:	b2da      	uxtb	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	0a1b      	lsrs	r3, r3, #8
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002356:	b2da      	uxtb	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	0d9b      	lsrs	r3, r3, #22
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d11a      	bne.n	80023b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f98f 	bl	80026a8 <RTC_Bcd2ToByte>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 f986 	bl	80026a8 <RTC_Bcd2ToByte>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f97d 	bl	80026a8 <RTC_Bcd2ToByte>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	7f1b      	ldrb	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RTC_SetDate+0x1c>
 80023d8:	2302      	movs	r3, #2
 80023da:	e071      	b.n	80024c0 <HAL_RTC_SetDate+0x100>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2202      	movs	r2, #2
 80023e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10e      	bne.n	800240c <HAL_RTC_SetDate+0x4c>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	f023 0310 	bic.w	r3, r3, #16
 8002402:	b2db      	uxtb	r3, r3
 8002404:	330a      	adds	r3, #10
 8002406:	b2da      	uxtb	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11c      	bne.n	800244c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	78db      	ldrb	r3, [r3, #3]
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f929 	bl	800266e <RTC_ByteToBcd2>
 800241c:	4603      	mov	r3, r0
 800241e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f922 	bl	800266e <RTC_ByteToBcd2>
 800242a:	4603      	mov	r3, r0
 800242c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800242e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	789b      	ldrb	r3, [r3, #2]
 8002434:	4618      	mov	r0, r3
 8002436:	f000 f91a 	bl	800266e <RTC_ByteToBcd2>
 800243a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800243c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	e00e      	b.n	800246a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	78db      	ldrb	r3, [r3, #3]
 8002450:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002458:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800245e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	22ca      	movs	r2, #202	; 0xca
 8002470:	625a      	str	r2, [r3, #36]	; 0x24
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2253      	movs	r2, #83	; 0x53
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f89b 	bl	80025b6 <RTC_EnterInitMode>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10c      	bne.n	80024a4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002494:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002498:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 f8c2 	bl	8002624 <RTC_ExitInitMode>
 80024a0:	4603      	mov	r3, r0
 80024a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d102      	bne.n	80024b0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2201      	movs	r2, #1
 80024ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	771a      	strb	r2, [r3, #28]

  return status;
 80024be:	7cfb      	ldrb	r3, [r7, #19]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	371c      	adds	r7, #28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}

080024c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80024e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0b5b      	lsrs	r3, r3, #13
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11a      	bne.n	800255c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f8bc 	bl	80026a8 <RTC_Bcd2ToByte>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	4618      	mov	r0, r3
 800253e:	f000 f8b3 	bl	80026a8 <RTC_Bcd2ToByte>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f8aa 	bl	80026a8 <RTC_Bcd2ToByte>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002580:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002582:	f7fe fc9b 	bl	8000ebc <HAL_GetTick>
 8002586:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002588:	e009      	b.n	800259e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800258a:	f7fe fc97 	bl	8000ebc <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002598:	d901      	bls.n	800259e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e007      	b.n	80025ae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0320 	and.w	r3, r3, #32
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0ee      	beq.n	800258a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d122      	bne.n	800261a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025e4:	f7fe fc6a 	bl	8000ebc <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80025ea:	e00c      	b.n	8002606 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025ec:	f7fe fc66 	bl	8000ebc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fa:	d904      	bls.n	8002606 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2204      	movs	r2, #4
 8002600:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d102      	bne.n	800261a <RTC_EnterInitMode+0x64>
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d1e8      	bne.n	80025ec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800263e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10a      	bne.n	8002664 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ff89 	bl	8002566 <HAL_RTC_WaitForSynchro>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800267c:	e005      	b.n	800268a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	3301      	adds	r3, #1
 8002682:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	3b0a      	subs	r3, #10
 8002688:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	2b09      	cmp	r3, #9
 800268e:	d8f6      	bhi.n	800267e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	b2da      	uxtb	r2, r3
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4313      	orrs	r3, r2
 800269a:	b2db      	uxtb	r3, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	4413      	add	r3, r2
 80026d2:	b2db      	uxtb	r3, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_RTCEx_SetTimeStamp_IT>:
  * @note RTC_TIMESTAMPPIN_POS1 is not applicable to the following list of devices:
  *       STM32F412xx, STM32F413xx and STM32F423xx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	7f1b      	ldrb	r3, [r3, #28]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_RTCEx_SetTimeStamp_IT+0x1c>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e066      	b.n	80027ca <HAL_RTCEx_SetTimeStamp_IT+0xea>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2202      	movs	r2, #2
 8002706:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_TSINSEL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002716:	641a      	str	r2, [r3, #64]	; 0x40
  hrtc->Instance->TAFCR |= (uint32_t)(RTC_TimeStampPin);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	430a      	orrs	r2, r1
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002732:	f023 0308 	bic.w	r3, r3, #8
 8002736:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4313      	orrs	r3, r2
 800273e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	22ca      	movs	r2, #202	; 0xca
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2253      	movs	r2, #83	; 0x53
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8002768:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 800277a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278a:	609a      	str	r2, [r3, #8]

  /* Enable IT Timestamp */
  __HAL_RTC_TIMESTAMP_ENABLE_IT(hrtc, RTC_IT_TS);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800279a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	22ff      	movs	r2, #255	; 0xff
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* RTC Timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT();
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <HAL_RTCEx_SetTimeStamp_IT+0xf8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <HAL_RTCEx_SetTimeStamp_IT+0xf8>)
 80027aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ae:	6013      	str	r3, [r2, #0]
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RTCEx_SetTimeStamp_IT+0xf8>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <HAL_RTCEx_SetTimeStamp_IT+0xf8>)
 80027b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ba:	6093      	str	r3, [r2, #8]

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40013c00 	.word	0x40013c00

080027dc <HAL_RTCEx_GetTimeStamp>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_GetTimeStamp(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTimeStamp, RTC_DateTypeDef *sTimeStampDate, uint32_t Format)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  uint32_t tmptime = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpdate = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the Timestamp time and date registers values */
  tmptime = (uint32_t)(hrtc->Instance->TSTR & RTC_TR_RESERVED_MASK);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80027fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002800:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(hrtc->Instance->TSDR & RTC_DR_RESERVED_MASK);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800280c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002810:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  sTimeStamp->Hours      = (uint8_t)((tmptime & (RTC_TSTR_HT  | RTC_TSTR_HU))  >> RTC_TSTR_HU_Pos);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	0c1b      	lsrs	r3, r3, #16
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	701a      	strb	r2, [r3, #0]
  sTimeStamp->Minutes    = (uint8_t)((tmptime & (RTC_TSTR_MNT | RTC_TSTR_MNU)) >> RTC_TSTR_MNU_Pos);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	705a      	strb	r2, [r3, #1]
  sTimeStamp->Seconds    = (uint8_t)((tmptime & (RTC_TSTR_ST  | RTC_TSTR_SU))  >> RTC_TSTR_SU_Pos);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	709a      	strb	r2, [r3, #2]
  sTimeStamp->TimeFormat = (uint8_t)((tmptime & (RTC_TSTR_PM))                 >> RTC_TSTR_PM_Pos);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	0d9b      	lsrs	r3, r3, #22
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	70da      	strb	r2, [r3, #3]
  sTimeStamp->SubSeconds = (uint32_t) hrtc->Instance->TSSSR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	605a      	str	r2, [r3, #4]

  /* Fill the Date structure fields with the read parameters */
  sTimeStampDate->Year    = 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	70da      	strb	r2, [r3, #3]
  sTimeStampDate->Month   = (uint8_t)((tmpdate & (RTC_TSDR_MT | RTC_TSDR_MU)) >> RTC_TSDR_MU_Pos);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	b2da      	uxtb	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	705a      	strb	r2, [r3, #1]
  sTimeStampDate->Date    = (uint8_t)((tmpdate & (RTC_TSDR_DT | RTC_TSDR_DU)) >> RTC_TSDR_DU_Pos);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002878:	b2da      	uxtb	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	709a      	strb	r2, [r3, #2]
  sTimeStampDate->WeekDay = (uint8_t)((tmpdate & (RTC_TSDR_WDU))              >> RTC_TSDR_WDU_Pos);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	0b5b      	lsrs	r3, r3, #13
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	b2da      	uxtb	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d135      	bne.n	8002900 <HAL_RTCEx_GetTimeStamp+0x124>
  {
    /* Convert the Timestamp structure parameters to Binary format */
    sTimeStamp->Hours   = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Hours);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff05 	bl	80026a8 <RTC_Bcd2ToByte>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	701a      	strb	r2, [r3, #0]
    sTimeStamp->Minutes = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Minutes);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	785b      	ldrb	r3, [r3, #1]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fefc 	bl	80026a8 <RTC_Bcd2ToByte>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	705a      	strb	r2, [r3, #1]
    sTimeStamp->Seconds = (uint8_t)RTC_Bcd2ToByte(sTimeStamp->Seconds);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	789b      	ldrb	r3, [r3, #2]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fef3 	bl	80026a8 <RTC_Bcd2ToByte>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	709a      	strb	r2, [r3, #2]

    /* Convert the DateTimeStamp structure parameters to Binary format */
    sTimeStampDate->Month   = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Month);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	785b      	ldrb	r3, [r3, #1]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff feea 	bl	80026a8 <RTC_Bcd2ToByte>
 80028d4:	4603      	mov	r3, r0
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	705a      	strb	r2, [r3, #1]
    sTimeStampDate->Date    = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->Date);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	789b      	ldrb	r3, [r3, #2]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fee1 	bl	80026a8 <RTC_Bcd2ToByte>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	709a      	strb	r2, [r3, #2]
    sTimeStampDate->WeekDay = (uint8_t)RTC_Bcd2ToByte(sTimeStampDate->WeekDay);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fed8 	bl	80026a8 <RTC_Bcd2ToByte>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	701a      	strb	r2, [r3, #0]
  }

  /* Clear the Timestamp Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8002910:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Get the Timestamp interrupt source enable status */
  if (__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <HAL_RTCEx_TamperTimeStampIRQHandler+0x3c>
  {
    /* Get the pending status of the Timestamp Interrupt */
    if (__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_RTCEx_TamperTimeStampIRQHandler+0x3c>
    {
      /* Timestamp callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fe f86d 	bl	8000a20 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Timestamp interrupt pending bit */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8002956:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Tamper 1 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP) != 0U)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>
  {
    /* Get the pending status of the Tamper 1 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>
    {
      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f831 	bl	80029dc <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f462 5202 	orn	r2, r2, #8320	; 0x2080
 800298a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER2_SUPPORT)
  /* Get the Tamper 2 interrupt source enable status */
  if (__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP) != 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d012      	beq.n	80029c0 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>
  {
    /* Get the pending status of the Tamper 2 Interrupt */
    if (__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00b      	beq.n	80029c0 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>
    {
      /* Tamper callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f821 	bl	80029f0 <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f462 4281 	orn	r2, r2, #16512	; 0x4080
 80029be:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RTC_TAMPER2_SUPPORT */

  /* Clear the EXTI's Flag for RTC Timestamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RTCEx_TamperTimeStampIRQHandler+0xbc>)
 80029c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029c6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	775a      	strb	r2, [r3, #29]
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40013c00 	.word	0x40013c00

080029dc <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e041      	b.n	8002a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f8c8 	bl	8000bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 f8f4 	bl	8002c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_TIM_ConfigClockSource+0x1c>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e0b4      	b.n	8002c28 <HAL_TIM_ConfigClockSource+0x186>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002adc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d03e      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0xd4>
 8002af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afc:	f200 8087 	bhi.w	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b04:	f000 8086 	beq.w	8002c14 <HAL_TIM_ConfigClockSource+0x172>
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0c:	d87f      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b0e:	2b70      	cmp	r3, #112	; 0x70
 8002b10:	d01a      	beq.n	8002b48 <HAL_TIM_ConfigClockSource+0xa6>
 8002b12:	2b70      	cmp	r3, #112	; 0x70
 8002b14:	d87b      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b16:	2b60      	cmp	r3, #96	; 0x60
 8002b18:	d050      	beq.n	8002bbc <HAL_TIM_ConfigClockSource+0x11a>
 8002b1a:	2b60      	cmp	r3, #96	; 0x60
 8002b1c:	d877      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b1e:	2b50      	cmp	r3, #80	; 0x50
 8002b20:	d03c      	beq.n	8002b9c <HAL_TIM_ConfigClockSource+0xfa>
 8002b22:	2b50      	cmp	r3, #80	; 0x50
 8002b24:	d873      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d058      	beq.n	8002bdc <HAL_TIM_ConfigClockSource+0x13a>
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d86f      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b2e:	2b30      	cmp	r3, #48	; 0x30
 8002b30:	d064      	beq.n	8002bfc <HAL_TIM_ConfigClockSource+0x15a>
 8002b32:	2b30      	cmp	r3, #48	; 0x30
 8002b34:	d86b      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d060      	beq.n	8002bfc <HAL_TIM_ConfigClockSource+0x15a>
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d867      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d05c      	beq.n	8002bfc <HAL_TIM_ConfigClockSource+0x15a>
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d05a      	beq.n	8002bfc <HAL_TIM_ConfigClockSource+0x15a>
 8002b46:	e062      	b.n	8002c0e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f000 f984 	bl	8002e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]
      break;
 8002b74:	e04f      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6899      	ldr	r1, [r3, #8]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f000 f96d 	bl	8002e64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b98:	609a      	str	r2, [r3, #8]
      break;
 8002b9a:	e03c      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f000 f8e1 	bl	8002d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2150      	movs	r1, #80	; 0x50
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f93a 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002bba:	e02c      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f000 f900 	bl	8002dce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2160      	movs	r1, #96	; 0x60
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f92a 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002bda:	e01c      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6818      	ldr	r0, [r3, #0]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f000 f8c1 	bl	8002d70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2140      	movs	r1, #64	; 0x40
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f91a 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002bfa:	e00c      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 f911 	bl	8002e2e <TIM_ITRx_SetConfig>
      break;
 8002c0c:	e003      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
      break;
 8002c12:	e000      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a40      	ldr	r2, [pc, #256]	; (8002d44 <TIM_Base_SetConfig+0x114>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d00f      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a3d      	ldr	r2, [pc, #244]	; (8002d48 <TIM_Base_SetConfig+0x118>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00b      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a3c      	ldr	r2, [pc, #240]	; (8002d4c <TIM_Base_SetConfig+0x11c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d007      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a3b      	ldr	r2, [pc, #236]	; (8002d50 <TIM_Base_SetConfig+0x120>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d003      	beq.n	8002c70 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <TIM_Base_SetConfig+0x124>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a2f      	ldr	r2, [pc, #188]	; (8002d44 <TIM_Base_SetConfig+0x114>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02b      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c90:	d027      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a2c      	ldr	r2, [pc, #176]	; (8002d48 <TIM_Base_SetConfig+0x118>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d023      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2b      	ldr	r2, [pc, #172]	; (8002d4c <TIM_Base_SetConfig+0x11c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <TIM_Base_SetConfig+0x120>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d01b      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <TIM_Base_SetConfig+0x124>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d017      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <TIM_Base_SetConfig+0x128>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <TIM_Base_SetConfig+0x12c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d00f      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a26      	ldr	r2, [pc, #152]	; (8002d60 <TIM_Base_SetConfig+0x130>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <TIM_Base_SetConfig+0x134>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d007      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a24      	ldr	r2, [pc, #144]	; (8002d68 <TIM_Base_SetConfig+0x138>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d003      	beq.n	8002ce2 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <TIM_Base_SetConfig+0x13c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d108      	bne.n	8002cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a0a      	ldr	r2, [pc, #40]	; (8002d44 <TIM_Base_SetConfig+0x114>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <TIM_Base_SetConfig+0xf8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <TIM_Base_SetConfig+0x124>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d103      	bne.n	8002d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	615a      	str	r2, [r3, #20]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40010400 	.word	0x40010400
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400
 8002d60:	40014800 	.word	0x40014800
 8002d64:	40001800 	.word	0x40001800
 8002d68:	40001c00 	.word	0x40001c00
 8002d6c:	40002000 	.word	0x40002000

08002d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 030a 	bic.w	r3, r3, #10
 8002dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b087      	sub	sp, #28
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0210 	bic.w	r2, r3, #16
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	031b      	lsls	r3, r3, #12
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	621a      	str	r2, [r3, #32]
}
 8002e22:	bf00      	nop
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b085      	sub	sp, #20
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f043 0307 	orr.w	r3, r3, #7
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	609a      	str	r2, [r3, #8]
}
 8002e58:	bf00      	nop
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	021a      	lsls	r2, r3, #8
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e05a      	b.n	8002f72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a21      	ldr	r2, [pc, #132]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d022      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d01d      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a1d      	ldr	r2, [pc, #116]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d018      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1b      	ldr	r2, [pc, #108]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10c      	bne.n	8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40010400 	.word	0x40010400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	40001800 	.word	0x40001800

08002f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e03f      	b.n	800302e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7fd fe1e 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2224      	movs	r2, #36	; 0x24
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f929 	bl	8003238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08a      	sub	sp, #40	; 0x28
 800303a:	af02      	add	r7, sp, #8
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b20      	cmp	r3, #32
 8003054:	d17c      	bne.n	8003150 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <HAL_UART_Transmit+0x2c>
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e075      	b.n	8003152 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_UART_Transmit+0x3e>
 8003070:	2302      	movs	r3, #2
 8003072:	e06e      	b.n	8003152 <HAL_UART_Transmit+0x11c>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2221      	movs	r2, #33	; 0x21
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800308a:	f7fd ff17 	bl	8000ebc <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	88fa      	ldrh	r2, [r7, #6]
 8003094:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	88fa      	ldrh	r2, [r7, #6]
 800309a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a4:	d108      	bne.n	80030b8 <HAL_UART_Transmit+0x82>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	e003      	b.n	80030c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030c8:	e02a      	b.n	8003120 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f840 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e036      	b.n	8003152 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	3302      	adds	r3, #2
 80030fe:	61bb      	str	r3, [r7, #24]
 8003100:	e007      	b.n	8003112 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1cf      	bne.n	80030ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f810 	bl	800315a <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e006      	b.n	8003152 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	e000      	b.n	8003152 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b090      	sub	sp, #64	; 0x40
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316a:	e050      	b.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d04c      	beq.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <UART_WaitOnFlagUntilTimeout+0x30>
 800317a:	f7fd fe9f 	bl	8000ebc <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003186:	429a      	cmp	r2, r3
 8003188:	d241      	bcs.n	800320e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031aa:	637a      	str	r2, [r7, #52]	; 0x34
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031b2:	e841 2300 	strex	r3, r2, [r1]
 80031b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e5      	bne.n	800318a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3314      	adds	r3, #20
 80031c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	613b      	str	r3, [r7, #16]
   return(result);
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f023 0301 	bic.w	r3, r3, #1
 80031d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031de:	623a      	str	r2, [r7, #32]
 80031e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	69f9      	ldr	r1, [r7, #28]
 80031e4:	6a3a      	ldr	r2, [r7, #32]
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e5      	bne.n	80031be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e00f      	b.n	800322e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	429a      	cmp	r2, r3
 800322a:	d09f      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3740      	adds	r7, #64	; 0x40
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b0c0      	sub	sp, #256	; 0x100
 800323e:	af00      	add	r7, sp, #0
 8003240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003254:	68d9      	ldr	r1, [r3, #12]
 8003256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	ea40 0301 	orr.w	r3, r0, r1
 8003260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	431a      	orrs	r2, r3
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003290:	f021 010c 	bic.w	r1, r1, #12
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800329e:	430b      	orrs	r3, r1
 80032a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b2:	6999      	ldr	r1, [r3, #24]
 80032b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	ea40 0301 	orr.w	r3, r0, r1
 80032be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b8f      	ldr	r3, [pc, #572]	; (8003504 <UART_SetConfig+0x2cc>)
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d005      	beq.n	80032d8 <UART_SetConfig+0xa0>
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b8d      	ldr	r3, [pc, #564]	; (8003508 <UART_SetConfig+0x2d0>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d104      	bne.n	80032e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7fe fd30 	bl	8001d3c <HAL_RCC_GetPCLK2Freq>
 80032dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032e0:	e003      	b.n	80032ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032e2:	f7fe fd17 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80032e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	f040 810c 	bne.w	8003510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800330a:	4622      	mov	r2, r4
 800330c:	462b      	mov	r3, r5
 800330e:	1891      	adds	r1, r2, r2
 8003310:	65b9      	str	r1, [r7, #88]	; 0x58
 8003312:	415b      	adcs	r3, r3
 8003314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800331a:	4621      	mov	r1, r4
 800331c:	eb12 0801 	adds.w	r8, r2, r1
 8003320:	4629      	mov	r1, r5
 8003322:	eb43 0901 	adc.w	r9, r3, r1
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800333a:	4690      	mov	r8, r2
 800333c:	4699      	mov	r9, r3
 800333e:	4623      	mov	r3, r4
 8003340:	eb18 0303 	adds.w	r3, r8, r3
 8003344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003348:	462b      	mov	r3, r5
 800334a:	eb49 0303 	adc.w	r3, r9, r3
 800334e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800335e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003366:	460b      	mov	r3, r1
 8003368:	18db      	adds	r3, r3, r3
 800336a:	653b      	str	r3, [r7, #80]	; 0x50
 800336c:	4613      	mov	r3, r2
 800336e:	eb42 0303 	adc.w	r3, r2, r3
 8003372:	657b      	str	r3, [r7, #84]	; 0x54
 8003374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800337c:	f7fc ff90 	bl	80002a0 <__aeabi_uldivmod>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4b61      	ldr	r3, [pc, #388]	; (800350c <UART_SetConfig+0x2d4>)
 8003386:	fba3 2302 	umull	r2, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	011c      	lsls	r4, r3, #4
 800338e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003392:	2200      	movs	r2, #0
 8003394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800339c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033a0:	4642      	mov	r2, r8
 80033a2:	464b      	mov	r3, r9
 80033a4:	1891      	adds	r1, r2, r2
 80033a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80033a8:	415b      	adcs	r3, r3
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033b0:	4641      	mov	r1, r8
 80033b2:	eb12 0a01 	adds.w	sl, r2, r1
 80033b6:	4649      	mov	r1, r9
 80033b8:	eb43 0b01 	adc.w	fp, r3, r1
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d0:	4692      	mov	sl, r2
 80033d2:	469b      	mov	fp, r3
 80033d4:	4643      	mov	r3, r8
 80033d6:	eb1a 0303 	adds.w	r3, sl, r3
 80033da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033de:	464b      	mov	r3, r9
 80033e0:	eb4b 0303 	adc.w	r3, fp, r3
 80033e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033fc:	460b      	mov	r3, r1
 80033fe:	18db      	adds	r3, r3, r3
 8003400:	643b      	str	r3, [r7, #64]	; 0x40
 8003402:	4613      	mov	r3, r2
 8003404:	eb42 0303 	adc.w	r3, r2, r3
 8003408:	647b      	str	r3, [r7, #68]	; 0x44
 800340a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800340e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003412:	f7fc ff45 	bl	80002a0 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4611      	mov	r1, r2
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <UART_SetConfig+0x2d4>)
 800341e:	fba3 2301 	umull	r2, r3, r3, r1
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2264      	movs	r2, #100	; 0x64
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	1acb      	subs	r3, r1, r3
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <UART_SetConfig+0x2d4>)
 8003434:	fba3 2302 	umull	r2, r3, r3, r2
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003440:	441c      	add	r4, r3
 8003442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003446:	2200      	movs	r2, #0
 8003448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800344c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	1891      	adds	r1, r2, r2
 800345a:	63b9      	str	r1, [r7, #56]	; 0x38
 800345c:	415b      	adcs	r3, r3
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003464:	4641      	mov	r1, r8
 8003466:	1851      	adds	r1, r2, r1
 8003468:	6339      	str	r1, [r7, #48]	; 0x30
 800346a:	4649      	mov	r1, r9
 800346c:	414b      	adcs	r3, r1
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800347c:	4659      	mov	r1, fp
 800347e:	00cb      	lsls	r3, r1, #3
 8003480:	4651      	mov	r1, sl
 8003482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003486:	4651      	mov	r1, sl
 8003488:	00ca      	lsls	r2, r1, #3
 800348a:	4610      	mov	r0, r2
 800348c:	4619      	mov	r1, r3
 800348e:	4603      	mov	r3, r0
 8003490:	4642      	mov	r2, r8
 8003492:	189b      	adds	r3, r3, r2
 8003494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003498:	464b      	mov	r3, r9
 800349a:	460a      	mov	r2, r1
 800349c:	eb42 0303 	adc.w	r3, r2, r3
 80034a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034b8:	460b      	mov	r3, r1
 80034ba:	18db      	adds	r3, r3, r3
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034be:	4613      	mov	r3, r2
 80034c0:	eb42 0303 	adc.w	r3, r2, r3
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034ce:	f7fc fee7 	bl	80002a0 <__aeabi_uldivmod>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <UART_SetConfig+0x2d4>)
 80034d8:	fba3 1302 	umull	r1, r3, r3, r2
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	2164      	movs	r1, #100	; 0x64
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	3332      	adds	r3, #50	; 0x32
 80034ea:	4a08      	ldr	r2, [pc, #32]	; (800350c <UART_SetConfig+0x2d4>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	f003 0207 	and.w	r2, r3, #7
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4422      	add	r2, r4
 80034fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003500:	e105      	b.n	800370e <UART_SetConfig+0x4d6>
 8003502:	bf00      	nop
 8003504:	40011000 	.word	0x40011000
 8003508:	40011400 	.word	0x40011400
 800350c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800351a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800351e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003522:	4642      	mov	r2, r8
 8003524:	464b      	mov	r3, r9
 8003526:	1891      	adds	r1, r2, r2
 8003528:	6239      	str	r1, [r7, #32]
 800352a:	415b      	adcs	r3, r3
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
 800352e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003532:	4641      	mov	r1, r8
 8003534:	1854      	adds	r4, r2, r1
 8003536:	4649      	mov	r1, r9
 8003538:	eb43 0501 	adc.w	r5, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	00eb      	lsls	r3, r5, #3
 8003546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800354a:	00e2      	lsls	r2, r4, #3
 800354c:	4614      	mov	r4, r2
 800354e:	461d      	mov	r5, r3
 8003550:	4643      	mov	r3, r8
 8003552:	18e3      	adds	r3, r4, r3
 8003554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003558:	464b      	mov	r3, r9
 800355a:	eb45 0303 	adc.w	r3, r5, r3
 800355e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800356e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800357e:	4629      	mov	r1, r5
 8003580:	008b      	lsls	r3, r1, #2
 8003582:	4621      	mov	r1, r4
 8003584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003588:	4621      	mov	r1, r4
 800358a:	008a      	lsls	r2, r1, #2
 800358c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003590:	f7fc fe86 	bl	80002a0 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4b60      	ldr	r3, [pc, #384]	; (800371c <UART_SetConfig+0x4e4>)
 800359a:	fba3 2302 	umull	r2, r3, r3, r2
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	011c      	lsls	r4, r3, #4
 80035a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035b4:	4642      	mov	r2, r8
 80035b6:	464b      	mov	r3, r9
 80035b8:	1891      	adds	r1, r2, r2
 80035ba:	61b9      	str	r1, [r7, #24]
 80035bc:	415b      	adcs	r3, r3
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035c4:	4641      	mov	r1, r8
 80035c6:	1851      	adds	r1, r2, r1
 80035c8:	6139      	str	r1, [r7, #16]
 80035ca:	4649      	mov	r1, r9
 80035cc:	414b      	adcs	r3, r1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035dc:	4659      	mov	r1, fp
 80035de:	00cb      	lsls	r3, r1, #3
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035e6:	4651      	mov	r1, sl
 80035e8:	00ca      	lsls	r2, r1, #3
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	4642      	mov	r2, r8
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035f8:	464b      	mov	r3, r9
 80035fa:	460a      	mov	r2, r1
 80035fc:	eb42 0303 	adc.w	r3, r2, r3
 8003600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	67bb      	str	r3, [r7, #120]	; 0x78
 800360e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800361c:	4649      	mov	r1, r9
 800361e:	008b      	lsls	r3, r1, #2
 8003620:	4641      	mov	r1, r8
 8003622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003626:	4641      	mov	r1, r8
 8003628:	008a      	lsls	r2, r1, #2
 800362a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800362e:	f7fc fe37 	bl	80002a0 <__aeabi_uldivmod>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <UART_SetConfig+0x4e4>)
 8003638:	fba3 1302 	umull	r1, r3, r3, r2
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	2164      	movs	r1, #100	; 0x64
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	3332      	adds	r3, #50	; 0x32
 800364a:	4a34      	ldr	r2, [pc, #208]	; (800371c <UART_SetConfig+0x4e4>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003656:	441c      	add	r4, r3
 8003658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365c:	2200      	movs	r2, #0
 800365e:	673b      	str	r3, [r7, #112]	; 0x70
 8003660:	677a      	str	r2, [r7, #116]	; 0x74
 8003662:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003666:	4642      	mov	r2, r8
 8003668:	464b      	mov	r3, r9
 800366a:	1891      	adds	r1, r2, r2
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	415b      	adcs	r3, r3
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003676:	4641      	mov	r1, r8
 8003678:	1851      	adds	r1, r2, r1
 800367a:	6039      	str	r1, [r7, #0]
 800367c:	4649      	mov	r1, r9
 800367e:	414b      	adcs	r3, r1
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800368e:	4659      	mov	r1, fp
 8003690:	00cb      	lsls	r3, r1, #3
 8003692:	4651      	mov	r1, sl
 8003694:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003698:	4651      	mov	r1, sl
 800369a:	00ca      	lsls	r2, r1, #3
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	4603      	mov	r3, r0
 80036a2:	4642      	mov	r2, r8
 80036a4:	189b      	adds	r3, r3, r2
 80036a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036a8:	464b      	mov	r3, r9
 80036aa:	460a      	mov	r2, r1
 80036ac:	eb42 0303 	adc.w	r3, r2, r3
 80036b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	663b      	str	r3, [r7, #96]	; 0x60
 80036bc:	667a      	str	r2, [r7, #100]	; 0x64
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036ca:	4649      	mov	r1, r9
 80036cc:	008b      	lsls	r3, r1, #2
 80036ce:	4641      	mov	r1, r8
 80036d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036d4:	4641      	mov	r1, r8
 80036d6:	008a      	lsls	r2, r1, #2
 80036d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036dc:	f7fc fde0 	bl	80002a0 <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <UART_SetConfig+0x4e4>)
 80036e6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2164      	movs	r1, #100	; 0x64
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	3332      	adds	r3, #50	; 0x32
 80036f8:	4a08      	ldr	r2, [pc, #32]	; (800371c <UART_SetConfig+0x4e4>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	f003 020f 	and.w	r2, r3, #15
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4422      	add	r2, r4
 800370c:	609a      	str	r2, [r3, #8]
}
 800370e:	bf00      	nop
 8003710:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371a:	bf00      	nop
 800371c:	51eb851f 	.word	0x51eb851f

08003720 <__errno>:
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <__errno+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	2000000c 	.word	0x2000000c

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4d0d      	ldr	r5, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2600      	movs	r6, #0
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4d0b      	ldr	r5, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f000 fc8e 	bl	8004060 <_init>
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2600      	movs	r6, #0
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	080041c0 	.word	0x080041c0
 8003768:	080041c0 	.word	0x080041c0
 800376c:	080041c0 	.word	0x080041c0
 8003770:	080041c4 	.word	0x080041c4

08003774 <memset>:
 8003774:	4402      	add	r2, r0
 8003776:	4603      	mov	r3, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	f803 1b01 	strb.w	r1, [r3], #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <siprintf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	b500      	push	{lr}
 8003788:	b09c      	sub	sp, #112	; 0x70
 800378a:	ab1d      	add	r3, sp, #116	; 0x74
 800378c:	9002      	str	r0, [sp, #8]
 800378e:	9006      	str	r0, [sp, #24]
 8003790:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003794:	4809      	ldr	r0, [pc, #36]	; (80037bc <siprintf+0x38>)
 8003796:	9107      	str	r1, [sp, #28]
 8003798:	9104      	str	r1, [sp, #16]
 800379a:	4909      	ldr	r1, [pc, #36]	; (80037c0 <siprintf+0x3c>)
 800379c:	f853 2b04 	ldr.w	r2, [r3], #4
 80037a0:	9105      	str	r1, [sp, #20]
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	a902      	add	r1, sp, #8
 80037a8:	f000 f868 	bl	800387c <_svfiprintf_r>
 80037ac:	9b02      	ldr	r3, [sp, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	b01c      	add	sp, #112	; 0x70
 80037b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037b8:	b003      	add	sp, #12
 80037ba:	4770      	bx	lr
 80037bc:	2000000c 	.word	0x2000000c
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <__ssputs_r>:
 80037c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c8:	688e      	ldr	r6, [r1, #8]
 80037ca:	429e      	cmp	r6, r3
 80037cc:	4682      	mov	sl, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	4690      	mov	r8, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	d838      	bhi.n	8003848 <__ssputs_r+0x84>
 80037d6:	898a      	ldrh	r2, [r1, #12]
 80037d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037dc:	d032      	beq.n	8003844 <__ssputs_r+0x80>
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	6909      	ldr	r1, [r1, #16]
 80037e2:	eba5 0901 	sub.w	r9, r5, r1
 80037e6:	6965      	ldr	r5, [r4, #20]
 80037e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037f0:	3301      	adds	r3, #1
 80037f2:	444b      	add	r3, r9
 80037f4:	106d      	asrs	r5, r5, #1
 80037f6:	429d      	cmp	r5, r3
 80037f8:	bf38      	it	cc
 80037fa:	461d      	movcc	r5, r3
 80037fc:	0553      	lsls	r3, r2, #21
 80037fe:	d531      	bpl.n	8003864 <__ssputs_r+0xa0>
 8003800:	4629      	mov	r1, r5
 8003802:	f000 fb63 	bl	8003ecc <_malloc_r>
 8003806:	4606      	mov	r6, r0
 8003808:	b950      	cbnz	r0, 8003820 <__ssputs_r+0x5c>
 800380a:	230c      	movs	r3, #12
 800380c:	f8ca 3000 	str.w	r3, [sl]
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003820:	6921      	ldr	r1, [r4, #16]
 8003822:	464a      	mov	r2, r9
 8003824:	f000 fabe 	bl	8003da4 <memcpy>
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800382e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003832:	81a3      	strh	r3, [r4, #12]
 8003834:	6126      	str	r6, [r4, #16]
 8003836:	6165      	str	r5, [r4, #20]
 8003838:	444e      	add	r6, r9
 800383a:	eba5 0509 	sub.w	r5, r5, r9
 800383e:	6026      	str	r6, [r4, #0]
 8003840:	60a5      	str	r5, [r4, #8]
 8003842:	463e      	mov	r6, r7
 8003844:	42be      	cmp	r6, r7
 8003846:	d900      	bls.n	800384a <__ssputs_r+0x86>
 8003848:	463e      	mov	r6, r7
 800384a:	6820      	ldr	r0, [r4, #0]
 800384c:	4632      	mov	r2, r6
 800384e:	4641      	mov	r1, r8
 8003850:	f000 fab6 	bl	8003dc0 <memmove>
 8003854:	68a3      	ldr	r3, [r4, #8]
 8003856:	1b9b      	subs	r3, r3, r6
 8003858:	60a3      	str	r3, [r4, #8]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	4433      	add	r3, r6
 800385e:	6023      	str	r3, [r4, #0]
 8003860:	2000      	movs	r0, #0
 8003862:	e7db      	b.n	800381c <__ssputs_r+0x58>
 8003864:	462a      	mov	r2, r5
 8003866:	f000 fba5 	bl	8003fb4 <_realloc_r>
 800386a:	4606      	mov	r6, r0
 800386c:	2800      	cmp	r0, #0
 800386e:	d1e1      	bne.n	8003834 <__ssputs_r+0x70>
 8003870:	6921      	ldr	r1, [r4, #16]
 8003872:	4650      	mov	r0, sl
 8003874:	f000 fabe 	bl	8003df4 <_free_r>
 8003878:	e7c7      	b.n	800380a <__ssputs_r+0x46>
	...

0800387c <_svfiprintf_r>:
 800387c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	4698      	mov	r8, r3
 8003882:	898b      	ldrh	r3, [r1, #12]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	b09d      	sub	sp, #116	; 0x74
 8003888:	4607      	mov	r7, r0
 800388a:	460d      	mov	r5, r1
 800388c:	4614      	mov	r4, r2
 800388e:	d50e      	bpl.n	80038ae <_svfiprintf_r+0x32>
 8003890:	690b      	ldr	r3, [r1, #16]
 8003892:	b963      	cbnz	r3, 80038ae <_svfiprintf_r+0x32>
 8003894:	2140      	movs	r1, #64	; 0x40
 8003896:	f000 fb19 	bl	8003ecc <_malloc_r>
 800389a:	6028      	str	r0, [r5, #0]
 800389c:	6128      	str	r0, [r5, #16]
 800389e:	b920      	cbnz	r0, 80038aa <_svfiprintf_r+0x2e>
 80038a0:	230c      	movs	r3, #12
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	e0d1      	b.n	8003a4e <_svfiprintf_r+0x1d2>
 80038aa:	2340      	movs	r3, #64	; 0x40
 80038ac:	616b      	str	r3, [r5, #20]
 80038ae:	2300      	movs	r3, #0
 80038b0:	9309      	str	r3, [sp, #36]	; 0x24
 80038b2:	2320      	movs	r3, #32
 80038b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80038bc:	2330      	movs	r3, #48	; 0x30
 80038be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003a68 <_svfiprintf_r+0x1ec>
 80038c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038c6:	f04f 0901 	mov.w	r9, #1
 80038ca:	4623      	mov	r3, r4
 80038cc:	469a      	mov	sl, r3
 80038ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d2:	b10a      	cbz	r2, 80038d8 <_svfiprintf_r+0x5c>
 80038d4:	2a25      	cmp	r2, #37	; 0x25
 80038d6:	d1f9      	bne.n	80038cc <_svfiprintf_r+0x50>
 80038d8:	ebba 0b04 	subs.w	fp, sl, r4
 80038dc:	d00b      	beq.n	80038f6 <_svfiprintf_r+0x7a>
 80038de:	465b      	mov	r3, fp
 80038e0:	4622      	mov	r2, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	4638      	mov	r0, r7
 80038e6:	f7ff ff6d 	bl	80037c4 <__ssputs_r>
 80038ea:	3001      	adds	r0, #1
 80038ec:	f000 80aa 	beq.w	8003a44 <_svfiprintf_r+0x1c8>
 80038f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038f2:	445a      	add	r2, fp
 80038f4:	9209      	str	r2, [sp, #36]	; 0x24
 80038f6:	f89a 3000 	ldrb.w	r3, [sl]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80a2 	beq.w	8003a44 <_svfiprintf_r+0x1c8>
 8003900:	2300      	movs	r3, #0
 8003902:	f04f 32ff 	mov.w	r2, #4294967295
 8003906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800390a:	f10a 0a01 	add.w	sl, sl, #1
 800390e:	9304      	str	r3, [sp, #16]
 8003910:	9307      	str	r3, [sp, #28]
 8003912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003916:	931a      	str	r3, [sp, #104]	; 0x68
 8003918:	4654      	mov	r4, sl
 800391a:	2205      	movs	r2, #5
 800391c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003920:	4851      	ldr	r0, [pc, #324]	; (8003a68 <_svfiprintf_r+0x1ec>)
 8003922:	f7fc fc6d 	bl	8000200 <memchr>
 8003926:	9a04      	ldr	r2, [sp, #16]
 8003928:	b9d8      	cbnz	r0, 8003962 <_svfiprintf_r+0xe6>
 800392a:	06d0      	lsls	r0, r2, #27
 800392c:	bf44      	itt	mi
 800392e:	2320      	movmi	r3, #32
 8003930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003934:	0711      	lsls	r1, r2, #28
 8003936:	bf44      	itt	mi
 8003938:	232b      	movmi	r3, #43	; 0x2b
 800393a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800393e:	f89a 3000 	ldrb.w	r3, [sl]
 8003942:	2b2a      	cmp	r3, #42	; 0x2a
 8003944:	d015      	beq.n	8003972 <_svfiprintf_r+0xf6>
 8003946:	9a07      	ldr	r2, [sp, #28]
 8003948:	4654      	mov	r4, sl
 800394a:	2000      	movs	r0, #0
 800394c:	f04f 0c0a 	mov.w	ip, #10
 8003950:	4621      	mov	r1, r4
 8003952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003956:	3b30      	subs	r3, #48	; 0x30
 8003958:	2b09      	cmp	r3, #9
 800395a:	d94e      	bls.n	80039fa <_svfiprintf_r+0x17e>
 800395c:	b1b0      	cbz	r0, 800398c <_svfiprintf_r+0x110>
 800395e:	9207      	str	r2, [sp, #28]
 8003960:	e014      	b.n	800398c <_svfiprintf_r+0x110>
 8003962:	eba0 0308 	sub.w	r3, r0, r8
 8003966:	fa09 f303 	lsl.w	r3, r9, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	9304      	str	r3, [sp, #16]
 800396e:	46a2      	mov	sl, r4
 8003970:	e7d2      	b.n	8003918 <_svfiprintf_r+0x9c>
 8003972:	9b03      	ldr	r3, [sp, #12]
 8003974:	1d19      	adds	r1, r3, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	9103      	str	r1, [sp, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	bfbb      	ittet	lt
 800397e:	425b      	neglt	r3, r3
 8003980:	f042 0202 	orrlt.w	r2, r2, #2
 8003984:	9307      	strge	r3, [sp, #28]
 8003986:	9307      	strlt	r3, [sp, #28]
 8003988:	bfb8      	it	lt
 800398a:	9204      	strlt	r2, [sp, #16]
 800398c:	7823      	ldrb	r3, [r4, #0]
 800398e:	2b2e      	cmp	r3, #46	; 0x2e
 8003990:	d10c      	bne.n	80039ac <_svfiprintf_r+0x130>
 8003992:	7863      	ldrb	r3, [r4, #1]
 8003994:	2b2a      	cmp	r3, #42	; 0x2a
 8003996:	d135      	bne.n	8003a04 <_svfiprintf_r+0x188>
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bfb8      	it	lt
 80039a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80039a8:	3402      	adds	r4, #2
 80039aa:	9305      	str	r3, [sp, #20]
 80039ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003a78 <_svfiprintf_r+0x1fc>
 80039b0:	7821      	ldrb	r1, [r4, #0]
 80039b2:	2203      	movs	r2, #3
 80039b4:	4650      	mov	r0, sl
 80039b6:	f7fc fc23 	bl	8000200 <memchr>
 80039ba:	b140      	cbz	r0, 80039ce <_svfiprintf_r+0x152>
 80039bc:	2340      	movs	r3, #64	; 0x40
 80039be:	eba0 000a 	sub.w	r0, r0, sl
 80039c2:	fa03 f000 	lsl.w	r0, r3, r0
 80039c6:	9b04      	ldr	r3, [sp, #16]
 80039c8:	4303      	orrs	r3, r0
 80039ca:	3401      	adds	r4, #1
 80039cc:	9304      	str	r3, [sp, #16]
 80039ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d2:	4826      	ldr	r0, [pc, #152]	; (8003a6c <_svfiprintf_r+0x1f0>)
 80039d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039d8:	2206      	movs	r2, #6
 80039da:	f7fc fc11 	bl	8000200 <memchr>
 80039de:	2800      	cmp	r0, #0
 80039e0:	d038      	beq.n	8003a54 <_svfiprintf_r+0x1d8>
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <_svfiprintf_r+0x1f4>)
 80039e4:	bb1b      	cbnz	r3, 8003a2e <_svfiprintf_r+0x1b2>
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	3307      	adds	r3, #7
 80039ea:	f023 0307 	bic.w	r3, r3, #7
 80039ee:	3308      	adds	r3, #8
 80039f0:	9303      	str	r3, [sp, #12]
 80039f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f4:	4433      	add	r3, r6
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	e767      	b.n	80038ca <_svfiprintf_r+0x4e>
 80039fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80039fe:	460c      	mov	r4, r1
 8003a00:	2001      	movs	r0, #1
 8003a02:	e7a5      	b.n	8003950 <_svfiprintf_r+0xd4>
 8003a04:	2300      	movs	r3, #0
 8003a06:	3401      	adds	r4, #1
 8003a08:	9305      	str	r3, [sp, #20]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 0c0a 	mov.w	ip, #10
 8003a10:	4620      	mov	r0, r4
 8003a12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a16:	3a30      	subs	r2, #48	; 0x30
 8003a18:	2a09      	cmp	r2, #9
 8003a1a:	d903      	bls.n	8003a24 <_svfiprintf_r+0x1a8>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0c5      	beq.n	80039ac <_svfiprintf_r+0x130>
 8003a20:	9105      	str	r1, [sp, #20]
 8003a22:	e7c3      	b.n	80039ac <_svfiprintf_r+0x130>
 8003a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a28:	4604      	mov	r4, r0
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e7f0      	b.n	8003a10 <_svfiprintf_r+0x194>
 8003a2e:	ab03      	add	r3, sp, #12
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	462a      	mov	r2, r5
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <_svfiprintf_r+0x1f8>)
 8003a36:	a904      	add	r1, sp, #16
 8003a38:	4638      	mov	r0, r7
 8003a3a:	f3af 8000 	nop.w
 8003a3e:	1c42      	adds	r2, r0, #1
 8003a40:	4606      	mov	r6, r0
 8003a42:	d1d6      	bne.n	80039f2 <_svfiprintf_r+0x176>
 8003a44:	89ab      	ldrh	r3, [r5, #12]
 8003a46:	065b      	lsls	r3, r3, #25
 8003a48:	f53f af2c 	bmi.w	80038a4 <_svfiprintf_r+0x28>
 8003a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a4e:	b01d      	add	sp, #116	; 0x74
 8003a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a54:	ab03      	add	r3, sp, #12
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	462a      	mov	r2, r5
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <_svfiprintf_r+0x1f8>)
 8003a5c:	a904      	add	r1, sp, #16
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f000 f87a 	bl	8003b58 <_printf_i>
 8003a64:	e7eb      	b.n	8003a3e <_svfiprintf_r+0x1c2>
 8003a66:	bf00      	nop
 8003a68:	08004184 	.word	0x08004184
 8003a6c:	0800418e 	.word	0x0800418e
 8003a70:	00000000 	.word	0x00000000
 8003a74:	080037c5 	.word	0x080037c5
 8003a78:	0800418a 	.word	0x0800418a

08003a7c <_printf_common>:
 8003a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a80:	4616      	mov	r6, r2
 8003a82:	4699      	mov	r9, r3
 8003a84:	688a      	ldr	r2, [r1, #8]
 8003a86:	690b      	ldr	r3, [r1, #16]
 8003a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bfb8      	it	lt
 8003a90:	4613      	movlt	r3, r2
 8003a92:	6033      	str	r3, [r6, #0]
 8003a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a98:	4607      	mov	r7, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	b10a      	cbz	r2, 8003aa2 <_printf_common+0x26>
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	6033      	str	r3, [r6, #0]
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	0699      	lsls	r1, r3, #26
 8003aa6:	bf42      	ittt	mi
 8003aa8:	6833      	ldrmi	r3, [r6, #0]
 8003aaa:	3302      	addmi	r3, #2
 8003aac:	6033      	strmi	r3, [r6, #0]
 8003aae:	6825      	ldr	r5, [r4, #0]
 8003ab0:	f015 0506 	ands.w	r5, r5, #6
 8003ab4:	d106      	bne.n	8003ac4 <_printf_common+0x48>
 8003ab6:	f104 0a19 	add.w	sl, r4, #25
 8003aba:	68e3      	ldr	r3, [r4, #12]
 8003abc:	6832      	ldr	r2, [r6, #0]
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	42ab      	cmp	r3, r5
 8003ac2:	dc26      	bgt.n	8003b12 <_printf_common+0x96>
 8003ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ac8:	1e13      	subs	r3, r2, #0
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	bf18      	it	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	0692      	lsls	r2, r2, #26
 8003ad2:	d42b      	bmi.n	8003b2c <_printf_common+0xb0>
 8003ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ad8:	4649      	mov	r1, r9
 8003ada:	4638      	mov	r0, r7
 8003adc:	47c0      	blx	r8
 8003ade:	3001      	adds	r0, #1
 8003ae0:	d01e      	beq.n	8003b20 <_printf_common+0xa4>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	68e5      	ldr	r5, [r4, #12]
 8003ae6:	6832      	ldr	r2, [r6, #0]
 8003ae8:	f003 0306 	and.w	r3, r3, #6
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	bf08      	it	eq
 8003af0:	1aad      	subeq	r5, r5, r2
 8003af2:	68a3      	ldr	r3, [r4, #8]
 8003af4:	6922      	ldr	r2, [r4, #16]
 8003af6:	bf0c      	ite	eq
 8003af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003afc:	2500      	movne	r5, #0
 8003afe:	4293      	cmp	r3, r2
 8003b00:	bfc4      	itt	gt
 8003b02:	1a9b      	subgt	r3, r3, r2
 8003b04:	18ed      	addgt	r5, r5, r3
 8003b06:	2600      	movs	r6, #0
 8003b08:	341a      	adds	r4, #26
 8003b0a:	42b5      	cmp	r5, r6
 8003b0c:	d11a      	bne.n	8003b44 <_printf_common+0xc8>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	e008      	b.n	8003b24 <_printf_common+0xa8>
 8003b12:	2301      	movs	r3, #1
 8003b14:	4652      	mov	r2, sl
 8003b16:	4649      	mov	r1, r9
 8003b18:	4638      	mov	r0, r7
 8003b1a:	47c0      	blx	r8
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d103      	bne.n	8003b28 <_printf_common+0xac>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b28:	3501      	adds	r5, #1
 8003b2a:	e7c6      	b.n	8003aba <_printf_common+0x3e>
 8003b2c:	18e1      	adds	r1, r4, r3
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	2030      	movs	r0, #48	; 0x30
 8003b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b36:	4422      	add	r2, r4
 8003b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b40:	3302      	adds	r3, #2
 8003b42:	e7c7      	b.n	8003ad4 <_printf_common+0x58>
 8003b44:	2301      	movs	r3, #1
 8003b46:	4622      	mov	r2, r4
 8003b48:	4649      	mov	r1, r9
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	47c0      	blx	r8
 8003b4e:	3001      	adds	r0, #1
 8003b50:	d0e6      	beq.n	8003b20 <_printf_common+0xa4>
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7d9      	b.n	8003b0a <_printf_common+0x8e>
	...

08003b58 <_printf_i>:
 8003b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b5c:	7e0f      	ldrb	r7, [r1, #24]
 8003b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b60:	2f78      	cmp	r7, #120	; 0x78
 8003b62:	4691      	mov	r9, r2
 8003b64:	4680      	mov	r8, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	469a      	mov	sl, r3
 8003b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b6e:	d807      	bhi.n	8003b80 <_printf_i+0x28>
 8003b70:	2f62      	cmp	r7, #98	; 0x62
 8003b72:	d80a      	bhi.n	8003b8a <_printf_i+0x32>
 8003b74:	2f00      	cmp	r7, #0
 8003b76:	f000 80d8 	beq.w	8003d2a <_printf_i+0x1d2>
 8003b7a:	2f58      	cmp	r7, #88	; 0x58
 8003b7c:	f000 80a3 	beq.w	8003cc6 <_printf_i+0x16e>
 8003b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b88:	e03a      	b.n	8003c00 <_printf_i+0xa8>
 8003b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b8e:	2b15      	cmp	r3, #21
 8003b90:	d8f6      	bhi.n	8003b80 <_printf_i+0x28>
 8003b92:	a101      	add	r1, pc, #4	; (adr r1, 8003b98 <_printf_i+0x40>)
 8003b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b98:	08003bf1 	.word	0x08003bf1
 8003b9c:	08003c05 	.word	0x08003c05
 8003ba0:	08003b81 	.word	0x08003b81
 8003ba4:	08003b81 	.word	0x08003b81
 8003ba8:	08003b81 	.word	0x08003b81
 8003bac:	08003b81 	.word	0x08003b81
 8003bb0:	08003c05 	.word	0x08003c05
 8003bb4:	08003b81 	.word	0x08003b81
 8003bb8:	08003b81 	.word	0x08003b81
 8003bbc:	08003b81 	.word	0x08003b81
 8003bc0:	08003b81 	.word	0x08003b81
 8003bc4:	08003d11 	.word	0x08003d11
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003cf3 	.word	0x08003cf3
 8003bd0:	08003b81 	.word	0x08003b81
 8003bd4:	08003b81 	.word	0x08003b81
 8003bd8:	08003d33 	.word	0x08003d33
 8003bdc:	08003b81 	.word	0x08003b81
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003b81 	.word	0x08003b81
 8003be8:	08003b81 	.word	0x08003b81
 8003bec:	08003cfb 	.word	0x08003cfb
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	602a      	str	r2, [r5, #0]
 8003bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c00:	2301      	movs	r3, #1
 8003c02:	e0a3      	b.n	8003d4c <_printf_i+0x1f4>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	6829      	ldr	r1, [r5, #0]
 8003c08:	0606      	lsls	r6, r0, #24
 8003c0a:	f101 0304 	add.w	r3, r1, #4
 8003c0e:	d50a      	bpl.n	8003c26 <_printf_i+0xce>
 8003c10:	680e      	ldr	r6, [r1, #0]
 8003c12:	602b      	str	r3, [r5, #0]
 8003c14:	2e00      	cmp	r6, #0
 8003c16:	da03      	bge.n	8003c20 <_printf_i+0xc8>
 8003c18:	232d      	movs	r3, #45	; 0x2d
 8003c1a:	4276      	negs	r6, r6
 8003c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c20:	485e      	ldr	r0, [pc, #376]	; (8003d9c <_printf_i+0x244>)
 8003c22:	230a      	movs	r3, #10
 8003c24:	e019      	b.n	8003c5a <_printf_i+0x102>
 8003c26:	680e      	ldr	r6, [r1, #0]
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c2e:	bf18      	it	ne
 8003c30:	b236      	sxthne	r6, r6
 8003c32:	e7ef      	b.n	8003c14 <_printf_i+0xbc>
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	1d19      	adds	r1, r3, #4
 8003c3a:	6029      	str	r1, [r5, #0]
 8003c3c:	0601      	lsls	r1, r0, #24
 8003c3e:	d501      	bpl.n	8003c44 <_printf_i+0xec>
 8003c40:	681e      	ldr	r6, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <_printf_i+0xf2>
 8003c44:	0646      	lsls	r6, r0, #25
 8003c46:	d5fb      	bpl.n	8003c40 <_printf_i+0xe8>
 8003c48:	881e      	ldrh	r6, [r3, #0]
 8003c4a:	4854      	ldr	r0, [pc, #336]	; (8003d9c <_printf_i+0x244>)
 8003c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c4e:	bf0c      	ite	eq
 8003c50:	2308      	moveq	r3, #8
 8003c52:	230a      	movne	r3, #10
 8003c54:	2100      	movs	r1, #0
 8003c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c5a:	6865      	ldr	r5, [r4, #4]
 8003c5c:	60a5      	str	r5, [r4, #8]
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	bfa2      	ittt	ge
 8003c62:	6821      	ldrge	r1, [r4, #0]
 8003c64:	f021 0104 	bicge.w	r1, r1, #4
 8003c68:	6021      	strge	r1, [r4, #0]
 8003c6a:	b90e      	cbnz	r6, 8003c70 <_printf_i+0x118>
 8003c6c:	2d00      	cmp	r5, #0
 8003c6e:	d04d      	beq.n	8003d0c <_printf_i+0x1b4>
 8003c70:	4615      	mov	r5, r2
 8003c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c76:	fb03 6711 	mls	r7, r3, r1, r6
 8003c7a:	5dc7      	ldrb	r7, [r0, r7]
 8003c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c80:	4637      	mov	r7, r6
 8003c82:	42bb      	cmp	r3, r7
 8003c84:	460e      	mov	r6, r1
 8003c86:	d9f4      	bls.n	8003c72 <_printf_i+0x11a>
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d10b      	bne.n	8003ca4 <_printf_i+0x14c>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	07de      	lsls	r6, r3, #31
 8003c90:	d508      	bpl.n	8003ca4 <_printf_i+0x14c>
 8003c92:	6923      	ldr	r3, [r4, #16]
 8003c94:	6861      	ldr	r1, [r4, #4]
 8003c96:	4299      	cmp	r1, r3
 8003c98:	bfde      	ittt	le
 8003c9a:	2330      	movle	r3, #48	; 0x30
 8003c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ca4:	1b52      	subs	r2, r2, r5
 8003ca6:	6122      	str	r2, [r4, #16]
 8003ca8:	f8cd a000 	str.w	sl, [sp]
 8003cac:	464b      	mov	r3, r9
 8003cae:	aa03      	add	r2, sp, #12
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f7ff fee2 	bl	8003a7c <_printf_common>
 8003cb8:	3001      	adds	r0, #1
 8003cba:	d14c      	bne.n	8003d56 <_printf_i+0x1fe>
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	b004      	add	sp, #16
 8003cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc6:	4835      	ldr	r0, [pc, #212]	; (8003d9c <_printf_i+0x244>)
 8003cc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ccc:	6829      	ldr	r1, [r5, #0]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003cd4:	6029      	str	r1, [r5, #0]
 8003cd6:	061d      	lsls	r5, r3, #24
 8003cd8:	d514      	bpl.n	8003d04 <_printf_i+0x1ac>
 8003cda:	07df      	lsls	r7, r3, #31
 8003cdc:	bf44      	itt	mi
 8003cde:	f043 0320 	orrmi.w	r3, r3, #32
 8003ce2:	6023      	strmi	r3, [r4, #0]
 8003ce4:	b91e      	cbnz	r6, 8003cee <_printf_i+0x196>
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f023 0320 	bic.w	r3, r3, #32
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	2310      	movs	r3, #16
 8003cf0:	e7b0      	b.n	8003c54 <_printf_i+0xfc>
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	f043 0320 	orr.w	r3, r3, #32
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	2378      	movs	r3, #120	; 0x78
 8003cfc:	4828      	ldr	r0, [pc, #160]	; (8003da0 <_printf_i+0x248>)
 8003cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d02:	e7e3      	b.n	8003ccc <_printf_i+0x174>
 8003d04:	0659      	lsls	r1, r3, #25
 8003d06:	bf48      	it	mi
 8003d08:	b2b6      	uxthmi	r6, r6
 8003d0a:	e7e6      	b.n	8003cda <_printf_i+0x182>
 8003d0c:	4615      	mov	r5, r2
 8003d0e:	e7bb      	b.n	8003c88 <_printf_i+0x130>
 8003d10:	682b      	ldr	r3, [r5, #0]
 8003d12:	6826      	ldr	r6, [r4, #0]
 8003d14:	6961      	ldr	r1, [r4, #20]
 8003d16:	1d18      	adds	r0, r3, #4
 8003d18:	6028      	str	r0, [r5, #0]
 8003d1a:	0635      	lsls	r5, r6, #24
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	d501      	bpl.n	8003d24 <_printf_i+0x1cc>
 8003d20:	6019      	str	r1, [r3, #0]
 8003d22:	e002      	b.n	8003d2a <_printf_i+0x1d2>
 8003d24:	0670      	lsls	r0, r6, #25
 8003d26:	d5fb      	bpl.n	8003d20 <_printf_i+0x1c8>
 8003d28:	8019      	strh	r1, [r3, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	4615      	mov	r5, r2
 8003d30:	e7ba      	b.n	8003ca8 <_printf_i+0x150>
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	602a      	str	r2, [r5, #0]
 8003d38:	681d      	ldr	r5, [r3, #0]
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f7fc fa5e 	bl	8000200 <memchr>
 8003d44:	b108      	cbz	r0, 8003d4a <_printf_i+0x1f2>
 8003d46:	1b40      	subs	r0, r0, r5
 8003d48:	6060      	str	r0, [r4, #4]
 8003d4a:	6863      	ldr	r3, [r4, #4]
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d54:	e7a8      	b.n	8003ca8 <_printf_i+0x150>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	462a      	mov	r2, r5
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	4640      	mov	r0, r8
 8003d5e:	47d0      	blx	sl
 8003d60:	3001      	adds	r0, #1
 8003d62:	d0ab      	beq.n	8003cbc <_printf_i+0x164>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	079b      	lsls	r3, r3, #30
 8003d68:	d413      	bmi.n	8003d92 <_printf_i+0x23a>
 8003d6a:	68e0      	ldr	r0, [r4, #12]
 8003d6c:	9b03      	ldr	r3, [sp, #12]
 8003d6e:	4298      	cmp	r0, r3
 8003d70:	bfb8      	it	lt
 8003d72:	4618      	movlt	r0, r3
 8003d74:	e7a4      	b.n	8003cc0 <_printf_i+0x168>
 8003d76:	2301      	movs	r3, #1
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	47d0      	blx	sl
 8003d80:	3001      	adds	r0, #1
 8003d82:	d09b      	beq.n	8003cbc <_printf_i+0x164>
 8003d84:	3501      	adds	r5, #1
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	9903      	ldr	r1, [sp, #12]
 8003d8a:	1a5b      	subs	r3, r3, r1
 8003d8c:	42ab      	cmp	r3, r5
 8003d8e:	dcf2      	bgt.n	8003d76 <_printf_i+0x21e>
 8003d90:	e7eb      	b.n	8003d6a <_printf_i+0x212>
 8003d92:	2500      	movs	r5, #0
 8003d94:	f104 0619 	add.w	r6, r4, #25
 8003d98:	e7f5      	b.n	8003d86 <_printf_i+0x22e>
 8003d9a:	bf00      	nop
 8003d9c:	08004195 	.word	0x08004195
 8003da0:	080041a6 	.word	0x080041a6

08003da4 <memcpy>:
 8003da4:	440a      	add	r2, r1
 8003da6:	4291      	cmp	r1, r2
 8003da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dac:	d100      	bne.n	8003db0 <memcpy+0xc>
 8003dae:	4770      	bx	lr
 8003db0:	b510      	push	{r4, lr}
 8003db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003db6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dba:	4291      	cmp	r1, r2
 8003dbc:	d1f9      	bne.n	8003db2 <memcpy+0xe>
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <memmove>:
 8003dc0:	4288      	cmp	r0, r1
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	eb01 0402 	add.w	r4, r1, r2
 8003dc8:	d902      	bls.n	8003dd0 <memmove+0x10>
 8003dca:	4284      	cmp	r4, r0
 8003dcc:	4623      	mov	r3, r4
 8003dce:	d807      	bhi.n	8003de0 <memmove+0x20>
 8003dd0:	1e43      	subs	r3, r0, #1
 8003dd2:	42a1      	cmp	r1, r4
 8003dd4:	d008      	beq.n	8003de8 <memmove+0x28>
 8003dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dde:	e7f8      	b.n	8003dd2 <memmove+0x12>
 8003de0:	4402      	add	r2, r0
 8003de2:	4601      	mov	r1, r0
 8003de4:	428a      	cmp	r2, r1
 8003de6:	d100      	bne.n	8003dea <memmove+0x2a>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003df2:	e7f7      	b.n	8003de4 <memmove+0x24>

08003df4 <_free_r>:
 8003df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003df6:	2900      	cmp	r1, #0
 8003df8:	d044      	beq.n	8003e84 <_free_r+0x90>
 8003dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dfe:	9001      	str	r0, [sp, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f1a1 0404 	sub.w	r4, r1, #4
 8003e06:	bfb8      	it	lt
 8003e08:	18e4      	addlt	r4, r4, r3
 8003e0a:	f000 f913 	bl	8004034 <__malloc_lock>
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <_free_r+0x94>)
 8003e10:	9801      	ldr	r0, [sp, #4]
 8003e12:	6813      	ldr	r3, [r2, #0]
 8003e14:	b933      	cbnz	r3, 8003e24 <_free_r+0x30>
 8003e16:	6063      	str	r3, [r4, #4]
 8003e18:	6014      	str	r4, [r2, #0]
 8003e1a:	b003      	add	sp, #12
 8003e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e20:	f000 b90e 	b.w	8004040 <__malloc_unlock>
 8003e24:	42a3      	cmp	r3, r4
 8003e26:	d908      	bls.n	8003e3a <_free_r+0x46>
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	1961      	adds	r1, r4, r5
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	bf01      	itttt	eq
 8003e30:	6819      	ldreq	r1, [r3, #0]
 8003e32:	685b      	ldreq	r3, [r3, #4]
 8003e34:	1949      	addeq	r1, r1, r5
 8003e36:	6021      	streq	r1, [r4, #0]
 8003e38:	e7ed      	b.n	8003e16 <_free_r+0x22>
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	b10b      	cbz	r3, 8003e44 <_free_r+0x50>
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	d9fa      	bls.n	8003e3a <_free_r+0x46>
 8003e44:	6811      	ldr	r1, [r2, #0]
 8003e46:	1855      	adds	r5, r2, r1
 8003e48:	42a5      	cmp	r5, r4
 8003e4a:	d10b      	bne.n	8003e64 <_free_r+0x70>
 8003e4c:	6824      	ldr	r4, [r4, #0]
 8003e4e:	4421      	add	r1, r4
 8003e50:	1854      	adds	r4, r2, r1
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	6011      	str	r1, [r2, #0]
 8003e56:	d1e0      	bne.n	8003e1a <_free_r+0x26>
 8003e58:	681c      	ldr	r4, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	6053      	str	r3, [r2, #4]
 8003e5e:	4421      	add	r1, r4
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	e7da      	b.n	8003e1a <_free_r+0x26>
 8003e64:	d902      	bls.n	8003e6c <_free_r+0x78>
 8003e66:	230c      	movs	r3, #12
 8003e68:	6003      	str	r3, [r0, #0]
 8003e6a:	e7d6      	b.n	8003e1a <_free_r+0x26>
 8003e6c:	6825      	ldr	r5, [r4, #0]
 8003e6e:	1961      	adds	r1, r4, r5
 8003e70:	428b      	cmp	r3, r1
 8003e72:	bf04      	itt	eq
 8003e74:	6819      	ldreq	r1, [r3, #0]
 8003e76:	685b      	ldreq	r3, [r3, #4]
 8003e78:	6063      	str	r3, [r4, #4]
 8003e7a:	bf04      	itt	eq
 8003e7c:	1949      	addeq	r1, r1, r5
 8003e7e:	6021      	streq	r1, [r4, #0]
 8003e80:	6054      	str	r4, [r2, #4]
 8003e82:	e7ca      	b.n	8003e1a <_free_r+0x26>
 8003e84:	b003      	add	sp, #12
 8003e86:	bd30      	pop	{r4, r5, pc}
 8003e88:	20000140 	.word	0x20000140

08003e8c <sbrk_aligned>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4e0e      	ldr	r6, [pc, #56]	; (8003ec8 <sbrk_aligned+0x3c>)
 8003e90:	460c      	mov	r4, r1
 8003e92:	6831      	ldr	r1, [r6, #0]
 8003e94:	4605      	mov	r5, r0
 8003e96:	b911      	cbnz	r1, 8003e9e <sbrk_aligned+0x12>
 8003e98:	f000 f8bc 	bl	8004014 <_sbrk_r>
 8003e9c:	6030      	str	r0, [r6, #0]
 8003e9e:	4621      	mov	r1, r4
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f000 f8b7 	bl	8004014 <_sbrk_r>
 8003ea6:	1c43      	adds	r3, r0, #1
 8003ea8:	d00a      	beq.n	8003ec0 <sbrk_aligned+0x34>
 8003eaa:	1cc4      	adds	r4, r0, #3
 8003eac:	f024 0403 	bic.w	r4, r4, #3
 8003eb0:	42a0      	cmp	r0, r4
 8003eb2:	d007      	beq.n	8003ec4 <sbrk_aligned+0x38>
 8003eb4:	1a21      	subs	r1, r4, r0
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	f000 f8ac 	bl	8004014 <_sbrk_r>
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d101      	bne.n	8003ec4 <sbrk_aligned+0x38>
 8003ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	bd70      	pop	{r4, r5, r6, pc}
 8003ec8:	20000144 	.word	0x20000144

08003ecc <_malloc_r>:
 8003ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed0:	1ccd      	adds	r5, r1, #3
 8003ed2:	f025 0503 	bic.w	r5, r5, #3
 8003ed6:	3508      	adds	r5, #8
 8003ed8:	2d0c      	cmp	r5, #12
 8003eda:	bf38      	it	cc
 8003edc:	250c      	movcc	r5, #12
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	4607      	mov	r7, r0
 8003ee2:	db01      	blt.n	8003ee8 <_malloc_r+0x1c>
 8003ee4:	42a9      	cmp	r1, r5
 8003ee6:	d905      	bls.n	8003ef4 <_malloc_r+0x28>
 8003ee8:	230c      	movs	r3, #12
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	2600      	movs	r6, #0
 8003eee:	4630      	mov	r0, r6
 8003ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef4:	4e2e      	ldr	r6, [pc, #184]	; (8003fb0 <_malloc_r+0xe4>)
 8003ef6:	f000 f89d 	bl	8004034 <__malloc_lock>
 8003efa:	6833      	ldr	r3, [r6, #0]
 8003efc:	461c      	mov	r4, r3
 8003efe:	bb34      	cbnz	r4, 8003f4e <_malloc_r+0x82>
 8003f00:	4629      	mov	r1, r5
 8003f02:	4638      	mov	r0, r7
 8003f04:	f7ff ffc2 	bl	8003e8c <sbrk_aligned>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	d14d      	bne.n	8003faa <_malloc_r+0xde>
 8003f0e:	6834      	ldr	r4, [r6, #0]
 8003f10:	4626      	mov	r6, r4
 8003f12:	2e00      	cmp	r6, #0
 8003f14:	d140      	bne.n	8003f98 <_malloc_r+0xcc>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	4631      	mov	r1, r6
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	eb04 0803 	add.w	r8, r4, r3
 8003f20:	f000 f878 	bl	8004014 <_sbrk_r>
 8003f24:	4580      	cmp	r8, r0
 8003f26:	d13a      	bne.n	8003f9e <_malloc_r+0xd2>
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	3503      	adds	r5, #3
 8003f2c:	1a6d      	subs	r5, r5, r1
 8003f2e:	f025 0503 	bic.w	r5, r5, #3
 8003f32:	3508      	adds	r5, #8
 8003f34:	2d0c      	cmp	r5, #12
 8003f36:	bf38      	it	cc
 8003f38:	250c      	movcc	r5, #12
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	f7ff ffa5 	bl	8003e8c <sbrk_aligned>
 8003f42:	3001      	adds	r0, #1
 8003f44:	d02b      	beq.n	8003f9e <_malloc_r+0xd2>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	442b      	add	r3, r5
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	e00e      	b.n	8003f6c <_malloc_r+0xa0>
 8003f4e:	6822      	ldr	r2, [r4, #0]
 8003f50:	1b52      	subs	r2, r2, r5
 8003f52:	d41e      	bmi.n	8003f92 <_malloc_r+0xc6>
 8003f54:	2a0b      	cmp	r2, #11
 8003f56:	d916      	bls.n	8003f86 <_malloc_r+0xba>
 8003f58:	1961      	adds	r1, r4, r5
 8003f5a:	42a3      	cmp	r3, r4
 8003f5c:	6025      	str	r5, [r4, #0]
 8003f5e:	bf18      	it	ne
 8003f60:	6059      	strne	r1, [r3, #4]
 8003f62:	6863      	ldr	r3, [r4, #4]
 8003f64:	bf08      	it	eq
 8003f66:	6031      	streq	r1, [r6, #0]
 8003f68:	5162      	str	r2, [r4, r5]
 8003f6a:	604b      	str	r3, [r1, #4]
 8003f6c:	4638      	mov	r0, r7
 8003f6e:	f104 060b 	add.w	r6, r4, #11
 8003f72:	f000 f865 	bl	8004040 <__malloc_unlock>
 8003f76:	f026 0607 	bic.w	r6, r6, #7
 8003f7a:	1d23      	adds	r3, r4, #4
 8003f7c:	1af2      	subs	r2, r6, r3
 8003f7e:	d0b6      	beq.n	8003eee <_malloc_r+0x22>
 8003f80:	1b9b      	subs	r3, r3, r6
 8003f82:	50a3      	str	r3, [r4, r2]
 8003f84:	e7b3      	b.n	8003eee <_malloc_r+0x22>
 8003f86:	6862      	ldr	r2, [r4, #4]
 8003f88:	42a3      	cmp	r3, r4
 8003f8a:	bf0c      	ite	eq
 8003f8c:	6032      	streq	r2, [r6, #0]
 8003f8e:	605a      	strne	r2, [r3, #4]
 8003f90:	e7ec      	b.n	8003f6c <_malloc_r+0xa0>
 8003f92:	4623      	mov	r3, r4
 8003f94:	6864      	ldr	r4, [r4, #4]
 8003f96:	e7b2      	b.n	8003efe <_malloc_r+0x32>
 8003f98:	4634      	mov	r4, r6
 8003f9a:	6876      	ldr	r6, [r6, #4]
 8003f9c:	e7b9      	b.n	8003f12 <_malloc_r+0x46>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	f000 f84c 	bl	8004040 <__malloc_unlock>
 8003fa8:	e7a1      	b.n	8003eee <_malloc_r+0x22>
 8003faa:	6025      	str	r5, [r4, #0]
 8003fac:	e7de      	b.n	8003f6c <_malloc_r+0xa0>
 8003fae:	bf00      	nop
 8003fb0:	20000140 	.word	0x20000140

08003fb4 <_realloc_r>:
 8003fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb8:	4680      	mov	r8, r0
 8003fba:	4614      	mov	r4, r2
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	b921      	cbnz	r1, 8003fca <_realloc_r+0x16>
 8003fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	f7ff bf81 	b.w	8003ecc <_malloc_r>
 8003fca:	b92a      	cbnz	r2, 8003fd8 <_realloc_r+0x24>
 8003fcc:	f7ff ff12 	bl	8003df4 <_free_r>
 8003fd0:	4625      	mov	r5, r4
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd8:	f000 f838 	bl	800404c <_malloc_usable_size_r>
 8003fdc:	4284      	cmp	r4, r0
 8003fde:	4607      	mov	r7, r0
 8003fe0:	d802      	bhi.n	8003fe8 <_realloc_r+0x34>
 8003fe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fe6:	d812      	bhi.n	800400e <_realloc_r+0x5a>
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff ff6e 	bl	8003ecc <_malloc_r>
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d0ed      	beq.n	8003fd2 <_realloc_r+0x1e>
 8003ff6:	42bc      	cmp	r4, r7
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	bf28      	it	cs
 8003ffe:	463a      	movcs	r2, r7
 8004000:	f7ff fed0 	bl	8003da4 <memcpy>
 8004004:	4631      	mov	r1, r6
 8004006:	4640      	mov	r0, r8
 8004008:	f7ff fef4 	bl	8003df4 <_free_r>
 800400c:	e7e1      	b.n	8003fd2 <_realloc_r+0x1e>
 800400e:	4635      	mov	r5, r6
 8004010:	e7df      	b.n	8003fd2 <_realloc_r+0x1e>
	...

08004014 <_sbrk_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4d06      	ldr	r5, [pc, #24]	; (8004030 <_sbrk_r+0x1c>)
 8004018:	2300      	movs	r3, #0
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	f7fc fe74 	bl	8000d0c <_sbrk>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_sbrk_r+0x1a>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_sbrk_r+0x1a>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000148 	.word	0x20000148

08004034 <__malloc_lock>:
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <__malloc_lock+0x8>)
 8004036:	f000 b811 	b.w	800405c <__retarget_lock_acquire_recursive>
 800403a:	bf00      	nop
 800403c:	2000014c 	.word	0x2000014c

08004040 <__malloc_unlock>:
 8004040:	4801      	ldr	r0, [pc, #4]	; (8004048 <__malloc_unlock+0x8>)
 8004042:	f000 b80c 	b.w	800405e <__retarget_lock_release_recursive>
 8004046:	bf00      	nop
 8004048:	2000014c 	.word	0x2000014c

0800404c <_malloc_usable_size_r>:
 800404c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004050:	1f18      	subs	r0, r3, #4
 8004052:	2b00      	cmp	r3, #0
 8004054:	bfbc      	itt	lt
 8004056:	580b      	ldrlt	r3, [r1, r0]
 8004058:	18c0      	addlt	r0, r0, r3
 800405a:	4770      	bx	lr

0800405c <__retarget_lock_acquire_recursive>:
 800405c:	4770      	bx	lr

0800405e <__retarget_lock_release_recursive>:
 800405e:	4770      	bx	lr

08004060 <_init>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	bf00      	nop
 8004064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004066:	bc08      	pop	{r3}
 8004068:	469e      	mov	lr, r3
 800406a:	4770      	bx	lr

0800406c <_fini>:
 800406c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800406e:	bf00      	nop
 8004070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004072:	bc08      	pop	{r3}
 8004074:	469e      	mov	lr, r3
 8004076:	4770      	bx	lr
